<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[精品软件推荐—Listary一款高效人士必备搜索增强工具]]></title>
      <url>http://tengj.top/2017/03/18/listary/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>上次推荐了Wox这款快捷启动辅助工具后，反响不错（不知道的可以看我之前发布的文章）。今天就来推荐一款可以跟Wox配合使用，提高效率X2的神器。<br>那就是Listary。</p>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>如果你平常工作经常处理文件，或者你平时文件路径藏的很深，那么这款Listary绝对可以减少你的搜索时间。大家都知道，我们使用的Window本身自带的 文件浏览对话框查询慢不说，还只能查询的路径下面的，比如我打开的是E盘，那我搜索的话就只能搜索E盘下面的内容，查询体验很差。 Listary 它是一款非常优秀的 <code>Windows文件浏览</code>和<code>搜索增强</code>工具， 可以为你 Windows 的「文件浏览对话框」、「资源管理器」等增加非常方便的文件快速定位、实时全盘搜索、常用文件夹收藏、打开历史、快速切换到已打开的路径、快捷右键菜单等一系列非常非常实用和高效的功能，它能将 Windows 的便捷性提高到一个新的高度！</p>
<p>小编我自从认识这个软件后，就彻底爱上它了。接下来就让我一一来介绍Listarty的各个功能。</p>
<h2 id="Listarty结构"><a href="#Listarty结构" class="headerlink" title="Listarty结构"></a>Listarty结构</h2><p>软件如下图所示，提供了简体中文语言，多款可选择主题。自带网页搜索以及自定义的快捷命令，以后关机重启什么的直接键盘搞定即可，大大的释放你的鼠标。并且Listary体积小巧，而且运行快速，即便在低配置的电脑上常驻系统使用也不会察觉有丝毫拖慢速度的现象。<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/listart1.gif" alt=""></p>
<h2 id="实时全盘搜索"><a href="#实时全盘搜索" class="headerlink" title="实时全盘搜索"></a>实时全盘搜索</h2><p>Listarty可以在任何地方发起全盘搜索，只要双击两次Ctrl即可弹出搜索框，然后输入你要查询的内容即可。Listarty支持拼音搜索功能，可以说对中文环境的支持已经达到了完美。<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/listary0.gif" alt=""></p>
<h2 id="网页搜索功能"><a href="#网页搜索功能" class="headerlink" title="网页搜索功能"></a>网页搜索功能</h2><p>Listarty支持网页搜索功能，平时我们要查东西，还要先点击浏览器，再切到百度或者谷歌输入你想要搜索的内容。而Listarty下面提供了网页搜索的快捷，默认提供了如下这些触发命令。例如我们要百度博主博客嘟嘟MD，可以这样:<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/web.gif" alt=""></p>
<h2 id="快捷命令启动"><a href="#快捷命令启动" class="headerlink" title="快捷命令启动"></a>快捷命令启动</h2><p>Listarty内置了一些快捷的命令启动，个人感觉比较有用的是以管理员身份启动cmd窗口，还有就是关机了。Listarty也可以快捷启动应用程序。不过个人感觉这点没有Wox的好用。所以推荐2者搭配使用<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/kuaijiemingl.gif" alt=""></p>
<h2 id="常用文件夹收藏和打开历史"><a href="#常用文件夹收藏和打开历史" class="headerlink" title="常用文件夹收藏和打开历史"></a>常用文件夹收藏和打开历史</h2><p>Listarty有人性化的提供了历史纪录以及查看收藏的功能，这样就可以有效的提高重复的工作效率了。<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/lisi.gif" alt=""></p>
<h2 id="快速切换功能"><a href="#快速切换功能" class="headerlink" title="快速切换功能"></a>快速切换功能</h2><p>有没有这样一种场景，你在使用的软件中想打开某个文件的时候，你会先在外面一层一层打开你想要的文件，然后再使用软件一层一层再找到刚才那个文件的路径。 这里就做了一遍重复的操作。</p>
<p>Listary就能快速帮你切换，节省最后一步的重复时间，你只要在需要在软件需要选择文件或者图片的时候，直接按CTRL+O即可切换到刚才选择的文件，如下：<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/listary3.gif" alt=""></p>
<h2 id="其他功能"><a href="#其他功能" class="headerlink" title="其他功能"></a>其他功能</h2><p>Listary 除了支持 Windows 的资源管理器、文件对话框的增强之外，还能提供TotalCommander、WinRAR、FileZillar、7Zip、XYPlorer、FreeCommander 等知名软件的增强支持，配合它们用起来使用效率更加无敌！此外，如果你喜欢使用 Everything 进行文件搜索的话，Listary 还能与它结合，用它替代自身的搜索功能。具体的大家可以慢慢研究，这里就不一一介绍了。</p>
<h2 id="免费版与Pro版区别"><a href="#免费版与Pro版区别" class="headerlink" title="免费版与Pro版区别"></a>免费版与Pro版区别</h2><p>除了视频中介绍的那些特性之外，Listary 其实还有很多很实用的增强功能和特性，譬如 Project (项目汇聚搜索)、FuzzyNavigation (搜索当前文件夹里面的所有文件)  等特性大家可以下载回去慢慢试用和体会。不过可惜的是，其中很多优秀的功能（如刚提到的两项、还有视频中按右方向键调用文件的菜单等等）都是 Listary Pro 专业版专享的，免费版并不能使用。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>目前Listary官网只能下载到Listary初级版本的~ Listary Pro的好像原售价高达 19.95$ 美元，折合人民币122元。大家不要怕，既然博主推荐大家使用。说明我已经找到Pro破解版了（有经济能力的还是推荐购买原版）。有需要的在下方评论留下你的邮箱。博主会一一奉献上的。喜欢就点个赞，关注我，后续精品软件推荐不断。gif中的壁纸喜欢的话也可以留言。</p>
]]></content>
      
        <categories>
            
            <category> 精品软件推荐 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> listary </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring Boot干货系列：（五）开发Web应用之JSP篇]]></title>
      <url>http://tengj.top/2017/03/13/springboot5/</url>
      <content type="html"><![CDATA[<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/spring.jpg" alt=""></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>上一篇介绍了Spring Boot中使用Thymeleaf模板引擎，今天来介绍一下如何使用SpringBoot官方不推荐的jsp,虽然难度有点大，但是玩起来还是蛮有意思的。</p>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>先来看看整体的框架结构，跟前面介绍Thymeleaf的时候差不多，只是多了webapp这个用来存放jsp的目录，静态资源还是放在resources的static下面。<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/springboot5-1.jpg" alt=""></p>
<h2 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--WEB支持--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--jsp页面使用jstl标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--用于编译jsp--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.apache.tomcat.embed<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>tomcat-embed-jasper<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="title">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>使用内嵌的tomcat容器来运行的话只要这3个就好了。这里介绍下maven中scope依赖范围的概念，因为后续涉及到这个会有问题。</p>
<p>依赖范围就是用来控制依赖和三种classpath(编译classpath，测试classpath、运行classpath)的关系，Maven有如下几种依赖范围：</p>
<ul>
<li><strong>compile:</strong>编译依赖范围。如果没有指定，就会默认使用该依赖范围。使用此依赖范围的Maven依赖，对于编译、测试、运行三种classpath都有效。典型的例子是spring-code,在编译、测试和运行的时候都需要使用该依赖。</li>
<li><strong>test:</strong> 测试依赖范围。使用次依赖范围的Maven依赖，只对于测试classpath有效，在编译主代码或者运行项目的使用时将无法使用此依赖。典型的例子是Jnuit,它只有在编译测试代码及运行测试的时候才需要。</li>
<li><strong>provided:</strong>已提供依赖范围。使用此依赖范围的Maven依赖，对于编译和测试classpath有效，但在运行时候无效。典型的例子是servlet-api,编译和测试项目的时候需要该依赖，但在运行项目的时候，由于容器以及提供，就不需要Maven重复地引入一遍。</li>
</ul>
<h2 id="application-properties配置"><a href="#application-properties配置" class="headerlink" title="application.properties配置"></a>application.properties配置</h2><p>要支持jsp，需要在application.properties中配置返回文件的路径以及类型<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spring.mvc.view.prefix: /WEB-INF/jsp/</span><br><span class="line">spring.mvc.view.suffix: .jsp</span><br></pre></td></tr></table></figure></p>
<p>这里指定了返回文件类型为jsp,路径是在/WEB-INF/jsp/下面。</p>
<h2 id="控制类"><a href="#控制类" class="headerlink" title="控制类"></a>控制类</h2><p>上面步骤有了，这里就开始写控制类，直接上简单的代码，跟正常的springMVC没啥区别：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Controller</span></span><br><span class="line"><span class="annotation">@RequestMapping</span>(<span class="string">"/learn"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LearnResourceController</span> </span>&#123;</span><br><span class="line">    <span class="annotation">@RequestMapping</span>(<span class="string">""</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;LearnResouce&gt; learnList =<span class="keyword">new</span> ArrayList&lt;LearnResouce&gt;();</span><br><span class="line">        LearnResouce bean =<span class="keyword">new</span> LearnResouce(<span class="string">"官方参考文档"</span>,<span class="string">"Spring Boot Reference Guide"</span>,<span class="string">"http://docs.spring.io/spring-boot/docs/1.5.1.RELEASE/reference/htmlsingle/#getting-started-first-application"</span>);</span><br><span class="line">        learnList.add(bean);</span><br><span class="line">        bean =<span class="keyword">new</span> LearnResouce(<span class="string">"官方SpriongBoot例子"</span>,<span class="string">"官方SpriongBoot例子"</span>,<span class="string">"https://github.com/spring-projects/spring-boot/tree/master/spring-boot-samples"</span>);</span><br><span class="line">        learnList.add(bean);</span><br><span class="line">        bean =<span class="keyword">new</span> LearnResouce(<span class="string">"龙国学院"</span>,<span class="string">"Spring Boot 教程系列学习"</span>,<span class="string">"http://www.roncoo.com/article/detail/125488"</span>);</span><br><span class="line">        learnList.add(bean);</span><br><span class="line">        bean =<span class="keyword">new</span> LearnResouce(<span class="string">"嘟嘟MD独立博客"</span>,<span class="string">"Spring Boot干货系列 "</span>,<span class="string">"http://tengj.top/"</span>);</span><br><span class="line">        learnList.add(bean);</span><br><span class="line">        bean =<span class="keyword">new</span> LearnResouce(<span class="string">"后端编程嘟"</span>,<span class="string">"Spring Boot教程和视频 "</span>,<span class="string">"http://www.toutiao.com/m1559096720023553/"</span>);</span><br><span class="line">        learnList.add(bean);</span><br><span class="line">        bean =<span class="keyword">new</span> LearnResouce(<span class="string">"程序猿DD"</span>,<span class="string">"Spring Boot系列"</span>,<span class="string">"http://www.roncoo.com/article/detail/125488"</span>);</span><br><span class="line">        learnList.add(bean);</span><br><span class="line">        bean =<span class="keyword">new</span> LearnResouce(<span class="string">"纯洁的微笑"</span>,<span class="string">"Sping Boot系列文章"</span>,<span class="string">"http://www.ityouknow.com/spring-boot"</span>);</span><br><span class="line">        learnList.add(bean);</span><br><span class="line">        bean =<span class="keyword">new</span> LearnResouce(<span class="string">"CSDN——小当博客专栏"</span>,<span class="string">"Sping Boot学习"</span>,<span class="string">"http://blog.csdn.net/column/details/spring-boot.html"</span>);</span><br><span class="line">        learnList.add(bean);</span><br><span class="line">        bean =<span class="keyword">new</span> LearnResouce(<span class="string">"梁桂钊的博客"</span>,<span class="string">"Spring Boot 揭秘与实战"</span>,<span class="string">"http://blog.csdn.net/column/details/spring-boot.html"</span>);</span><br><span class="line">        learnList.add(bean);</span><br><span class="line">        bean =<span class="keyword">new</span> LearnResouce(<span class="string">"林祥纤博客系列"</span>,<span class="string">"从零开始学Spring Boot "</span>,<span class="string">"http://412887952-qq-com.iteye.com/category/356333"</span>);</span><br><span class="line">        learnList.add(bean);</span><br><span class="line">        ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView(<span class="string">"/index"</span>);</span><br><span class="line">        modelAndView.addObject(<span class="string">"learnList"</span>, learnList);</span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="jsp页面编写"><a href="#jsp页面编写" class="headerlink" title="jsp页面编写"></a>jsp页面编写</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">body</span> <span class="attribute">style</span>=<span class="value">"background-image: none;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"body_wrap"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"container"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"alert alert-success text-center"</span> <span class="attribute">role</span>=<span class="value">"alert"</span>&gt;</span>Sptring Boot学习资源大奉送，爱我就关注嘟嘟公众号：嘟爷java超神学堂<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">table</span> <span class="attribute">class</span>=<span class="value">"table table-striped table-bordered"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">td</span>&gt;</span>作者<span class="tag">&lt;/<span class="title">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">td</span>&gt;</span>教程名称<span class="tag">&lt;/<span class="title">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">td</span>&gt;</span>地址<span class="tag">&lt;/<span class="title">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="title">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">c:forEach</span> <span class="attribute">var</span>=<span class="value">"learn"</span> <span class="attribute">items</span>=<span class="value">"$&#123;learnList&#125;"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">tr</span> <span class="attribute">class</span>=<span class="value">"text-info"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="title">td</span> <span class="attribute">th:text</span>=<span class="value">"$&#123;learn.author&#125;"</span>&gt;</span>嘟嘟MD<span class="tag">&lt;/<span class="title">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="title">td</span> <span class="attribute">th:text</span>=<span class="value">"$&#123;learn.title&#125;"</span>&gt;</span>SPringBoot干货系列<span class="tag">&lt;/<span class="title">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="title">td</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#"</span> <span class="attribute">th:href</span>=<span class="value">"$&#123;learn.url&#125;"</span> <span class="attribute">class</span>=<span class="value">"btn btn-search btn-green"</span> <span class="attribute">target</span>=<span class="value">"_blank"</span>&gt;</span><span class="tag">&lt;<span class="title">span</span>&gt;</span>点我<span class="tag">&lt;/<span class="title">span</span>&gt;</span><span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="title">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="title">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="title">c:forEach</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="启动类"><a href="#启动类" class="headerlink" title="启动类"></a>启动类</h2><p>启动类不变还是最简单的<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span>  </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="内嵌Tomcat容器运行项目"><a href="#内嵌Tomcat容器运行项目" class="headerlink" title="内嵌Tomcat容器运行项目"></a>内嵌Tomcat容器运行项目</h2><p>基本配置好了就可以启动项目，通过<a href="http://localhost:8080/learn" target="_blank" rel="external">http://localhost:8080/learn</a> 访问，我使用的SpringBoot是１.５.2版本，jdk1.8,以前介绍过，运行项目有三种方式，这里我都做过了一次测试，发现在maven中jasper依赖有加<scope>provided</scope>和注释掉该依赖范围运行的效果不大一样，具体对比如下：</p>
<p><strong>有添加<scope>provided</scope>的情况：</strong></p>
<ul>
<li>右键运行启动类，访问页面报404错误</li>
<li>使用spring-boot:run运行正常</li>
<li>打包成jar，通过 java -jar demo-0.0.1-SNAPSHOT.jar 运行报错</li>
<li>打包成war，通过 java -jar demo-0.0.1-SNAPSHOT.war 运行正常</li>
</ul>
<p><strong>把<scope>provided</scope> 注释掉的情况</strong></p>
<ul>
<li>右键运行启动类，访问页面正常</li>
<li>spring-boot:run运行 访问页面正常</li>
<li>打包成jar，通过 java -jar demo-0.0.1-SNAPSHOT.jar 运行报错</li>
<li>打包成war，通过 java -jar demo-0.0.1-SNAPSHOT.war 运行正常</li>
</ul>
<p>我测试了好几次都是这样，就是有加<scope>provided</scope>的时候，右键运行启动类访问页面的时候，提示404错误。<br>其他3种情况都一样， jar运行也报404，spring-boot:run以及war运行都可以。</p>
<p>为什么jar包运行不行呢，我们打开打包的jar和war分别看看区别，如下2图所示：<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/sringboot5-2.png" alt=""><br><img src="http://7xqch5.com1.z0.glb.clouddn.com/springboot5-33.png" alt=""><br>从上面可以看出来，jar包运行的时候会404错误，因为默认jsp不会被拷贝进来，而war包里面有包含了jsp，所以没问题。</p>
<h2 id="内嵌Tomcat属性配置"><a href="#内嵌Tomcat属性配置" class="headerlink" title="内嵌Tomcat属性配置"></a>内嵌Tomcat属性配置</h2><p>关于Tomcat的偶有属性都在org.springframework.boot.autoconfigure.web.ServerProperties配置类中做了定义，我们只需在application.properties配置属性做配置即可。通用的Servlet容器配置都已”server”左右前缀，而Tomcat特有配置都以”server.tomcat”作为前缀。下面举一些常用的例子。</p>
<p><strong>配置Servlet容器</strong>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#&#37197;&#32622;&#31243;&#24207;&#31471;&#21475;&#65292;&#40664;&#35748;&#20026;8080&#10;server.port= 8080&#10;#&#29992;&#25143;&#32472;&#30011;session&#36807;&#26399;&#26102;&#38388;&#65292;&#20197;&#31186;&#20026;&#21333;&#20301;&#10;server.session.timeout=&#10;# &#37197;&#32622;&#40664;&#35748;&#35775;&#38382;&#36335;&#24452;&#65292;&#40664;&#35748;&#20026;/&#10;server.context-path=</span><br></pre></td></tr></table></figure></p>
<p><strong>配置Tomcat：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># &#37197;&#32622;Tomcat&#32534;&#30721;,&#40664;&#35748;&#20026;UTF-8&#10;server.tomcat.uri-encoding=UTF-8&#10;# &#37197;&#32622;&#26368;&#22823;&#32447;&#31243;&#25968;&#10;server.tomcat.max-threads=1000</span><br></pre></td></tr></table></figure></p>
<p>更为详细的Servlet容器配置以及Tomcat配置，可以前往博主之前文章查看：<a href="http://tengj.top/2017/02/28/springbootconfig/" title="Spring Boot干货系列：常用属性汇总">Spring Boot干货系列：常用属性汇总</a></p>
<h2 id="外部的Tomcat服务器部署war包"><a href="#外部的Tomcat服务器部署war包" class="headerlink" title="外部的Tomcat服务器部署war包"></a>外部的Tomcat服务器部署war包</h2><p>Spring Boot项目需要部署在外部容器中的时候，Spring Boot导出的war包如果直接在Tomcat的部署会报错，不信你可以试试看。<br>需要做到下面两点修改才可以：</p>
<ul>
<li>继承SpringBootServletInitializer<br>外部容器部署的话，就不能依赖于Application的main函数了，而是要以类似于web.xml文件配置的方式来启动Spring应用上下文，此时我们需要在启动类中继承SpringBootServletInitializer并实现configure方法：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> <span class="keyword">extends</span> <span class="title">SpringBootServletInitializer</span> </span>&#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> SpringApplicationBuilder <span class="title">configure</span><span class="params">(SpringApplicationBuilder application)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> application.sources(Application.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>这个类的作用与在web.xml中配置负责初始化Spring应用上下文的监听器作用类似，只不过在这里不需要编写额外的XML文件了。</p>
<ul>
<li>pom.xml修改tomcat相关的配置<br>如果要将最终的打包形式改为war的话，还需要对pom.xml文件进行修改，因为spring-boot-starter-web中包含内嵌的tomcat容器，所以直接部署在外部容器会冲突报错。这里有两种方法可以解决，如下<br><strong>方法一</strong>：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>在这里需要移除对嵌入式Tomcat的依赖，这样打出的war包中，在lib目录下才不会包含Tomcat相关的jar包，否则将会出现启动错误。<br>还有一个很关键的关键点，就是tomcat-embed-jasper中scope必须是provided。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.apache.tomcat.embed<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>tomcat-embed-jasper<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="title">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>因为SpringBootServletInitializer需要依赖 javax.servlet，而tomcat-embed-jasper下面的tomcat-embed-core中就有这个javax.servlet，如果没用provided，最终打好的war里面会有servlet-api这个jar，这样就会跟tomcat本身的冲突了。这个关键点同样适应于下面说的第二种方法。<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/springboot5-4.png" alt=""></p>
<p><strong>方法二</strong>：<br>直接添加如下配置即可：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="title">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>provided的作用上面已经介绍的很透彻了，这里就不啰嗦了，这种方式的好处是，打包的war包同时适合java -jar命令启动以及部署到外部容器中。</p>
<p>如果你不喜欢默认的打包名称，你可以通过<build>节点里添加<finalname>内容。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">build</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">finalName</span>&gt;</span>springBootJsp<span class="tag">&lt;/<span class="title">finalName</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">bulid</span>&gt;</span></span><br></pre></td></tr></table></figure></finalname></build></p>
<p>最后启动tomcat输入<a href="http://localhost:8080/springBootJsp/learn" target="_blank" rel="external">http://localhost:8080/springBootJsp/learn</a> 查看效果，还是美美哒<br> <img src="http://7xqch5.com1.z0.glb.clouddn.com/springboot5-5.png" alt=""></p>
<h2 id="关于使用jar部署"><a href="#关于使用jar部署" class="headerlink" title="关于使用jar部署"></a>关于使用jar部署</h2><p>上面已经测试过了，正常情况下包含jsp的页面是无法用jar的运行的，因为jsp默认是在webapp目录下，可是打包成jar是没有webapp这个目录结构的。</p>
<p>虽然网上有介绍说通过pom.xml配置，把WEB-INF目录复制到META-INF/resources下面。但是博主试了一整天还是访问不了，最后放弃了。各位如何有兴趣可以继续尝试，毕竟war也可以通过java -jar命令来启动的不是么。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>我相信全网都找不到一篇有我这篇这么详细的介绍Spring Boot使用jsp的文章。有很多人问我，为什么我的很多文章这么简单易懂，我每次都是哭着回复他们四个字：主题阅读，天知道我参考了多少篇网上的文章，外加多少本相关书籍中关于这个章节的内容，反复对比提炼，最后才产出对应的博文。说真的，我很羡慕你们在这个信息爆炸的时代，刚好看到一篇自己要学习的技术的好文章，少走多少弯路。</p>
<p>说了这么多煽情的话，哪位大兄弟带一波节奏啊，好久没收到打赏了d=====(￣▽￣*)b</p>
<h1 id="源码下载"><a href="#源码下载" class="headerlink" title="源码下载"></a>源码下载</h1><p>(￣︶￣)↗[<a href="https://github.com/tengj/SpringBootDemo/tree/master" target="_blank" rel="external">相关示例完整代码</a>]</p>
<hr>
<p>博主有几本Spring Boot的中文电子书资料，有需要的可以关注博主微信公众号（嘟爷java超神学堂），自行前往下载【开发工具-&gt;java电子书籍】  </p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/springboot1-12.png" alt=""><br><a href="http://7xqch5.com1.z0.glb.clouddn.com/javaLearn.PNG" target="_blank" rel="external"><img src="http://7xqch5.com1.z0.glb.clouddn.com/javaLearn.PNG" alt=""></a></p>
]]></content>
      
        <categories>
            
            <category> Spring Boot干货系列 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring Boot干货系列：（四）开发Web应用之Thymeleaf篇]]></title>
      <url>http://tengj.top/2017/03/13/springboot4/</url>
      <content type="html"><![CDATA[<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/spring.jpg" alt=""></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Web开发是我们平时开发中至关重要的，这里就来介绍一下Spring Boot对Web开发的支持。</p>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>Spring Boot提供了spring-boot-starter-web为Web开发予以支持，spring-boot-starter-web为我们提供了嵌入的Tomcat以及Spring MVC的依赖。</p>
<h2 id="项目结构推荐"><a href="#项目结构推荐" class="headerlink" title="项目结构推荐"></a>项目结构推荐</h2><p>一个好的项目结构会让你开发少一些问题，特别是Spring Boot中启动类要放在root package下面，我的web工程项目结构如下：<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/springboot4-1.jpg" alt=""></p>
<ul>
<li>root package结构：<code>com.dudu</code></li>
<li>应用启动类<code>Application.java</code>置于root package下，这样使用@ComponentScan注解的时候默认就扫描当前所在类的package</li>
<li>实体（Entity）置于<code>com.dudu.domain</code>包下</li>
<li>逻辑层（Service）置于<code>com.dudu.service</code>包下</li>
<li>controller层（web）置于<code>com.dudu.controller层</code>包下</li>
<li>static可以用来存放静态资源</li>
<li>templates用来存放默认的模板配置路径</li>
</ul>
<h2 id="Spring-Web-MVC框架介绍"><a href="#Spring-Web-MVC框架介绍" class="headerlink" title="Spring Web MVC框架介绍"></a>Spring Web MVC框架介绍</h2><p>Spring Web MVC框架（通常简称为”Spring MVC”）是一个富”模型，视图，控制器”的web框架。<br>Spring MVC允许你创建特定的<a href="https://github.com/Controller" title="@Controller" target="_blank" rel="external">@Controller</a>或<a href="https://github.com/RestController" title="@RestController" target="_blank" rel="external">@RestController</a> beans来处理传入的HTTP请求。<br>示例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@RestController</span></span><br><span class="line"><span class="annotation">@RequestMapping</span>(value=<span class="string">"/users"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRestController</span> </span>&#123;</span><br><span class="line">    <span class="annotation">@RequestMapping</span>(value=<span class="string">"/&#123;user&#125;"</span>, method=RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(@PathVariable Long user)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="annotation">@RequestMapping</span>(value=<span class="string">"/&#123;user&#125;/customers"</span>, method=RequestMethod.GET)</span><br><span class="line">    <span class="function">List&lt;Customer&gt; <span class="title">getUserCustomers</span><span class="params">(@PathVariable Long user)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="annotation">@RequestMapping</span>(value=<span class="string">"/&#123;user&#125;"</span>, method=RequestMethod.DELETE)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">deleteUser</span><span class="params">(@PathVariable Long user)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Spring-MVC自动配置"><a href="#Spring-MVC自动配置" class="headerlink" title="Spring MVC自动配置"></a>Spring MVC自动配置</h2><p>Spring Boot为Spring MVC提供适用于多数应用的自动配置功能。在Spring默认基础上，自动配置添加了以下特性：</p>
<ol>
<li>引入ContentNegotiatingViewResolver和BeanNameViewResolver beans。</li>
<li>对静态资源的支持，包括对WebJars的支持。</li>
<li>自动注册Converter，GenericConverter，Formatter beans。</li>
<li>对HttpMessageConverters的支持。</li>
<li>自动注册MessageCodeResolver。</li>
<li>对静态index.html的支持。</li>
<li>对自定义Favicon的支持。</li>
</ol>
<p>如果想全面控制Spring MVC，你可以添加自己的@Configuration，并使用@EnableWebMvc对其注解。如果想保留Spring Boot MVC的特性，并只是添加其他的MVC配置(拦截器，formatters，视图控制器等)，你可以添加自己的WebMvcConfigurerAdapter类型的@Bean（不使用@EnableWebMvc注解）,具体拦截器等配置后续文章会解析。</p>
<h2 id="静态文件"><a href="#静态文件" class="headerlink" title="静态文件"></a>静态文件</h2><p>默认情况下，Spring Boot从classpath下一个叫/static（/public，/resources或/META-INF/resources）的文件夹或从ServletContext根目录提供静态内容。这使用了Spring MVC的ResourceHttpRequestHandler，所以你可以通过添加自己的WebMvcConfigurerAdapter并覆写addResourceHandlers方法来改变这个行为（加载静态文件）。</p>
<p>在一个单独的web应用中，容器默认的servlet是开启的，如果Spring决定不处理某些请求，默认的servlet作为一个回退（降级）将从ServletContext根目录加载内容。大多数时候，这不会发生（除非你修改默认的MVC配置），因为Spring总能够通过DispatcherServlet处理请求。</p>
<p>此外，上述标准的静态资源位置有个例外情况是<a href="http://www.webjars.org/" target="_blank" rel="external">Webjars内容</a>。任何在/webjars/**路径下的资源都将从jar文件中提供，只要它们以Webjars的格式打包。</p>
<p><strong>注</strong>：如果你的应用将被打包成jar，那就不要使用src/main/webapp文件夹。尽管该文件夹是一个共同的标准，但它仅在打包成war的情况下起作用，并且如果产生一个jar，多数构建工具都会静悄悄的忽略它</p>
<h2 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h2><p>Spring Boot支持多种模版引擎包括：</p>
<ul>
<li>FreeMarker</li>
<li>Groovy</li>
<li>Thymeleaf(官方推荐)</li>
<li>Mustache</li>
</ul>
<p>JSP技术Spring Boot官方是不推荐的，原因有三：</p>
<ol>
<li>tomcat只支持war的打包方式，不支持可执行的jar。</li>
<li>Jetty 嵌套的容器不支持jsp</li>
<li>Undertow</li>
<li>创建自定义error.jsp页面不会覆盖错误处理的默认视图，而应该使用自定义错误页面</li>
</ol>
<p>当你使用上述模板引擎中的任何一个，它们默认的模板配置路径为：<code>src/main/resources/templates</code>。当然也可以修改这个路径，具体如何修改，可在后续各模板引擎的配置属性中查询并修改。</p>
<h2 id="Thymeleaf模板引擎"><a href="#Thymeleaf模板引擎" class="headerlink" title="Thymeleaf模板引擎"></a>Thymeleaf模板引擎</h2><p>Thymeleaf是一款用于渲染XML/XHTML/HTML5内容的模板引擎。类似JSP，Velocity，FreeMaker等，它也可以轻易的与Spring MVC等Web框架进行集成作为Web应用的模板引擎。与其它模板引擎相比，Thymeleaf最大的特点是能够直接在浏览器中打开并正确显示模板页面，而不需要启动整个Web应用。它的功能特性如下：</p>
<ul>
<li>Spring MVC中@Controller中的方法可以直接返回模板名称，接下来Thymeleaf模板引擎会自动进行渲染</li>
<li>模板中的表达式支持Spring表达式语言（Spring EL)</li>
<li>表单支持，并兼容Spring MVC的数据绑定与验证机制</li>
<li>国际化支持</li>
</ul>
<p>Spring官方也推荐使用Thymeleaf,所以本篇代码整合就使用Thymeleaf来整合。</p>
<h2 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/springboot4-2.jpg" alt=""><br>如图所示，spring-boot-starter-thymeleaf会自动包含spring-boot-starter-web，所以我们就不需要单独引入web依赖了。</p>
<h2 id="编写controller"><a href="#编写controller" class="headerlink" title="编写controller"></a>编写controller</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Controller</span></span><br><span class="line"><span class="annotation">@RequestMapping</span>(<span class="string">"/learn"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LearnResourceController</span> </span>&#123;</span><br><span class="line">    <span class="annotation">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;LearnResouce&gt; learnList =<span class="keyword">new</span> ArrayList&lt;LearnResouce&gt;();</span><br><span class="line">        LearnResouce bean =<span class="keyword">new</span> LearnResouce(<span class="string">"官方参考文档"</span>,<span class="string">"Spring Boot Reference Guide"</span>,<span class="string">"http://docs.spring.io/spring-boot/docs/1.5.1.RELEASE/reference/htmlsingle/#getting-started-first-application"</span>);</span><br><span class="line">        learnList.add(bean);</span><br><span class="line">        bean =<span class="keyword">new</span> LearnResouce(<span class="string">"官方SpriongBoot例子"</span>,<span class="string">"官方SpriongBoot例子"</span>,<span class="string">"https://github.com/spring-projects/spring-boot/tree/master/spring-boot-samples"</span>);</span><br><span class="line">        learnList.add(bean);</span><br><span class="line">        bean =<span class="keyword">new</span> LearnResouce(<span class="string">"龙国学院"</span>,<span class="string">"Spring Boot 教程系列学习"</span>,<span class="string">"http://www.roncoo.com/article/detail/125488"</span>);</span><br><span class="line">        learnList.add(bean);</span><br><span class="line">        bean =<span class="keyword">new</span> LearnResouce(<span class="string">"嘟嘟MD独立博客"</span>,<span class="string">"Spring Boot干货系列 "</span>,<span class="string">"http://tengj.top/"</span>);</span><br><span class="line">        learnList.add(bean);</span><br><span class="line">        bean =<span class="keyword">new</span> LearnResouce(<span class="string">"后端编程嘟"</span>,<span class="string">"Spring Boot教程和视频 "</span>,<span class="string">"http://www.toutiao.com/m1559096720023553/"</span>);</span><br><span class="line">        learnList.add(bean);</span><br><span class="line">        bean =<span class="keyword">new</span> LearnResouce(<span class="string">"程序猿DD"</span>,<span class="string">"Spring Boot系列"</span>,<span class="string">"http://www.roncoo.com/article/detail/125488"</span>);</span><br><span class="line">        learnList.add(bean);</span><br><span class="line">        bean =<span class="keyword">new</span> LearnResouce(<span class="string">"纯洁的微笑"</span>,<span class="string">"Sping Boot系列文章"</span>,<span class="string">"http://www.ityouknow.com/spring-boot"</span>);</span><br><span class="line">        learnList.add(bean);</span><br><span class="line">        bean =<span class="keyword">new</span> LearnResouce(<span class="string">"CSDN——小当博客专栏"</span>,<span class="string">"Sping Boot学习"</span>,<span class="string">"http://blog.csdn.net/column/details/spring-boot.html"</span>);</span><br><span class="line">        learnList.add(bean);</span><br><span class="line">        bean =<span class="keyword">new</span> LearnResouce(<span class="string">"梁桂钊的博客"</span>,<span class="string">"Spring Boot 揭秘与实战"</span>,<span class="string">"http://blog.csdn.net/column/details/spring-boot.html"</span>);</span><br><span class="line">        learnList.add(bean);</span><br><span class="line">        bean =<span class="keyword">new</span> LearnResouce(<span class="string">"林祥纤博客系列"</span>,<span class="string">"从零开始学Spring Boot "</span>,<span class="string">"http://412887952-qq-com.iteye.com/category/356333"</span>);</span><br><span class="line">        learnList.add(bean);</span><br><span class="line">        ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView(<span class="string">"/index"</span>);</span><br><span class="line">        modelAndView.addObject(<span class="string">"learnList"</span>, learnList);</span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="编写html"><a href="#编写html" class="headerlink" title="编写html"></a>编写html</h2><p>引入依赖后就在默认的模板路径<code>src/main/resources/templates</code>下编写模板文件即可完成。这里我们新建一个index.html:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span> <span class="attribute">xmlns:th</span>=<span class="value">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">title</span>&gt;</span>learn Resources<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">http-equiv</span>=<span class="value">"Content-Type"</span> <span class="attribute">content</span>=<span class="value">"text/html; charset=UTF-8"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">style</span>=<span class="value">"text-align: center;margin:0 auto;width: 1000px; "</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">h1</span>&gt;</span>学习资源大奉送，爱我就关注嘟嘟公众号：嘟爷java超神学堂（javaLearn）<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">table</span> <span class="attribute">width</span>=<span class="value">"100%"</span> <span class="attribute">border</span>=<span class="value">"1"</span> <span class="attribute">cellspacing</span>=<span class="value">"1"</span> <span class="attribute">cellpadding</span>=<span class="value">"0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">td</span>&gt;</span>作者<span class="tag">&lt;/<span class="title">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">td</span>&gt;</span>教程名称<span class="tag">&lt;/<span class="title">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">td</span>&gt;</span>地址<span class="tag">&lt;/<span class="title">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">tr</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--/*@thymesVar id="learnList" type=""*/--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">tr</span> <span class="attribute">th:each</span>=<span class="value">"learn : $&#123;learnList&#125;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">td</span> <span class="attribute">th:text</span>=<span class="value">"$&#123;learn.author&#125;"</span>&gt;</span>嘟嘟MD<span class="tag">&lt;/<span class="title">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">td</span> <span class="attribute">th:text</span>=<span class="value">"$&#123;learn.title&#125;"</span>&gt;</span>SPringBoot干货系列<span class="tag">&lt;/<span class="title">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">td</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">th:href</span>=<span class="value">"$&#123;learn.url&#125;"</span> <span class="attribute">target</span>=<span class="value">"_blank"</span>&gt;</span>点我<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>注：通过xmlns:th=”<a href="http://www.thymeleaf.org" target="_blank" rel="external">http://www.thymeleaf.org</a>“ 命令空间，将静态页面转换为动态的视图，需要进行动态处理的元素将使用“th:”前缀。</p>
</blockquote>
<p>ok,代码都写好了，让我们看对比下直接打开index.html和启动工程后访问<a href="http://localhost:8080/learn" target="_blank" rel="external">http://localhost:8080/learn</a> 看到的效果，Thymeleaf做到了不破坏HTML自身内容的数据逻辑分离。<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/springboot4-3.jpg" alt=""></p>
<h2 id="Thymeleaf的默认参数配置"><a href="#Thymeleaf的默认参数配置" class="headerlink" title="Thymeleaf的默认参数配置"></a>Thymeleaf的默认参数配置</h2><p>在application.properties中可以配置thymeleaf模板解析器属性<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"># THYMELEAF (ThymeleafAutoConfiguration)</span><br><span class="line">#开启模板缓存（默认值：true）</span><br><span class="line">spring.thymeleaf.cache=true </span><br><span class="line">#Check that the template exists before rendering it.</span><br><span class="line">spring.thymeleaf.check-template=true </span><br><span class="line">#检查模板位置是否正确（默认值:true）</span><br><span class="line">spring.thymeleaf.check-template-location=true</span><br><span class="line">#Content-Type的值（默认值：text/html）</span><br><span class="line">spring.thymeleaf.content-type=text/html</span><br><span class="line">#开启MVC Thymeleaf视图解析（默认值：true）</span><br><span class="line">spring.thymeleaf.enabled=true</span><br><span class="line">#模板编码</span><br><span class="line">spring.thymeleaf.encoding=UTF-8</span><br><span class="line">#要被排除在解析之外的视图名称列表，用逗号分隔</span><br><span class="line">spring.thymeleaf.excluded-view-names=</span><br><span class="line">#要运用于模板之上的模板模式。另见StandardTemplate-ModeHandlers(默认值：HTML5)</span><br><span class="line">spring.thymeleaf.mode=HTML5</span><br><span class="line">#在构建URL时添加到视图名称前的前缀（默认值：classpath:/templates/）</span><br><span class="line">spring.thymeleaf.prefix=classpath:/templates/</span><br><span class="line">#在构建URL时添加到视图名称后的后缀（默认值：.html）</span><br><span class="line">spring.thymeleaf.suffix=.html</span><br><span class="line">#Thymeleaf模板解析器在解析器链中的顺序。默认情况下，它排第一位。顺序从1开始，只有在定义了额外的TemplateResolver Bean时才需要设置这个属性。</span><br><span class="line">spring.thymeleaf.template-resolver-order=</span><br><span class="line">#可解析的视图名称列表，用逗号分隔</span><br><span class="line">spring.thymeleaf.view-names=</span><br></pre></td></tr></table></figure></p>
<h2 id="整合一个bootstrap框架给大家"><a href="#整合一个bootstrap框架给大家" class="headerlink" title="整合一个bootstrap框架给大家"></a>整合一个bootstrap框架给大家</h2><p><img src="http://7xqch5.com1.z0.glb.clouddn.com/springboot4-4.jpg" alt=""><br>大家可以直接打开vanilla-cream-css下面的index.html来查看静态效果，如下：<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/springboot4-5.jpg" alt=""></p>
<p>动态效果的话可以查看template.html<br>这里把上面的资源例子重新用bootstrap写了下，效果不错哦，如下：</p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/springboot4-6.png" alt=""></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本章到此就结束了，下一篇准备介绍下如何整合jsp,毕竟现在绝大多数的企业还是用jsp来作为模板引擎的。</p>
<h1 id="源码下载"><a href="#源码下载" class="headerlink" title="源码下载"></a>源码下载</h1><p>(￣︶￣)↗[<a href="https://github.com/tengj/SpringBootDemo/tree/master" target="_blank" rel="external">相关示例完整代码</a>]</p>
<p>博主有几本Spring Boot的中文电子书资料，有需要的可以关注博主微信公众号（嘟爷java超神学堂），自行前往下载【开发工具-&gt;java电子书籍】<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/springboot1-12.png" alt=""><br><img src="http://7xqch5.com1.z0.glb.clouddn.com/javaLearn.PNG" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Spring Boot干货系列 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring Boot干货系列：（三）启动原理解析]]></title>
      <url>http://tengj.top/2017/03/09/springboot3/</url>
      <content type="html"><![CDATA[<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/spring.jpg" alt=""></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前面几章我们见识了SpringBoot为我们做的自动配置，确实方便快捷，但是对于新手来说，如果不大懂SpringBoot内部启动原理，以后难免会吃亏。所以这次博主就跟你们一起一步步揭开SpringBoot的神秘面纱，让它不在神秘。</p>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>我们开发任何一个Spring Boot项目，都会用到如下的启动类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>从上面代码可以看出，Annotation定义（@SpringBootApplication）和类定义（SpringApplication.run）最为耀眼，所以要揭开SpringBoot的神秘面纱，我们要从这两位开始就可以了。</p>
<h2 id="SpringBootApplication背后的秘密"><a href="#SpringBootApplication背后的秘密" class="headerlink" title="SpringBootApplication背后的秘密"></a>SpringBootApplication背后的秘密</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="annotation">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="annotation">@Documented</span></span><br><span class="line"><span class="annotation">@Inherited</span></span><br><span class="line"><span class="annotation">@SpringBootConfiguration</span></span><br><span class="line"><span class="annotation">@EnableAutoConfiguration</span></span><br><span class="line"><span class="annotation">@ComponentScan</span>(excludeFilters = &#123;</span><br><span class="line">        <span class="annotation">@Filter</span>(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),</span><br><span class="line">        <span class="annotation">@Filter</span>(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) &#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="annotation">@interface</span> SpringBootApplication &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>虽然定义使用了多个Annotation进行了原信息标注，但实际上重要的只有三个Annotation：</p>
<ul>
<li>@Configuration（@SpringBootConfiguration点开查看发现里面还是应用了@Configuration）</li>
<li>@EnableAutoConfiguration</li>
<li>@ComponentScan</li>
</ul>
<p>所以，如果我们使用如下的SpringBoot启动类，整个SpringBoot应用依然可以与之前的启动类功能对等：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Configuration</span></span><br><span class="line"><span class="annotation">@EnableAutoConfiguration</span></span><br><span class="line"><span class="annotation">@ComponentScan</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>每次写这3个比较累，所以写一个@SpringBootApplication方便点。接下来分别介绍这3个Annotation。</p>
<h2 id="Configuration"><a href="#Configuration" class="headerlink" title="@Configuration"></a>@Configuration</h2><p>这里的@Configuration对我们来说不陌生，它就是JavaConfig形式的Spring Ioc容器的配置类使用的那个@Configuration，SpringBoot社区推荐使用基于JavaConfig的配置形式，所以，这里的启动类标注了@Configuration之后，本身其实也是一个IoC容器的配置类。<br>举几个简单例子回顾下，XML跟config配置方式的区别：</p>
<ul>
<li>表达形式层面<br>基于XML配置的方式是这样：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">beans</span> <span class="attribute">xmlns</span>=<span class="value">"http://www.springframework.org/schema/beans"</span></span><br><span class="line">       <span class="attribute">xmlns:xsi</span>=<span class="value">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">       <span class="attribute">xsi:schemaLocation</span>=<span class="value">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd"</span></span><br><span class="line">       <span class="attribute">default-lazy-init</span>=<span class="value">"true"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--bean定义--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>而基于JavaConfig的配置方式是这样：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MockConfiguration</span></span>&#123;</span><br><span class="line">    <span class="comment">//bean定义</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>任何一个标注了@Configuration的Java类定义都是一个JavaConfig配置类。</p>
<ul>
<li>注册bean定义层面<br>基于XML的配置形式是这样：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"mockService"</span> <span class="attribute">class</span>=<span class="value">"..MockServiceImpl"</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="title">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>而基于JavaConfig的配置形式是这样的：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MockConfiguration</span></span>&#123;</span><br><span class="line">    <span class="annotation">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MockService <span class="title">mockService</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MockServiceImpl();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>任何一个标注了@Bean的方法，其返回值将作为一个bean定义注册到Spring的IoC容器，方法名将默认成该bean定义的id。</p>
<ul>
<li>表达依赖注入关系层面<br>为了表达bean与bean之间的依赖关系，在XML形式中一般是这样：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"mockService"</span> <span class="attribute">class</span>=<span class="value">"..MockServiceImpl"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">propery</span> <span class="attribute">name</span> =<span class="value">"dependencyService"</span> <span class="attribute">ref</span>=<span class="value">"dependencyService"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"dependencyService"</span> <span class="attribute">class</span>=<span class="value">"DependencyServiceImpl"</span>&gt;</span><span class="tag">&lt;/<span class="title">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>而基于JavaConfig的配置形式是这样的：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MockConfiguration</span></span>&#123;</span><br><span class="line">    <span class="annotation">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MockService <span class="title">mockService</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MockServiceImpl(dependencyService());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="annotation">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DependencyService <span class="title">dependencyService</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DependencyServiceImpl();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>如果一个bean的定义依赖其他bean,则直接调用对应的JavaConfig类中依赖bean的创建方法就可以了。</p>
<h2 id="ComponentScan"><a href="#ComponentScan" class="headerlink" title="@ComponentScan"></a>@ComponentScan</h2><p>@ComponentScan这个注解在Spring中很重要，它对应XML配置中的<context:component-scan>元素，@ComponentScan的功能其实就是自动扫描并加载符合条件的组件（比如@Component和@Repository等）或者bean定义，最终将这些bean定义加载到IoC容器中。</context:component-scan></p>
<p>我们可以通过basePackages等属性来细粒度的定制@ComponentScan自动扫描的范围，如果不指定，则默认Spring框架实现会从声明@ComponentScan所在类的package进行扫描。</p>
<blockquote>
<p>注：所以SpringBoot的启动类最好是放在root package下，因为默认不指定basePackages。</p>
</blockquote>
<h2 id="EnableAutoConfiguration"><a href="#EnableAutoConfiguration" class="headerlink" title="@EnableAutoConfiguration"></a>@EnableAutoConfiguration</h2><p>个人感觉@EnableAutoConfiguration这个Annotation最为重要，所以放在最后来解读，大家是否还记得Spring框架提供的各种名字为@Enable开头的Annotation定义？比如@EnableScheduling、@EnableCaching、@EnableMBeanExport等，@EnableAutoConfiguration的理念和做事方式其实一脉相承，简单概括一下就是，<strong>借助@Import的支持，收集和注册特定场景相关的bean定义</strong>。</p>
<ul>
<li>@EnableScheduling是通过@Import将Spring调度框架相关的bean定义都加载到IoC容器。</li>
<li>@EnableMBeanExport是通过@Import将JMX相关的bean定义加载到IoC容器。</li>
</ul>
<p>而@EnableAutoConfiguration也是借助@Import的帮助，将所有符合自动配置条件的bean定义加载到IoC容器，仅此而已！</p>
<p>@EnableAutoConfiguration作为一个复合Annotation,其自身定义关键信息如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@SuppressWarnings</span>(<span class="string">"deprecation"</span>)</span><br><span class="line"><span class="annotation">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="annotation">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="annotation">@Documented</span></span><br><span class="line"><span class="annotation">@Inherited</span></span><br><span class="line"><span class="annotation">@AutoConfigurationPackage</span></span><br><span class="line"><span class="annotation">@Import</span>(EnableAutoConfigurationImportSelector.class)</span><br><span class="line"><span class="keyword">public</span> <span class="annotation">@interface</span> EnableAutoConfiguration &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>其中，最关键的要属@Import(EnableAutoConfigurationImportSelector.class)，借助EnableAutoConfigurationImportSelector，@EnableAutoConfiguration可以帮助SpringBoot应用将所有符合条件的@Configuration配置都加载到当前SpringBoot创建并使用的IoC容器。就像一只“八爪鱼”一样</p>
<p>借助于Spring框架原有的一个工具类：SpringFactoriesLoader的支持，@EnableAutoConfiguration可以智能的自动配置功效才得以大功告成！</p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/springboot3-1.png" alt=""></p>
<p><strong>自动配置幕后英雄：SpringFactoriesLoader详解</strong><br>SpringFactoriesLoader属于Spring框架私有的一种扩展方案，其主要功能就是从指定的配置文件META-INF/spring.factories加载配置。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringFactoriesLoader</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">loadFactories</span><span class="params">(Class&lt;T&gt; factoryClass, ClassLoader classLoader)</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">loadFactoryNames</span><span class="params">(Class&lt;?&gt; factoryClass, ClassLoader classLoader)</span> </span>&#123;</span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>配合@EnableAutoConfiguration使用的话，它更多是提供一种配置查找的功能支持，即根据@EnableAutoConfiguration的完整类名org.springframework.boot.autoconfigure.EnableAutoConfiguration作为查找的Key,获取对应的一组@Configuration类<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/springboot3-2.jpg" alt=""><br>上图就是从SpringBoot的autoconfigure依赖包中的META-INF/spring.factories配置文件中摘录的一段内容，可以很好地说明问题。</p>
<p>所以，@EnableAutoConfiguration自动配置的魔法骑士就变成了：<strong>从classpath中搜寻所有的META-INF/spring.factories配置文件，并将其中org.springframework.boot.autoconfigure.EnableutoConfiguration对应的配置项通过反射（Java Refletion）实例化为对应的标注了@Configuration的JavaConfig形式的IoC容器配置类，然后汇总为一个并加载到IoC容器。</strong></p>
<h2 id="深入探索SpringApplication执行流程"><a href="#深入探索SpringApplication执行流程" class="headerlink" title="深入探索SpringApplication执行流程"></a>深入探索SpringApplication执行流程</h2><p>SpringApplication的run方法的实现是我们本次旅程的主要线路，该方法的主要流程大体可以归纳如下：</p>
<p>1） 如果我们使用的是SpringApplication的静态run方法，那么，这个方法里面首先要创建一个SpringApplication对象实例，然后调用这个创建好的SpringApplication的实例方法。在SpringApplication实例初始化的时候，它会提前做几件事情：</p>
<ul>
<li>根据classpath里面是否存在某个特征类（org.springframework.web.context.ConfigurableWebApplicationContext）来决定是否应该创建一个为Web应用使用的ApplicationContext类型。</li>
<li>使用SpringFactoriesLoader在应用的classpath中查找并加载所有可用的ApplicationContextInitializer。</li>
<li>使用SpringFactoriesLoader在应用的classpath中查找并加载所有可用的ApplicationListener。</li>
<li>推断并设置main方法的定义类。</li>
</ul>
<p>2） SpringApplication实例初始化完成并且完成设置后，就开始执行run方法的逻辑了，方法执行伊始，首先遍历执行所有通过SpringFactoriesLoader可以查找到并加载的SpringApplicationRunListener。调用它们的started()方法，告诉这些SpringApplicationRunListener，“嘿，SpringBoot应用要开始执行咯！”。</p>
<p>3） 创建并配置当前Spring Boot应用将要使用的Environment（包括配置要使用的PropertySource以及Profile）。</p>
<p>4） 遍历调用所有SpringApplicationRunListener的environmentPrepared()的方法，告诉他们：“当前SpringBoot应用使用的Environment准备好了咯！”。</p>
<p>5） 如果SpringApplication的showBanner属性被设置为true，则打印banner。</p>
<p>6） 根据用户是否明确设置了applicationContextClass类型以及初始化阶段的推断结果，决定该为当前SpringBoot应用创建什么类型的ApplicationContext并创建完成，然后根据条件决定是否添加ShutdownHook，决定是否使用自定义的BeanNameGenerator，决定是否使用自定义的ResourceLoader，当然，最重要的，将之前准备好的Environment设置给创建好的ApplicationContext使用。</p>
<p>7） ApplicationContext创建好之后，SpringApplication会再次借助Spring-FactoriesLoader，查找并加载classpath中所有可用的ApplicationContext-Initializer，然后遍历调用这些ApplicationContextInitializer的initialize（applicationContext）方法来对已经创建好的ApplicationContext进行进一步的处理。</p>
<p>8） 遍历调用所有SpringApplicationRunListener的contextPrepared()方法。</p>
<p>9） 最核心的一步，将之前通过@EnableAutoConfiguration获取的所有配置以及其他形式的IoC容器配置加载到已经准备完毕的ApplicationContext。</p>
<p>10） 遍历调用所有SpringApplicationRunListener的contextLoaded()方法。</p>
<p>11） 调用ApplicationContext的refresh()方法，完成IoC容器可用的最后一道工序。</p>
<p>12） 查找当前ApplicationContext中是否注册有CommandLineRunner，如果有，则遍历执行它们。</p>
<p>13） 正常情况下，遍历执行SpringApplicationRunListener的finished()方法、（如果整个过程出现异常，则依然调用所有SpringApplicationRunListener的finished()方法，只不过这种情况下会将异常信息一并传入处理）<br>去除事件通知点后，整个流程如下：</p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/springboot3-3.jpg" alt=""></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>到此，SpringBoot的核心组件完成了基本的解析，综合来看，大部分都是Spring框架背后的一些概念和实践方式，SpringBoot只是在这些概念和实践上对特定的场景事先进行了固化和升华，而也恰恰是这些固化让我们开发基于Sping框架的应用更加方便高效。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>本章节大部分参考了《SpringBoot揭秘快速构建为服务体系》这本书的第三章，个人看过的几本书就感觉这本书介绍原理的章节最为透彻，本章也算这本书最精华的部分。所以我没忍住就分享出来给大家学习。当然主要是我也没有这本书的电子版，无法分享给大家了，深表遗憾(。・＿・。)ﾉ</p>
<hr>
<p>我手里有几本Spring Boot的中文电子书资料，有需要的可以关注博主微信公众号（嘟爷java超神学堂），自行前往下载【开发工具-&gt;java电子书籍】<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/springboot1-12.png" alt=""><br><a href="http://7xqch5.com1.z0.glb.clouddn.com/javaLearn.PNG" target="_blank" rel="external"><img src="http://7xqch5.com1.z0.glb.clouddn.com/javaLearn.PNG" alt=""></a></p>
]]></content>
      
        <categories>
            
            <category> Spring Boot干货系列 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring Boot干货系列：（二）配置文件解析]]></title>
      <url>http://tengj.top/2017/02/28/springboot2/</url>
      <content type="html"><![CDATA[<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/spring.jpg" alt=""></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>上一篇介绍了Spring Boot的入门，知道了Spring Boot使用“习惯优于配置”（项目中存在大量的配置，此外还内置了一个习惯性的配置，让你无需手动进行配置）的理念让你的项目快速运行起来。所以，我们要想把Spring Boot玩的溜，就要懂得如何开启各个功能模块的默认配置，这就需要了解Spring Boot的配置文件application.properties。</p>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>Spring Boot使用了一个全局的配置文件application.properties，放在src/main/resources目录下或者类路径的/config下。Sping Boot的全局配置文件的作用是对一些默认配置的配置值进行修改。</p>
<p>接下来，让我们一起来解开配置文件的面纱。</p>
<blockquote>
<p>注:如果你工程没有这个application.properties，那就在src/main/java/resources目录下新建一个。</p>
</blockquote>
<h2 id="自定义属性"><a href="#自定义属性" class="headerlink" title="自定义属性"></a>自定义属性</h2><p>application.properties提供自定义属性的支持，这样我们就可以把一些常量配置在这里：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">com.dudu.name=&#34;&#22047;&#22047;MD&#34;&#10;com.dudu.want=&#34;&#31069;&#22823;&#23478;&#40481;&#24180;&#22823;&#21513;&#21543;&#34;</span><br></pre></td></tr></table></figure></p>
<p>然后直接在要使用的地方通过注解@Value(value=”${config.name}”)就可以绑定到你想要的属性上面<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Value</span>(<span class="string">"$&#123;com.dudu.name&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span>  String name;</span><br><span class="line">    <span class="annotation">@Value</span>(<span class="string">"$&#123;com.dudu.want&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span>  String want;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hexo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name+<span class="string">","</span>+want;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>我们启动工程输入<a href="http://localhost:8080" target="_blank" rel="external">http://localhost:8080</a> 就可以看到打印了”嘟嘟MD祝大家鸡年大吉吧”。</p>
<p>有时候属性太多了，一个个绑定到属性字段上太累，官方提倡绑定一个对象的bean，这里我们建一个ConfigBean.java类，顶部需要使用注解@ConfigurationProperties(prefix = “com.dudu”)来指明使用哪个</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@ConfigurationProperties</span>(prefix = <span class="string">"com.dudu"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigBean</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String want;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略getter和setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里配置完还需要在spring Boot入口类加上@EnableConfigurationProperties并指明要加载哪个bean，如果不写ConfigBean.class，在bean类那边添加</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@SpringBootApplication</span></span><br><span class="line"><span class="annotation">@EnableConfigurationProperties</span>(&#123;ConfigBean.class&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Chapter2Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Chapter2Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后在Controller中引入ConfigBean使用即可，如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="annotation">@Autowired</span></span><br><span class="line">    ConfigBean configBean;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hexo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> configBean.getName()+configBean.getWant();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="参数间引用"><a href="#参数间引用" class="headerlink" title="参数间引用"></a>参数间引用</h2><p>在application.properties中的各个参数之间也可以直接引用来使用，就像下面的设置：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">com.dudu.name="嘟嘟MD"</span><br><span class="line">com.dudu.want="祝大家鸡年大吉吧"</span><br><span class="line">com.dudu.yearhope=$&#123;com.dudu.name&#125;在此$&#123;com.dudu.want&#125;</span><br></pre></td></tr></table></figure>
<p>这样我们就可以只是用yearhope这个属性就好</p>
<h2 id="使用自定义配置文件"><a href="#使用自定义配置文件" class="headerlink" title="使用自定义配置文件"></a>使用自定义配置文件</h2><p>有时候我们不希望把所有配置都放在application.properties里面，这时候我们可以另外定义一个，这里我明取名为test.properties,路径跟也放在src/main/resources下面。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">com.md.name="哟西~"</span><br><span class="line">com.md.want="祝大家鸡年,大吉吧"</span><br></pre></td></tr></table></figure>
<p>我们新建一个bean类,如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Configuration</span></span><br><span class="line"><span class="annotation">@ConfigurationProperties</span>(prefix = <span class="string">"com.md"</span>) </span><br><span class="line"><span class="annotation">@PropertySource</span>(<span class="string">"classpath:test.properties"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigTestBean</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String want;</span><br><span class="line">    <span class="comment">// 省略getter和setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里要注意哦，有一个问题，如果你使用的是1.5以前的版本，那么可以通过locations指定properties文件的位置，这样：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@ConfigurationProperties(prefix = "config2",locations="classpath:test.properties")</span><br></pre></td></tr></table></figure>
<p>但是1.5版本后就没有这个属性了，找了半天发现添加@Configuration和@PropertySource(“classpath:test.properties”)后才可以读取。</p>
<h2 id="随机值配置"><a href="#随机值配置" class="headerlink" title="随机值配置"></a>随机值配置</h2><p>配置文件中${random} 可以用来生成各种不同类型的随机值，从而简化了代码生成的麻烦，例如 生成 int 值、long 值或者 string 字符串。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dudu.secret=$&#123;random.value&#125;</span><br><span class="line">dudu.number=$&#123;random.int&#125;</span><br><span class="line">dudu.bignumber=$&#123;random.long&#125;</span><br><span class="line">dudu.uuid=$&#123;random.uuid&#125;</span><br><span class="line">dudu.number.less.than.ten=$&#123;random.int(10)&#125;</span><br><span class="line">dudu.number.in.range=$&#123;random.int[1024,65536]&#125;</span><br></pre></td></tr></table></figure>
<h2 id="外部配置-命令行参数配置"><a href="#外部配置-命令行参数配置" class="headerlink" title="外部配置-命令行参数配置"></a>外部配置-命令行参数配置</h2><p>Spring Boot是基于jar包运行的，打成jar包的程序可以直接通过下面命令运行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar xx.jar</span><br></pre></td></tr></table></figure></p>
<p>可以以下命令修改tomcat端口号：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar xx.jar --server.port=9090</span><br></pre></td></tr></table></figure></p>
<p>可以看出，命令行中连续的两个减号<code>--</code>就是对<code>application.properties</code>中的属性值进行赋值的标识。<br>所以<code>java -jar xx.jar --server.port=9090</code>等价于在<code>application.properties</code>中添加属性<code>server.port=9090</code>。<br>如果你怕命令行有风险，可以使用SpringApplication.setAddCommandLineProperties(false)禁用它。</p>
<p>实际上，Spring Boot应用程序有多种设置途径，Spring Boot能从多重属性源获得属性，包括如下几种：</p>
<ul>
<li>根目录下的开发工具全局设置属性(当开发工具激活时为<code>~/.spring-boot-devtools.properties</code>)。</li>
<li>测试中的@TestPropertySource注解。</li>
<li>测试中的@SpringBootTest#properties注解特性。</li>
<li>命令行参数</li>
<li><code>SPRING_APPLICATION_JSON</code>中的属性(环境变量或系统属性中的内联JSON嵌入)。</li>
<li><code>ServletConfig</code>初始化参数。</li>
<li><code>ServletContext</code>初始化参数。</li>
<li>java:comp/env里的JNDI属性</li>
<li>JVM系统属性</li>
<li>操作系统环境变量</li>
<li>随机生成的带random.* 前缀的属性（在设置其他属性时，可以应用他们，比如${random.long}）</li>
<li>应用程序以外的application.properties或者appliaction.yml文件</li>
<li>打包在应用程序内的application.properties或者appliaction.yml文件</li>
<li>通过@PropertySource标注的属性源</li>
<li>默认属性(通过<code>SpringApplication.setDefaultProperties</code>指定).</li>
</ul>
<p>这里列表按组优先级排序，也就是说，任何在高优先级属性源里设置的属性都会覆盖低优先级的相同属性，列如我们上面提到的命令行属性就覆盖了application.properties的属性。</p>
<h2 id="配置文件的优先级"><a href="#配置文件的优先级" class="headerlink" title="配置文件的优先级"></a>配置文件的优先级</h2><p>application.properties和application.yml文件可以放在一下四个位置：</p>
<ul>
<li>外置，在相对于应用程序运行目录的/congfig子目录里。</li>
<li>外置，在应用程序运行的目录里</li>
<li>内置，在config包内</li>
<li>内置，在Classpath根目录</li>
</ul>
<p>同样，这个列表按照优先级排序，也就是说，src/main/resources/config下application.properties覆盖src/main/resources下application.properties中相同的属性，如图：<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/springboot2-1.jpg" alt=""></p>
<p>此外，如果你在相同优先级位置同时有application.properties和application.yml，那么application.yml里面的属性就会覆盖application.properties里的属性。</p>
<h2 id="Profile-多环境配置"><a href="#Profile-多环境配置" class="headerlink" title="Profile-多环境配置"></a>Profile-多环境配置</h2><p>当应用程序需要部署到不同运行环境时，一些配置细节通常会有所不同，最简单的比如日志，生产日志会将日志级别设置为WARN或更高级别，并将日志写入日志文件，而开发的时候需要日志级别为DEBUG，日志输出到控制台即可。<br>如果按照以前的做法，就是每次发布的时候替换掉配置文件，这样太麻烦了，Spring Boot的Profile就给我们提供了解决方案，命令带上参数就搞定。</p>
<p>这里我们来模拟一下，只是简单的修改端口来测试<br>在Spring Boot中多环境配置文件名需要满足<code>application-{profile}.properties</code>的格式，其中<code>{profile}</code>对应你的环境标识，比如：</p>
<ul>
<li>application-dev.properties：开发环境</li>
<li>application-prod.properties：生产环境</li>
</ul>
<p>想要使用对应的环境，只需要在application.properties中使用spring.profiles.active属性来设置，值对应上面提到的{profile}，这里就是指dev、prod这2个。<br>当然你也可以用命令行启动的时候带上参数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar xxx.jar --spring.profiles.active=dev</span><br></pre></td></tr></table></figure></p>
<p>我给不同的环境添加不同的端口属性server.port，然后根据指定不同的spring.profiles.active来切换使用。各位可以自己试试。这里就不贴代码了。</p>
<p>除了可以用profile的配置文件来分区配置我们的环境变量，在代码里，我们还可以直接用@Profile注解来进行配置，例如数据库配置，这里我们先定义一个接口</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span>  <span class="class"><span class="keyword">interface</span> <span class="title">DBConnector</span> </span>&#123; <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span>  <span class="title">configure</span><span class="params">()</span></span>; &#125;</span><br></pre></td></tr></table></figure>
<p>分别定义俩个实现类来实现它</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line">  * 测试数据库</span><br><span class="line">  */</span></span><br><span class="line"><span class="annotation">@Component</span></span><br><span class="line"><span class="annotation">@Profile</span>(<span class="string">"testdb"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDBConnector</span> <span class="keyword">implements</span> <span class="title">DBConnector</span> </span>&#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"testdb"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 生产数据库</span><br><span class="line"> */</span></span><br><span class="line"><span class="annotation">@Component</span></span><br><span class="line"><span class="annotation">@Profile</span>(<span class="string">"devdb"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DevDBConnector</span> <span class="keyword">implements</span> <span class="title">DBConnector</span> </span>&#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"devdb"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过在配置文件激活具体使用哪个实现类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring.profiles.active=testdb</span><br></pre></td></tr></table></figure></p>
<p>然后就可以这么用了</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@RestController</span></span><br><span class="line"><span class="annotation">@RequestMapping</span>(<span class="string">"/task"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaskController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Autowired</span> DBConnector connector ;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@RequestMapping</span>(value = &#123;<span class="string">"/"</span>,<span class="string">""</span>&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hellTask</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        connector.configure(); <span class="comment">//最终打印testdb     </span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello task !! myage is "</span> + myage;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>除了spring.profiles.active来激活一个或者多个profile之外，还可以用spring.profiles.include来叠加profile<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring.profiles.active: testdb  &#10;spring.profiles.include: proddb,prodmq</span><br></pre></td></tr></table></figure></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这次对Spring Boot中application.properties配置文件做的整理总结希望对大家有所帮助，最后贴上Spring Boot中常用的配置属性，需要的时候可打开查找。</p>
<p>(￣︶￣)↗<a href="http://tengj.top/2017/02/28/springbootconfig/">Spring Boot干货系列：常用属性汇总</a></p>
<p>下篇我们来弄懂 Spring Boot干货系列：（三）启动原理解析,敬请期待</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://blog.didispace.com/springbootproperties/" target="_blank" rel="external">Spring Boot属性配置文件详解</a><br><a href="http://blog.csdn.net/yingxiake/article/details/51263679" target="_blank" rel="external">spring boot 使用profile来分区配置</a><br>Spring Boot实战<br>JavaEE开发的颠覆者Spring Boot实战</p>
<h1 id="源码下载"><a href="#源码下载" class="headerlink" title="源码下载"></a>源码下载</h1><p>(￣︶￣)↗[<a href="https://github.com/tengj/SpringBootDemo/tree/master" target="_blank" rel="external">相关示例完整代码</a>]</p>
<p>我手里有几本Spring Boot的中文电子书资料，有需要的可以关注博主微信公众号（嘟爷java超神学堂），自行前往下载【开发工具-&gt;java电子书籍】</p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/springboot1-12.png" alt=""></p>
<h2 id=""><a href="#" class="headerlink" title=""></a><a href="http://7xqch5.com1.z0.glb.clouddn.com/javaLearn.PNG" target="_blank" rel="external"><img src="http://7xqch5.com1.z0.glb.clouddn.com/javaLearn.PNG" alt=""></a></h2>]]></content>
      
        <categories>
            
            <category> Spring Boot干货系列 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring Boot干货系列：常用属性汇总]]></title>
      <url>http://tengj.top/2017/02/28/springbootconfig/</url>
      <content type="html"><![CDATA[<h1 id="附录A-常用应用程序属性"><a href="#附录A-常用应用程序属性" class="headerlink" title="附录A.常用应用程序属性"></a>附录A.常用应用程序属性</h1><blockquote>
<p>摘自：<a href="http://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html" target="_blank" rel="external">http://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html</a></p>
</blockquote>
<p>可以在application.properties/application.yml文件中或作为命令行开关指定各种属性。本节提供了常用的Spring Boot属性列表，以及对使用它们的底层类的引用。</p>
<blockquote>
<p>属性贡献可以来自您的类路径上的其他jar文件，因此您不应该考虑这是一个详尽的列表。定义您自己的属性也是完全合法的。<br>此示例文件仅作为指南。不要将整个内容复制/粘贴到您的应用程序中;而只是选择你需要的属性。</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br><span class="line">1003</span><br><span class="line">1004</span><br><span class="line">1005</span><br><span class="line">1006</span><br><span class="line">1007</span><br><span class="line">1008</span><br><span class="line">1009</span><br><span class="line">1010</span><br><span class="line">1011</span><br><span class="line">1012</span><br><span class="line">1013</span><br><span class="line">1014</span><br><span class="line">1015</span><br><span class="line">1016</span><br><span class="line">1017</span><br><span class="line">1018</span><br><span class="line">1019</span><br><span class="line">1020</span><br><span class="line">1021</span><br><span class="line">1022</span><br><span class="line">1023</span><br><span class="line">1024</span><br><span class="line">1025</span><br><span class="line">1026</span><br><span class="line">1027</span><br><span class="line">1028</span><br><span class="line">1029</span><br><span class="line">1030</span><br><span class="line">1031</span><br><span class="line">1032</span><br><span class="line">1033</span><br><span class="line">1034</span><br><span class="line">1035</span><br><span class="line">1036</span><br><span class="line">1037</span><br><span class="line">1038</span><br><span class="line">1039</span><br><span class="line">1040</span><br><span class="line">1041</span><br><span class="line">1042</span><br><span class="line">1043</span><br><span class="line">1044</span><br><span class="line">1045</span><br><span class="line">1046</span><br><span class="line">1047</span><br><span class="line">1048</span><br><span class="line">1049</span><br><span class="line">1050</span><br><span class="line">1051</span><br><span class="line">1052</span><br><span class="line">1053</span><br><span class="line">1054</span><br><span class="line">1055</span><br><span class="line">1056</span><br><span class="line">1057</span><br><span class="line">1058</span><br><span class="line">1059</span><br><span class="line">1060</span><br><span class="line">1061</span><br><span class="line">1062</span><br><span class="line">1063</span><br><span class="line">1064</span><br><span class="line">1065</span><br><span class="line">1066</span><br><span class="line">1067</span><br><span class="line">1068</span><br><span class="line">1069</span><br><span class="line">1070</span><br><span class="line">1071</span><br><span class="line">1072</span><br><span class="line">1073</span><br><span class="line">1074</span><br><span class="line">1075</span><br><span class="line">1076</span><br><span class="line">1077</span><br><span class="line">1078</span><br><span class="line">1079</span><br><span class="line">1080</span><br><span class="line">1081</span><br><span class="line">1082</span><br><span class="line">1083</span><br><span class="line">1084</span><br><span class="line">1085</span><br><span class="line">1086</span><br><span class="line">1087</span><br><span class="line">1088</span><br><span class="line">1089</span><br><span class="line">1090</span><br><span class="line">1091</span><br><span class="line">1092</span><br><span class="line">1093</span><br><span class="line">1094</span><br><span class="line">1095</span><br><span class="line">1096</span><br><span class="line">1097</span><br><span class="line">1098</span><br><span class="line">1099</span><br><span class="line">1100</span><br><span class="line">1101</span><br><span class="line">1102</span><br><span class="line">1103</span><br><span class="line">1104</span><br><span class="line">1105</span><br><span class="line">1106</span><br><span class="line">1107</span><br><span class="line">1108</span><br><span class="line">1109</span><br><span class="line">1110</span><br><span class="line">1111</span><br><span class="line">1112</span><br><span class="line">1113</span><br><span class="line">1114</span><br><span class="line">1115</span><br><span class="line">1116</span><br><span class="line">1117</span><br><span class="line">1118</span><br><span class="line">1119</span><br><span class="line">1120</span><br><span class="line">1121</span><br><span class="line">1122</span><br><span class="line">1123</span><br><span class="line">1124</span><br><span class="line">1125</span><br><span class="line">1126</span><br><span class="line">1127</span><br><span class="line">1128</span><br><span class="line">1129</span><br><span class="line">1130</span><br><span class="line">1131</span><br><span class="line">1132</span><br><span class="line">1133</span><br><span class="line">1134</span><br><span class="line">1135</span><br><span class="line">1136</span><br><span class="line">1137</span><br><span class="line">1138</span><br><span class="line">1139</span><br><span class="line">1140</span><br><span class="line">1141</span><br><span class="line">1142</span><br><span class="line">1143</span><br><span class="line">1144</span><br><span class="line">1145</span><br><span class="line">1146</span><br><span class="line">1147</span><br><span class="line">1148</span><br><span class="line">1149</span><br><span class="line">1150</span><br><span class="line">1151</span><br><span class="line">1152</span><br><span class="line">1153</span><br><span class="line">1154</span><br><span class="line">1155</span><br><span class="line">1156</span><br><span class="line">1157</span><br><span class="line">1158</span><br><span class="line">1159</span><br><span class="line">1160</span><br><span class="line">1161</span><br><span class="line">1162</span><br><span class="line">1163</span><br><span class="line">1164</span><br><span class="line">1165</span><br><span class="line">1166</span><br><span class="line">1167</span><br><span class="line">1168</span><br><span class="line">1169</span><br><span class="line">1170</span><br><span class="line">1171</span><br><span class="line">1172</span><br><span class="line">1173</span><br><span class="line">1174</span><br><span class="line">1175</span><br><span class="line">1176</span><br><span class="line">1177</span><br><span class="line">1178</span><br><span class="line">1179</span><br><span class="line">1180</span><br><span class="line">1181</span><br><span class="line">1182</span><br><span class="line">1183</span><br><span class="line">1184</span><br></pre></td><td class="code"><pre><span class="line"># ===================================================================</span><br><span class="line"># COMMON SPRING BOOT PROPERTIES</span><br><span class="line">#</span><br><span class="line"># This sample file is provided as a guideline. Do NOT copy it in its</span><br><span class="line"># entirety to your own application.               ^^^</span><br><span class="line"># ===================================================================</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># ----------------------------------------</span><br><span class="line"># CORE PROPERTIES</span><br><span class="line"># ----------------------------------------</span><br><span class="line"></span><br><span class="line"># BANNER</span><br><span class="line">banner.charset=UTF-8 # Banner file encoding.</span><br><span class="line">banner.location=classpath:banner.txt # Banner file location.</span><br><span class="line">banner.image.location=classpath:banner.gif # Banner image file location (jpg/png can also be used).</span><br><span class="line">banner.image.width= # Width of the banner image in chars (default 76)</span><br><span class="line">banner.image.height= # Height of the banner image in chars (default based on image height)</span><br><span class="line">banner.image.margin= # Left hand image margin in chars (default 2)</span><br><span class="line">banner.image.invert= # If images should be inverted for dark terminal themes (default false)</span><br><span class="line"></span><br><span class="line"># LOGGING</span><br><span class="line">logging.config= # Location of the logging configuration file. For instance `classpath:logback.xml` for Logback</span><br><span class="line">logging.exception-conversion-word=%wEx # Conversion word used when logging exceptions.</span><br><span class="line">logging.file= # Log file name. For instance `myapp.log`</span><br><span class="line">logging.level.*= # Log levels severity mapping. For instance `logging.level.org.springframework=DEBUG`</span><br><span class="line">logging.path= # Location of the log file. For instance `/var/log`</span><br><span class="line">logging.pattern.console= # Appender pattern for output to the console. Only supported with the default logback setup.</span><br><span class="line">logging.pattern.file= # Appender pattern for output to the file. Only supported with the default logback setup.</span><br><span class="line">logging.pattern.level= # Appender pattern for log level (default %5p). Only supported with the default logback setup.</span><br><span class="line">logging.register-shutdown-hook=false # Register a shutdown hook for the logging system when it is initialized.</span><br><span class="line"></span><br><span class="line"># AOP</span><br><span class="line">spring.aop.auto=true # Add @EnableAspectJAutoProxy.</span><br><span class="line">spring.aop.proxy-target-class=false # Whether subclass-based (CGLIB) proxies are to be created (true) as opposed to standard Java interface-based proxies (false).</span><br><span class="line"></span><br><span class="line"># IDENTITY (ContextIdApplicationContextInitializer)</span><br><span class="line">spring.application.index= # Application index.</span><br><span class="line">spring.application.name= # Application name.</span><br><span class="line"></span><br><span class="line"># ADMIN (SpringApplicationAdminJmxAutoConfiguration)</span><br><span class="line">spring.application.admin.enabled=false # Enable admin features for the application.</span><br><span class="line">spring.application.admin.jmx-name=org.springframework.boot:type=Admin,name=SpringApplication # JMX name of the application admin MBean.</span><br><span class="line"></span><br><span class="line"># AUTO-CONFIGURATION</span><br><span class="line">spring.autoconfigure.exclude= # Auto-configuration classes to exclude.</span><br><span class="line"></span><br><span class="line"># SPRING CORE</span><br><span class="line">spring.beaninfo.ignore=true # Skip search of BeanInfo classes.</span><br><span class="line"></span><br><span class="line"># SPRING CACHE (CacheProperties)</span><br><span class="line">spring.cache.cache-names= # Comma-separated list of cache names to create if supported by the underlying cache manager.</span><br><span class="line">spring.cache.caffeine.spec= # The spec to use to create caches. Check CaffeineSpec for more details on the spec format.</span><br><span class="line">spring.cache.couchbase.expiration=0 # Entry expiration in milliseconds. By default the entries never expire.</span><br><span class="line">spring.cache.ehcache.config= # The location of the configuration file to use to initialize EhCache.</span><br><span class="line">spring.cache.guava.spec= # The spec to use to create caches. Check CacheBuilderSpec for more details on the spec format.</span><br><span class="line">spring.cache.hazelcast.config= # The location of the configuration file to use to initialize Hazelcast.</span><br><span class="line">spring.cache.infinispan.config= # The location of the configuration file to use to initialize Infinispan.</span><br><span class="line">spring.cache.jcache.config= # The location of the configuration file to use to initialize the cache manager.</span><br><span class="line">spring.cache.jcache.provider= # Fully qualified name of the CachingProvider implementation to use to retrieve the JSR-107 compliant cache manager. Only needed if more than one JSR-107 implementation is available on the classpath.</span><br><span class="line">spring.cache.type= # Cache type, auto-detected according to the environment by default.</span><br><span class="line"></span><br><span class="line"># SPRING CONFIG - using environment property only (ConfigFileApplicationListener)</span><br><span class="line">spring.config.location= # Config file locations.</span><br><span class="line">spring.config.name=application # Config file name.</span><br><span class="line"></span><br><span class="line"># HAZELCAST (HazelcastProperties)</span><br><span class="line">spring.hazelcast.config= # The location of the configuration file to use to initialize Hazelcast.</span><br><span class="line"></span><br><span class="line"># PROJECT INFORMATION (ProjectInfoProperties)</span><br><span class="line">spring.info.build.location=classpath:META-INF/build-info.properties # Location of the generated build-info.properties file.</span><br><span class="line">spring.info.git.location=classpath:git.properties # Location of the generated git.properties file.</span><br><span class="line"></span><br><span class="line"># JMX</span><br><span class="line">spring.jmx.default-domain= # JMX domain name.</span><br><span class="line">spring.jmx.enabled=true # Expose management beans to the JMX domain.</span><br><span class="line">spring.jmx.server=mbeanServer # MBeanServer bean name.</span><br><span class="line"></span><br><span class="line"># Email (MailProperties)</span><br><span class="line">spring.mail.default-encoding=UTF-8 # Default MimeMessage encoding.</span><br><span class="line">spring.mail.host= # SMTP server host. For instance `smtp.example.com`</span><br><span class="line">spring.mail.jndi-name= # Session JNDI name. When set, takes precedence to others mail settings.</span><br><span class="line">spring.mail.password= # Login password of the SMTP server.</span><br><span class="line">spring.mail.port= # SMTP server port.</span><br><span class="line">spring.mail.properties.*= # Additional JavaMail session properties.</span><br><span class="line">spring.mail.protocol=smtp # Protocol used by the SMTP server.</span><br><span class="line">spring.mail.test-connection=false # Test that the mail server is available on startup.</span><br><span class="line">spring.mail.username= # Login user of the SMTP server.</span><br><span class="line"></span><br><span class="line"># APPLICATION SETTINGS (SpringApplication)</span><br><span class="line">spring.main.banner-mode=console # Mode used to display the banner when the application runs.</span><br><span class="line">spring.main.sources= # Sources (class name, package name or XML resource location) to include in the ApplicationContext.</span><br><span class="line">spring.main.web-environment= # Run the application in a web environment (auto-detected by default).</span><br><span class="line"></span><br><span class="line"># FILE ENCODING (FileEncodingApplicationListener)</span><br><span class="line">spring.mandatory-file-encoding= # Expected character encoding the application must use.</span><br><span class="line"></span><br><span class="line"># INTERNATIONALIZATION (MessageSourceAutoConfiguration)</span><br><span class="line">spring.messages.always-use-message-format=false # Set whether to always apply the MessageFormat rules, parsing even messages without arguments.</span><br><span class="line">spring.messages.basename=messages # Comma-separated list of basenames, each following the ResourceBundle convention.</span><br><span class="line">spring.messages.cache-seconds=-1 # Loaded resource bundle files cache expiration, in seconds. When set to -1, bundles are cached forever.</span><br><span class="line">spring.messages.encoding=UTF-8 # Message bundles encoding.</span><br><span class="line">spring.messages.fallback-to-system-locale=true # Set whether to fall back to the system Locale if no files for a specific Locale have been found.</span><br><span class="line"></span><br><span class="line"># OUTPUT</span><br><span class="line">spring.output.ansi.enabled=detect # Configure the ANSI output.</span><br><span class="line"></span><br><span class="line"># PID FILE (ApplicationPidFileWriter)</span><br><span class="line">spring.pid.fail-on-write-error= # Fail if ApplicationPidFileWriter is used but it cannot write the PID file.</span><br><span class="line">spring.pid.file= # Location of the PID file to write (if ApplicationPidFileWriter is used).</span><br><span class="line"></span><br><span class="line"># PROFILES</span><br><span class="line">spring.profiles.active= # Comma-separated list (or list if using YAML) of active profiles.</span><br><span class="line">spring.profiles.include= # Unconditionally activate the specified comma separated profiles (or list of profiles if using YAML).</span><br><span class="line"></span><br><span class="line"># SENDGRID (SendGridAutoConfiguration)</span><br><span class="line">spring.sendgrid.api-key= # SendGrid api key (alternative to username/password)</span><br><span class="line">spring.sendgrid.username= # SendGrid account username</span><br><span class="line">spring.sendgrid.password= # SendGrid account password</span><br><span class="line">spring.sendgrid.proxy.host= # SendGrid proxy host</span><br><span class="line">spring.sendgrid.proxy.port= # SendGrid proxy port</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># ----------------------------------------</span><br><span class="line"># WEB PROPERTIES</span><br><span class="line"># ----------------------------------------</span><br><span class="line"></span><br><span class="line"># EMBEDDED SERVER CONFIGURATION (ServerProperties)</span><br><span class="line">server.address= # Network address to which the server should bind to.</span><br><span class="line">server.compression.enabled=false # If response compression is enabled.</span><br><span class="line">server.compression.excluded-user-agents= # List of user-agents to exclude from compression.</span><br><span class="line">server.compression.mime-types= # Comma-separated list of MIME types that should be compressed. For instance `text/html,text/css,application/json`</span><br><span class="line">server.compression.min-response-size= # Minimum response size that is required for compression to be performed. For instance 2048</span><br><span class="line">server.connection-timeout= # Time in milliseconds that connectors will wait for another HTTP request before closing the connection. When not set, the connector's container-specific default will be used. Use a value of -1 to indicate no (i.e. infinite) timeout.</span><br><span class="line">server.context-parameters.*= # Servlet context init parameters. For instance `server.context-parameters.a=alpha`</span><br><span class="line">server.context-path= # Context path of the application.</span><br><span class="line">server.display-name=application # Display name of the application.</span><br><span class="line">server.max-http-header-size=0 # Maximum size in bytes of the HTTP message header.</span><br><span class="line">server.error.include-stacktrace=never # When to include a "stacktrace" attribute.</span><br><span class="line">server.error.path=/error # Path of the error controller.</span><br><span class="line">server.error.whitelabel.enabled=true # Enable the default error page displayed in browsers in case of a server error.</span><br><span class="line">server.jetty.acceptors= # Number of acceptor threads to use.</span><br><span class="line">server.jetty.max-http-post-size=0 # Maximum size in bytes of the HTTP post or put content.</span><br><span class="line">server.jetty.selectors= # Number of selector threads to use.</span><br><span class="line">server.jsp-servlet.class-name=org.apache.jasper.servlet.JspServlet # The class name of the JSP servlet.</span><br><span class="line">server.jsp-servlet.init-parameters.*= # Init parameters used to configure the JSP servlet</span><br><span class="line">server.jsp-servlet.registered=true # Whether or not the JSP servlet is registered</span><br><span class="line">server.port=8080 # Server HTTP port.</span><br><span class="line">server.server-header= # Value to use for the Server response header (no header is sent if empty)</span><br><span class="line">server.servlet-path=/ # Path of the main dispatcher servlet.</span><br><span class="line">server.use-forward-headers= # If X-Forwarded-* headers should be applied to the HttpRequest.</span><br><span class="line">server.session.cookie.comment= # Comment for the session cookie.</span><br><span class="line">server.session.cookie.domain= # Domain for the session cookie.</span><br><span class="line">server.session.cookie.http-only= # "HttpOnly" flag for the session cookie.</span><br><span class="line">server.session.cookie.max-age= # Maximum age of the session cookie in seconds.</span><br><span class="line">server.session.cookie.name= # Session cookie name.</span><br><span class="line">server.session.cookie.path= # Path of the session cookie.</span><br><span class="line">server.session.cookie.secure= # "Secure" flag for the session cookie.</span><br><span class="line">server.session.persistent=false # Persist session data between restarts.</span><br><span class="line">server.session.store-dir= # Directory used to store session data.</span><br><span class="line">server.session.timeout= # Session timeout in seconds.</span><br><span class="line">server.session.tracking-modes= # Session tracking modes (one or more of the following: "cookie", "url", "ssl").</span><br><span class="line">server.ssl.ciphers= # Supported SSL ciphers.</span><br><span class="line">server.ssl.client-auth= # Whether client authentication is wanted ("want") or needed ("need"). Requires a trust store.</span><br><span class="line">server.ssl.enabled= # Enable SSL support.</span><br><span class="line">server.ssl.enabled-protocols= # Enabled SSL protocols.</span><br><span class="line">server.ssl.key-alias= # Alias that identifies the key in the key store.</span><br><span class="line">server.ssl.key-password= # Password used to access the key in the key store.</span><br><span class="line">server.ssl.key-store= # Path to the key store that holds the SSL certificate (typically a jks file).</span><br><span class="line">server.ssl.key-store-password= # Password used to access the key store.</span><br><span class="line">server.ssl.key-store-provider= # Provider for the key store.</span><br><span class="line">server.ssl.key-store-type= # Type of the key store.</span><br><span class="line">server.ssl.protocol=TLS # SSL protocol to use.</span><br><span class="line">server.ssl.trust-store= # Trust store that holds SSL certificates.</span><br><span class="line">server.ssl.trust-store-password= # Password used to access the trust store.</span><br><span class="line">server.ssl.trust-store-provider= # Provider for the trust store.</span><br><span class="line">server.ssl.trust-store-type= # Type of the trust store.</span><br><span class="line">server.tomcat.accept-count= # Maximum queue length for incoming connection requests when all possible request processing threads are in use.</span><br><span class="line">server.tomcat.accesslog.buffered=true # Buffer output such that it is only flushed periodically.</span><br><span class="line">server.tomcat.accesslog.directory=logs # Directory in which log files are created. Can be relative to the tomcat base dir or absolute.</span><br><span class="line">server.tomcat.accesslog.enabled=false # Enable access log.</span><br><span class="line">server.tomcat.accesslog.pattern=common # Format pattern for access logs.</span><br><span class="line">server.tomcat.accesslog.prefix=access_log # Log file name prefix.</span><br><span class="line">server.tomcat.accesslog.rename-on-rotate=false # Defer inclusion of the date stamp in the file name until rotate time.</span><br><span class="line">server.tomcat.accesslog.request-attributes-enabled=false # Set request attributes for IP address, Hostname, protocol and port used for the request.</span><br><span class="line">server.tomcat.accesslog.rotate=true # Enable access log rotation.</span><br><span class="line">server.tomcat.accesslog.suffix=.log # Log file name suffix.</span><br><span class="line">server.tomcat.additional-tld-skip-patterns= # Comma-separated list of additional patterns that match jars to ignore for TLD scanning.</span><br><span class="line">server.tomcat.background-processor-delay=30 # Delay in seconds between the invocation of backgroundProcess methods.</span><br><span class="line">server.tomcat.basedir= # Tomcat base directory. If not specified a temporary directory will be used.</span><br><span class="line">server.tomcat.internal-proxies=10\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;|\\</span><br><span class="line">        192\\.168\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;|\\</span><br><span class="line">        169\\.254\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;|\\</span><br><span class="line">        127\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;|\\</span><br><span class="line">        172\\.1[6-9]&#123;1&#125;\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;|\\</span><br><span class="line">        172\\.2[0-9]&#123;1&#125;\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;|\\</span><br><span class="line">        172\\.3[0-1]&#123;1&#125;\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125; # regular expression matching trusted IP addresses.</span><br><span class="line">server.tomcat.max-connections= # Maximum number of connections that the server will accept and process at any given time.</span><br><span class="line">server.tomcat.max-http-post-size=0 # Maximum size in bytes of the HTTP post content.</span><br><span class="line">server.tomcat.max-threads=0 # Maximum amount of worker threads.</span><br><span class="line">server.tomcat.min-spare-threads=0 # Minimum amount of worker threads.</span><br><span class="line">server.tomcat.port-header=X-Forwarded-Port # Name of the HTTP header used to override the original port value.</span><br><span class="line">server.tomcat.protocol-header= # Header that holds the incoming protocol, usually named "X-Forwarded-Proto".</span><br><span class="line">server.tomcat.protocol-header-https-value=https # Value of the protocol header that indicates that the incoming request uses SSL.</span><br><span class="line">server.tomcat.redirect-context-root= # Whether requests to the context root should be redirected by appending a / to the path.</span><br><span class="line">server.tomcat.remote-ip-header= # Name of the http header from which the remote ip is extracted. For instance `X-FORWARDED-FOR`</span><br><span class="line">server.tomcat.uri-encoding=UTF-8 # Character encoding to use to decode the URI.</span><br><span class="line">server.undertow.accesslog.dir= # Undertow access log directory.</span><br><span class="line">server.undertow.accesslog.enabled=false # Enable access log.</span><br><span class="line">server.undertow.accesslog.pattern=common # Format pattern for access logs.</span><br><span class="line">server.undertow.accesslog.prefix=access_log. # Log file name prefix.</span><br><span class="line">server.undertow.accesslog.rotate=true # Enable access log rotation.</span><br><span class="line">server.undertow.accesslog.suffix=log # Log file name suffix.</span><br><span class="line">server.undertow.buffer-size= # Size of each buffer in bytes.</span><br><span class="line">server.undertow.buffers-per-region= # Number of buffer per region.</span><br><span class="line">server.undertow.direct-buffers= # Allocate buffers outside the Java heap.</span><br><span class="line">server.undertow.io-threads= # Number of I/O threads to create for the worker.</span><br><span class="line">server.undertow.max-http-post-size=0 # Maximum size in bytes of the HTTP post content.</span><br><span class="line">server.undertow.worker-threads= # Number of worker threads.</span><br><span class="line"></span><br><span class="line"># FREEMARKER (FreeMarkerAutoConfiguration)</span><br><span class="line">spring.freemarker.allow-request-override=false # Set whether HttpServletRequest attributes are allowed to override (hide) controller generated model attributes of the same name.</span><br><span class="line">spring.freemarker.allow-session-override=false # Set whether HttpSession attributes are allowed to override (hide) controller generated model attributes of the same name.</span><br><span class="line">spring.freemarker.cache=false # Enable template caching.</span><br><span class="line">spring.freemarker.charset=UTF-8 # Template encoding.</span><br><span class="line">spring.freemarker.check-template-location=true # Check that the templates location exists.</span><br><span class="line">spring.freemarker.content-type=text/html # Content-Type value.</span><br><span class="line">spring.freemarker.enabled=true # Enable MVC view resolution for this technology.</span><br><span class="line">spring.freemarker.expose-request-attributes=false # Set whether all request attributes should be added to the model prior to merging with the template.</span><br><span class="line">spring.freemarker.expose-session-attributes=false # Set whether all HttpSession attributes should be added to the model prior to merging with the template.</span><br><span class="line">spring.freemarker.expose-spring-macro-helpers=true # Set whether to expose a RequestContext for use by Spring's macro library, under the name "springMacroRequestContext".</span><br><span class="line">spring.freemarker.prefer-file-system-access=true # Prefer file system access for template loading. File system access enables hot detection of template changes.</span><br><span class="line">spring.freemarker.prefix= # Prefix that gets prepended to view names when building a URL.</span><br><span class="line">spring.freemarker.request-context-attribute= # Name of the RequestContext attribute for all views.</span><br><span class="line">spring.freemarker.settings.*= # Well-known FreeMarker keys which will be passed to FreeMarker's Configuration.</span><br><span class="line">spring.freemarker.suffix= # Suffix that gets appended to view names when building a URL.</span><br><span class="line">spring.freemarker.template-loader-path=classpath:/templates/ # Comma-separated list of template paths.</span><br><span class="line">spring.freemarker.view-names= # White list of view names that can be resolved.</span><br><span class="line"></span><br><span class="line"># GROOVY TEMPLATES (GroovyTemplateAutoConfiguration)</span><br><span class="line">spring.groovy.template.allow-request-override=false # Set whether HttpServletRequest attributes are allowed to override (hide) controller generated model attributes of the same name.</span><br><span class="line">spring.groovy.template.allow-session-override=false # Set whether HttpSession attributes are allowed to override (hide) controller generated model attributes of the same name.</span><br><span class="line">spring.groovy.template.cache= # Enable template caching.</span><br><span class="line">spring.groovy.template.charset=UTF-8 # Template encoding.</span><br><span class="line">spring.groovy.template.check-template-location=true # Check that the templates location exists.</span><br><span class="line">spring.groovy.template.configuration.*= # See GroovyMarkupConfigurer</span><br><span class="line">spring.groovy.template.content-type=test/html # Content-Type value.</span><br><span class="line">spring.groovy.template.enabled=true # Enable MVC view resolution for this technology.</span><br><span class="line">spring.groovy.template.expose-request-attributes=false # Set whether all request attributes should be added to the model prior to merging with the template.</span><br><span class="line">spring.groovy.template.expose-session-attributes=false # Set whether all HttpSession attributes should be added to the model prior to merging with the template.</span><br><span class="line">spring.groovy.template.expose-spring-macro-helpers=true # Set whether to expose a RequestContext for use by Spring's macro library, under the name "springMacroRequestContext".</span><br><span class="line">spring.groovy.template.prefix= # Prefix that gets prepended to view names when building a URL.</span><br><span class="line">spring.groovy.template.request-context-attribute= # Name of the RequestContext attribute for all views.</span><br><span class="line">spring.groovy.template.resource-loader-path=classpath:/templates/ # Template path.</span><br><span class="line">spring.groovy.template.suffix=.tpl # Suffix that gets appended to view names when building a URL.</span><br><span class="line">spring.groovy.template.view-names= # White list of view names that can be resolved.</span><br><span class="line"></span><br><span class="line"># SPRING HATEOAS (HateoasProperties)</span><br><span class="line">spring.hateoas.use-hal-as-default-json-media-type=true # Specify if application/hal+json responses should be sent to requests that accept application/json.</span><br><span class="line"></span><br><span class="line"># HTTP message conversion</span><br><span class="line">spring.http.converters.preferred-json-mapper=jackson # Preferred JSON mapper to use for HTTP message conversion. Set to "gson" to force the use of Gson when both it and Jackson are on the classpath.</span><br><span class="line"></span><br><span class="line"># HTTP encoding (HttpEncodingProperties)</span><br><span class="line">spring.http.encoding.charset=UTF-8 # Charset of HTTP requests and responses. Added to the "Content-Type" header if not set explicitly.</span><br><span class="line">spring.http.encoding.enabled=true # Enable http encoding support.</span><br><span class="line">spring.http.encoding.force= # Force the encoding to the configured charset on HTTP requests and responses.</span><br><span class="line">spring.http.encoding.force-request= # Force the encoding to the configured charset on HTTP requests. Defaults to true when "force" has not been specified.</span><br><span class="line">spring.http.encoding.force-response= # Force the encoding to the configured charset on HTTP responses.</span><br><span class="line">spring.http.encoding.mapping= # Locale to Encoding mapping.</span><br><span class="line"></span><br><span class="line"># MULTIPART (MultipartProperties)</span><br><span class="line">spring.http.multipart.enabled=true # Enable support of multi-part uploads.</span><br><span class="line">spring.http.multipart.file-size-threshold=0 # Threshold after which files will be written to disk. Values can use the suffixed "MB" or "KB" to indicate a Megabyte or Kilobyte size.</span><br><span class="line">spring.http.multipart.location= # Intermediate location of uploaded files.</span><br><span class="line">spring.http.multipart.max-file-size=1MB # Max file size. Values can use the suffixed "MB" or "KB" to indicate a Megabyte or Kilobyte size.</span><br><span class="line">spring.http.multipart.max-request-size=10MB # Max request size. Values can use the suffixed "MB" or "KB" to indicate a Megabyte or Kilobyte size.</span><br><span class="line">spring.http.multipart.resolve-lazily=false # Whether to resolve the multipart request lazily at the time of file or parameter access.</span><br><span class="line"></span><br><span class="line"># JACKSON (JacksonProperties)</span><br><span class="line">spring.jackson.date-format= # Date format string or a fully-qualified date format class name. For instance `yyyy-MM-dd HH:mm:ss`.</span><br><span class="line">spring.jackson.default-property-inclusion= # Controls the inclusion of properties during serialization.</span><br><span class="line">spring.jackson.deserialization.*= # Jackson on/off features that affect the way Java objects are deserialized.</span><br><span class="line">spring.jackson.generator.*= # Jackson on/off features for generators.</span><br><span class="line">spring.jackson.joda-date-time-format= # Joda date time format string. If not configured, "date-format" will be used as a fallback if it is configured with a format string.</span><br><span class="line">spring.jackson.locale= # Locale used for formatting.</span><br><span class="line">spring.jackson.mapper.*= # Jackson general purpose on/off features.</span><br><span class="line">spring.jackson.parser.*= # Jackson on/off features for parsers.</span><br><span class="line">spring.jackson.property-naming-strategy= # One of the constants on Jackson's PropertyNamingStrategy. Can also be a fully-qualified class name of a PropertyNamingStrategy subclass.</span><br><span class="line">spring.jackson.serialization.*= # Jackson on/off features that affect the way Java objects are serialized.</span><br><span class="line">spring.jackson.time-zone= # Time zone used when formatting dates. For instance `America/Los_Angeles`</span><br><span class="line"></span><br><span class="line"># JERSEY (JerseyProperties)</span><br><span class="line">spring.jersey.application-path= # Path that serves as the base URI for the application. Overrides the value of "@ApplicationPath" if specified.</span><br><span class="line">spring.jersey.filter.order=0 # Jersey filter chain order.</span><br><span class="line">spring.jersey.init.*= # Init parameters to pass to Jersey via the servlet or filter.</span><br><span class="line">spring.jersey.servlet.load-on-startup=-1 # Load on startup priority of the Jersey servlet.</span><br><span class="line">spring.jersey.type=servlet # Jersey integration type.</span><br><span class="line"></span><br><span class="line"># SPRING LDAP (LdapProperties)</span><br><span class="line">spring.ldap.urls= # LDAP URLs of the server.</span><br><span class="line">spring.ldap.base= # Base suffix from which all operations should originate.</span><br><span class="line">spring.ldap.username= # Login user of the server.</span><br><span class="line">spring.ldap.password= # Login password of the server.</span><br><span class="line">spring.ldap.base-environment.*= # LDAP specification settings.</span><br><span class="line"></span><br><span class="line"># EMBEDDED LDAP (EmbeddedLdapProperties)</span><br><span class="line">spring.ldap.embedded.port= # Embedded LDAP port.</span><br><span class="line">spring.ldap.embedded.credential.username= # Embedded LDAP username.</span><br><span class="line">spring.ldap.embedded.credential.password= # Embedded LDAP password.</span><br><span class="line">spring.ldap.embedded.base-dn= # The base DN</span><br><span class="line">spring.ldap.embedded.ldif=classpath:schema.ldif # Schema (LDIF) script resource reference.</span><br><span class="line"></span><br><span class="line"># SPRING MOBILE DEVICE VIEWS (DeviceDelegatingViewResolverAutoConfiguration)</span><br><span class="line">spring.mobile.devicedelegatingviewresolver.enable-fallback=false # Enable support for fallback resolution.</span><br><span class="line">spring.mobile.devicedelegatingviewresolver.enabled=false # Enable device view resolver.</span><br><span class="line">spring.mobile.devicedelegatingviewresolver.mobile-prefix=mobile/ # Prefix that gets prepended to view names for mobile devices.</span><br><span class="line">spring.mobile.devicedelegatingviewresolver.mobile-suffix= # Suffix that gets appended to view names for mobile devices.</span><br><span class="line">spring.mobile.devicedelegatingviewresolver.normal-prefix= # Prefix that gets prepended to view names for normal devices.</span><br><span class="line">spring.mobile.devicedelegatingviewresolver.normal-suffix= # Suffix that gets appended to view names for normal devices.</span><br><span class="line">spring.mobile.devicedelegatingviewresolver.tablet-prefix=tablet/ # Prefix that gets prepended to view names for tablet devices.</span><br><span class="line">spring.mobile.devicedelegatingviewresolver.tablet-suffix= # Suffix that gets appended to view names for tablet devices.</span><br><span class="line"></span><br><span class="line"># SPRING MOBILE SITE PREFERENCE (SitePreferenceAutoConfiguration)</span><br><span class="line">spring.mobile.sitepreference.enabled=true # Enable SitePreferenceHandler.</span><br><span class="line"></span><br><span class="line"># MUSTACHE TEMPLATES (MustacheAutoConfiguration)</span><br><span class="line">spring.mustache.allow-request-override= # Set whether HttpServletRequest attributes are allowed to override (hide) controller generated model attributes of the same name.</span><br><span class="line">spring.mustache.allow-session-override= # Set whether HttpSession attributes are allowed to override (hide) controller generated model attributes of the same name.</span><br><span class="line">spring.mustache.cache= # Enable template caching.</span><br><span class="line">spring.mustache.charset= # Template encoding.</span><br><span class="line">spring.mustache.check-template-location= # Check that the templates location exists.</span><br><span class="line">spring.mustache.content-type= # Content-Type value.</span><br><span class="line">spring.mustache.enabled= # Enable MVC view resolution for this technology.</span><br><span class="line">spring.mustache.expose-request-attributes= # Set whether all request attributes should be added to the model prior to merging with the template.</span><br><span class="line">spring.mustache.expose-session-attributes= # Set whether all HttpSession attributes should be added to the model prior to merging with the template.</span><br><span class="line">spring.mustache.expose-spring-macro-helpers= # Set whether to expose a RequestContext for use by Spring's macro library, under the name "springMacroRequestContext".</span><br><span class="line">spring.mustache.prefix=classpath:/templates/ # Prefix to apply to template names.</span><br><span class="line">spring.mustache.request-context-attribute= # Name of the RequestContext attribute for all views.</span><br><span class="line">spring.mustache.suffix=.html # Suffix to apply to template names.</span><br><span class="line">spring.mustache.view-names= # White list of view names that can be resolved.</span><br><span class="line"></span><br><span class="line"># SPRING MVC (WebMvcProperties)</span><br><span class="line">spring.mvc.async.request-timeout= # Amount of time (in milliseconds) before asynchronous request handling times out.</span><br><span class="line">spring.mvc.date-format= # Date format to use. For instance `dd/MM/yyyy`.</span><br><span class="line">spring.mvc.dispatch-trace-request=false # Dispatch TRACE requests to the FrameworkServlet doService method.</span><br><span class="line">spring.mvc.dispatch-options-request=true # Dispatch OPTIONS requests to the FrameworkServlet doService method.</span><br><span class="line">spring.mvc.favicon.enabled=true # Enable resolution of favicon.ico.</span><br><span class="line">spring.mvc.formcontent.putfilter.enabled=true # Enable Spring's HttpPutFormContentFilter.</span><br><span class="line">spring.mvc.ignore-default-model-on-redirect=true # If the content of the "default" model should be ignored during redirect scenarios.</span><br><span class="line">spring.mvc.locale= # Locale to use. By default, this locale is overridden by the "Accept-Language" header.</span><br><span class="line">spring.mvc.locale-resolver=accept-header # Define how the locale should be resolved.</span><br><span class="line">spring.mvc.log-resolved-exception=false # Enable warn logging of exceptions resolved by a "HandlerExceptionResolver".</span><br><span class="line">spring.mvc.media-types.*= # Maps file extensions to media types for content negotiation.</span><br><span class="line">spring.mvc.message-codes-resolver-format= # Formatting strategy for message codes. For instance `PREFIX_ERROR_CODE`.</span><br><span class="line">spring.mvc.servlet.load-on-startup=-1 # Load on startup priority of the Spring Web Services servlet.</span><br><span class="line">spring.mvc.static-path-pattern=/** # Path pattern used for static resources.</span><br><span class="line">spring.mvc.throw-exception-if-no-handler-found=false # If a "NoHandlerFoundException" should be thrown if no Handler was found to process a request.</span><br><span class="line">spring.mvc.view.prefix= # Spring MVC view prefix.</span><br><span class="line">spring.mvc.view.suffix= # Spring MVC view suffix.</span><br><span class="line"></span><br><span class="line"># SPRING RESOURCES HANDLING (ResourceProperties)</span><br><span class="line">spring.resources.add-mappings=true # Enable default resource handling.</span><br><span class="line">spring.resources.cache-period= # Cache period for the resources served by the resource handler, in seconds.</span><br><span class="line">spring.resources.chain.cache=true # Enable caching in the Resource chain.</span><br><span class="line">spring.resources.chain.enabled= # Enable the Spring Resource Handling chain. Disabled by default unless at least one strategy has been enabled.</span><br><span class="line">spring.resources.chain.gzipped=false # Enable resolution of already gzipped resources.</span><br><span class="line">spring.resources.chain.html-application-cache=false # Enable HTML5 application cache manifest rewriting.</span><br><span class="line">spring.resources.chain.strategy.content.enabled=false # Enable the content Version Strategy.</span><br><span class="line">spring.resources.chain.strategy.content.paths=/** # Comma-separated list of patterns to apply to the Version Strategy.</span><br><span class="line">spring.resources.chain.strategy.fixed.enabled=false # Enable the fixed Version Strategy.</span><br><span class="line">spring.resources.chain.strategy.fixed.paths=/** # Comma-separated list of patterns to apply to the Version Strategy.</span><br><span class="line">spring.resources.chain.strategy.fixed.version= # Version string to use for the Version Strategy.</span><br><span class="line">spring.resources.static-locations=classpath:/META-INF/resources/,classpath:/resources/,classpath:/static/,classpath:/public/ # Locations of static resources.</span><br><span class="line"></span><br><span class="line"># SPRING SESSION (SessionProperties)</span><br><span class="line">spring.session.hazelcast.flush-mode=on-save # Sessions flush mode.</span><br><span class="line">spring.session.hazelcast.map-name=spring:session:sessions # Name of the map used to store sessions.</span><br><span class="line">spring.session.jdbc.initializer.enabled= # Create the required session tables on startup if necessary. Enabled automatically if the default table name is set or a custom schema is configured.</span><br><span class="line">spring.session.jdbc.schema=classpath:org/springframework/session/jdbc/schema-@@platform@@.sql # Path to the SQL file to use to initialize the database schema.</span><br><span class="line">spring.session.jdbc.table-name=SPRING_SESSION # Name of database table used to store sessions.</span><br><span class="line">spring.session.mongo.collection-name=sessions # Collection name used to store sessions.</span><br><span class="line">spring.session.redis.flush-mode=on-save # Sessions flush mode.</span><br><span class="line">spring.session.redis.namespace= # Namespace for keys used to store sessions.</span><br><span class="line">spring.session.store-type= # Session store type.</span><br><span class="line"></span><br><span class="line"># SPRING SOCIAL (SocialWebAutoConfiguration)</span><br><span class="line">spring.social.auto-connection-views=false # Enable the connection status view for supported providers.</span><br><span class="line"></span><br><span class="line"># SPRING SOCIAL FACEBOOK (FacebookAutoConfiguration)</span><br><span class="line">spring.social.facebook.app-id= # your application's Facebook App ID</span><br><span class="line">spring.social.facebook.app-secret= # your application's Facebook App Secret</span><br><span class="line"></span><br><span class="line"># SPRING SOCIAL LINKEDIN (LinkedInAutoConfiguration)</span><br><span class="line">spring.social.linkedin.app-id= # your application's LinkedIn App ID</span><br><span class="line">spring.social.linkedin.app-secret= # your application's LinkedIn App Secret</span><br><span class="line"></span><br><span class="line"># SPRING SOCIAL TWITTER (TwitterAutoConfiguration)</span><br><span class="line">spring.social.twitter.app-id= # your application's Twitter App ID</span><br><span class="line">spring.social.twitter.app-secret= # your application's Twitter App Secret</span><br><span class="line"></span><br><span class="line"># THYMELEAF (ThymeleafAutoConfiguration)</span><br><span class="line">spring.thymeleaf.cache=true # Enable template caching.</span><br><span class="line">spring.thymeleaf.check-template=true # Check that the template exists before rendering it.</span><br><span class="line">spring.thymeleaf.check-template-location=true # Check that the templates location exists.</span><br><span class="line">spring.thymeleaf.content-type=text/html # Content-Type value.</span><br><span class="line">spring.thymeleaf.enabled=true # Enable MVC Thymeleaf view resolution.</span><br><span class="line">spring.thymeleaf.encoding=UTF-8 # Template encoding.</span><br><span class="line">spring.thymeleaf.excluded-view-names= # Comma-separated list of view names that should be excluded from resolution.</span><br><span class="line">spring.thymeleaf.mode=HTML5 # Template mode to be applied to templates. See also StandardTemplateModeHandlers.</span><br><span class="line">spring.thymeleaf.prefix=classpath:/templates/ # Prefix that gets prepended to view names when building a URL.</span><br><span class="line">spring.thymeleaf.suffix=.html # Suffix that gets appended to view names when building a URL.</span><br><span class="line">spring.thymeleaf.template-resolver-order= # Order of the template resolver in the chain.</span><br><span class="line">spring.thymeleaf.view-names= # Comma-separated list of view names that can be resolved.</span><br><span class="line"></span><br><span class="line"># SPRING WEB SERVICES (WebServicesProperties)</span><br><span class="line">spring.webservices.path=/services # Path that serves as the base URI for the services.</span><br><span class="line">spring.webservices.servlet.init= # Servlet init parameters to pass to Spring Web Services.</span><br><span class="line">spring.webservices.servlet.load-on-startup=-1 # Load on startup priority of the Spring Web Services servlet.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># ----------------------------------------</span><br><span class="line"># SECURITY PROPERTIES</span><br><span class="line"># ----------------------------------------</span><br><span class="line"># SECURITY (SecurityProperties)</span><br><span class="line">security.basic.authorize-mode=role # Security authorize mode to apply.</span><br><span class="line">security.basic.enabled=true # Enable basic authentication.</span><br><span class="line">security.basic.path=/** # Comma-separated list of paths to secure.</span><br><span class="line">security.basic.realm=Spring # HTTP basic realm name.</span><br><span class="line">security.enable-csrf=false # Enable Cross Site Request Forgery support.</span><br><span class="line">security.filter-order=0 # Security filter chain order.</span><br><span class="line">security.filter-dispatcher-types=ASYNC, FORWARD, INCLUDE, REQUEST # Security filter chain dispatcher types.</span><br><span class="line">security.headers.cache=true # Enable cache control HTTP headers.</span><br><span class="line">security.headers.content-security-policy= # Value for content security policy header.</span><br><span class="line">security.headers.content-security-policy-mode=default # Content security policy mode.</span><br><span class="line">security.headers.content-type=true # Enable "X-Content-Type-Options" header.</span><br><span class="line">security.headers.frame=true # Enable "X-Frame-Options" header.</span><br><span class="line">security.headers.hsts=all # HTTP Strict Transport Security (HSTS) mode (none, domain, all).</span><br><span class="line">security.headers.xss=true # Enable cross site scripting (XSS) protection.</span><br><span class="line">security.ignored= # Comma-separated list of paths to exclude from the default secured paths.</span><br><span class="line">security.require-ssl=false # Enable secure channel for all requests.</span><br><span class="line">security.sessions=stateless # Session creation policy (always, never, if_required, stateless).</span><br><span class="line">security.user.name=user # Default user name.</span><br><span class="line">security.user.password= # Password for the default user name. A random password is logged on startup by default.</span><br><span class="line">security.user.role=USER # Granted roles for the default user name.</span><br><span class="line"></span><br><span class="line"># SECURITY OAUTH2 CLIENT (OAuth2ClientProperties)</span><br><span class="line">security.oauth2.client.client-id= # OAuth2 client id.</span><br><span class="line">security.oauth2.client.client-secret= # OAuth2 client secret. A random secret is generated by default</span><br><span class="line"></span><br><span class="line"># SECURITY OAUTH2 RESOURCES (ResourceServerProperties)</span><br><span class="line">security.oauth2.resource.filter-order= # The order of the filter chain used to authenticate tokens.</span><br><span class="line">security.oauth2.resource.id= # Identifier of the resource.</span><br><span class="line">security.oauth2.resource.jwt.key-uri= # The URI of the JWT token. Can be set if the value is not available and the key is public.</span><br><span class="line">security.oauth2.resource.jwt.key-value= # The verification key of the JWT token. Can either be a symmetric secret or PEM-encoded RSA public key.</span><br><span class="line">security.oauth2.resource.prefer-token-info=true # Use the token info, can be set to false to use the user info.</span><br><span class="line">security.oauth2.resource.service-id=resource #</span><br><span class="line">security.oauth2.resource.token-info-uri= # URI of the token decoding endpoint.</span><br><span class="line">security.oauth2.resource.token-type= # The token type to send when using the userInfoUri.</span><br><span class="line">security.oauth2.resource.user-info-uri= # URI of the user endpoint.</span><br><span class="line"></span><br><span class="line"># SECURITY OAUTH2 SSO (OAuth2SsoProperties)</span><br><span class="line">security.oauth2.sso.filter-order= # Filter order to apply if not providing an explicit WebSecurityConfigurerAdapter</span><br><span class="line">security.oauth2.sso.login-path=/login # Path to the login page, i.e. the one that triggers the redirect to the OAuth2 Authorization Server</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># ----------------------------------------</span><br><span class="line"># DATA PROPERTIES</span><br><span class="line"># ----------------------------------------</span><br><span class="line"></span><br><span class="line"># FLYWAY (FlywayProperties)</span><br><span class="line">flyway.baseline-description= #</span><br><span class="line">flyway.baseline-version=1 # version to start migration</span><br><span class="line">flyway.baseline-on-migrate= #</span><br><span class="line">flyway.check-location=false # Check that migration scripts location exists.</span><br><span class="line">flyway.clean-on-validation-error= #</span><br><span class="line">flyway.enabled=true # Enable flyway.</span><br><span class="line">flyway.encoding= #</span><br><span class="line">flyway.ignore-failed-future-migration= #</span><br><span class="line">flyway.init-sqls= # SQL statements to execute to initialize a connection immediately after obtaining it.</span><br><span class="line">flyway.locations=classpath:db/migration # locations of migrations scripts</span><br><span class="line">flyway.out-of-order= #</span><br><span class="line">flyway.password= # JDBC password if you want Flyway to create its own DataSource</span><br><span class="line">flyway.placeholder-prefix= #</span><br><span class="line">flyway.placeholder-replacement= #</span><br><span class="line">flyway.placeholder-suffix= #</span><br><span class="line">flyway.placeholders.*= #</span><br><span class="line">flyway.schemas= # schemas to update</span><br><span class="line">flyway.sql-migration-prefix=V #</span><br><span class="line">flyway.sql-migration-separator= #</span><br><span class="line">flyway.sql-migration-suffix=.sql #</span><br><span class="line">flyway.table= #</span><br><span class="line">flyway.url= # JDBC url of the database to migrate. If not set, the primary configured data source is used.</span><br><span class="line">flyway.user= # Login user of the database to migrate.</span><br><span class="line">flyway.validate-on-migrate= #</span><br><span class="line"></span><br><span class="line"># LIQUIBASE (LiquibaseProperties)</span><br><span class="line">liquibase.change-log=classpath:/db/changelog/db.changelog-master.yaml # Change log configuration path.</span><br><span class="line">liquibase.check-change-log-location=true # Check the change log location exists.</span><br><span class="line">liquibase.contexts= # Comma-separated list of runtime contexts to use.</span><br><span class="line">liquibase.default-schema= # Default database schema.</span><br><span class="line">liquibase.drop-first=false # Drop the database schema first.</span><br><span class="line">liquibase.enabled=true # Enable liquibase support.</span><br><span class="line">liquibase.labels= # Comma-separated list of runtime labels to use.</span><br><span class="line">liquibase.parameters.*= # Change log parameters.</span><br><span class="line">liquibase.password= # Login password of the database to migrate.</span><br><span class="line">liquibase.rollback-file= # File to which rollback SQL will be written when an update is performed.</span><br><span class="line">liquibase.url= # JDBC url of the database to migrate. If not set, the primary configured data source is used.</span><br><span class="line">liquibase.user= # Login user of the database to migrate.</span><br><span class="line"></span><br><span class="line"># COUCHBASE (CouchbaseProperties)</span><br><span class="line">spring.couchbase.bootstrap-hosts= # Couchbase nodes (host or IP address) to bootstrap from.</span><br><span class="line">spring.couchbase.bucket.name=default # Name of the bucket to connect to.</span><br><span class="line">spring.couchbase.bucket.password=  # Password of the bucket.</span><br><span class="line">spring.couchbase.env.endpoints.key-value=1 # Number of sockets per node against the Key/value service.</span><br><span class="line">spring.couchbase.env.endpoints.query=1 # Number of sockets per node against the Query (N1QL) service.</span><br><span class="line">spring.couchbase.env.endpoints.view=1 # Number of sockets per node against the view service.</span><br><span class="line">spring.couchbase.env.ssl.enabled= # Enable SSL support. Enabled automatically if a "keyStore" is provided unless specified otherwise.</span><br><span class="line">spring.couchbase.env.ssl.key-store= # Path to the JVM key store that holds the certificates.</span><br><span class="line">spring.couchbase.env.ssl.key-store-password= # Password used to access the key store.</span><br><span class="line">spring.couchbase.env.timeouts.connect=5000 # Bucket connections timeout in milliseconds.</span><br><span class="line">spring.couchbase.env.timeouts.key-value=2500 # Blocking operations performed on a specific key timeout in milliseconds.</span><br><span class="line">spring.couchbase.env.timeouts.query=7500 # N1QL query operations timeout in milliseconds.</span><br><span class="line">spring.couchbase.env.timeouts.socket-connect=1000 # Socket connect connections timeout in milliseconds.</span><br><span class="line">spring.couchbase.env.timeouts.view=7500 # Regular and geospatial view operations timeout in milliseconds.</span><br><span class="line"></span><br><span class="line"># DAO (PersistenceExceptionTranslationAutoConfiguration)</span><br><span class="line">spring.dao.exceptiontranslation.enabled=true # Enable the PersistenceExceptionTranslationPostProcessor.</span><br><span class="line"></span><br><span class="line"># CASSANDRA (CassandraProperties)</span><br><span class="line">spring.data.cassandra.cluster-name= # Name of the Cassandra cluster.</span><br><span class="line">spring.data.cassandra.compression=none # Compression supported by the Cassandra binary protocol.</span><br><span class="line">spring.data.cassandra.connect-timeout-millis= # Socket option: connection time out.</span><br><span class="line">spring.data.cassandra.consistency-level= # Queries consistency level.</span><br><span class="line">spring.data.cassandra.contact-points=localhost # Comma-separated list of cluster node addresses.</span><br><span class="line">spring.data.cassandra.fetch-size= # Queries default fetch size.</span><br><span class="line">spring.data.cassandra.keyspace-name= # Keyspace name to use.</span><br><span class="line">spring.data.cassandra.load-balancing-policy= # Class name of the load balancing policy.</span><br><span class="line">spring.data.cassandra.port= # Port of the Cassandra server.</span><br><span class="line">spring.data.cassandra.password= # Login password of the server.</span><br><span class="line">spring.data.cassandra.read-timeout-millis= # Socket option: read time out.</span><br><span class="line">spring.data.cassandra.reconnection-policy= # Reconnection policy class.</span><br><span class="line">spring.data.cassandra.retry-policy= # Class name of the retry policy.</span><br><span class="line">spring.data.cassandra.serial-consistency-level= # Queries serial consistency level.</span><br><span class="line">spring.data.cassandra.schema-action=none # Schema action to take at startup.</span><br><span class="line">spring.data.cassandra.ssl=false # Enable SSL support.</span><br><span class="line">spring.data.cassandra.username= # Login user of the server.</span><br><span class="line"></span><br><span class="line"># DATA COUCHBASE (CouchbaseDataProperties)</span><br><span class="line">spring.data.couchbase.auto-index=false # Automatically create views and indexes.</span><br><span class="line">spring.data.couchbase.consistency=read-your-own-writes # Consistency to apply by default on generated queries.</span><br><span class="line">spring.data.couchbase.repositories.enabled=true # Enable Couchbase repositories.</span><br><span class="line"></span><br><span class="line"># ELASTICSEARCH (ElasticsearchProperties)</span><br><span class="line">spring.data.elasticsearch.cluster-name=elasticsearch # Elasticsearch cluster name.</span><br><span class="line">spring.data.elasticsearch.cluster-nodes= # Comma-separated list of cluster node addresses. If not specified, starts a client node.</span><br><span class="line">spring.data.elasticsearch.properties.*= # Additional properties used to configure the client.</span><br><span class="line">spring.data.elasticsearch.repositories.enabled=true # Enable Elasticsearch repositories.</span><br><span class="line"></span><br><span class="line"># DATA LDAP</span><br><span class="line">spring.data.ldap.repositories.enabled=true # Enable LDAP repositories.</span><br><span class="line"></span><br><span class="line"># MONGODB (MongoProperties)</span><br><span class="line">spring.data.mongodb.authentication-database= # Authentication database name.</span><br><span class="line">spring.data.mongodb.database=test # Database name.</span><br><span class="line">spring.data.mongodb.field-naming-strategy= # Fully qualified name of the FieldNamingStrategy to use.</span><br><span class="line">spring.data.mongodb.grid-fs-database= # GridFS database name.</span><br><span class="line">spring.data.mongodb.host=localhost # Mongo server host. Cannot be set with uri.</span><br><span class="line">spring.data.mongodb.password= # Login password of the mongo server. Cannot be set with uri.</span><br><span class="line">spring.data.mongodb.port=27017 # Mongo server port. Cannot be set with uri.</span><br><span class="line">spring.data.mongodb.repositories.enabled=true # Enable Mongo repositories.</span><br><span class="line">spring.data.mongodb.uri=mongodb://localhost/test # Mongo database URI. Cannot be set with host, port and credentials.</span><br><span class="line">spring.data.mongodb.username= # Login user of the mongo server. Cannot be set with uri.</span><br><span class="line"></span><br><span class="line"># DATA REDIS</span><br><span class="line">spring.data.redis.repositories.enabled=true # Enable Redis repositories.</span><br><span class="line"></span><br><span class="line"># NEO4J (Neo4jProperties)</span><br><span class="line">spring.data.neo4j.compiler= # Compiler to use.</span><br><span class="line">spring.data.neo4j.embedded.enabled=true # Enable embedded mode if the embedded driver is available.</span><br><span class="line">spring.data.neo4j.open-in-view=false # Register OpenSessionInViewInterceptor. Binds a Neo4j Session to the thread for the entire processing of the request.</span><br><span class="line">spring.data.neo4j.password= # Login password of the server.</span><br><span class="line">spring.data.neo4j.repositories.enabled=true # Enable Neo4j repositories.</span><br><span class="line">spring.data.neo4j.uri= # URI used by the driver. Auto-detected by default.</span><br><span class="line">spring.data.neo4j.username= # Login user of the server.</span><br><span class="line"></span><br><span class="line"># DATA REST (RepositoryRestProperties)</span><br><span class="line">spring.data.rest.base-path= # Base path to be used by Spring Data REST to expose repository resources.</span><br><span class="line">spring.data.rest.default-page-size= # Default size of pages.</span><br><span class="line">spring.data.rest.detection-strategy=default # Strategy to use to determine which repositories get exposed.</span><br><span class="line">spring.data.rest.enable-enum-translation= # Enable enum value translation via the Spring Data REST default resource bundle.</span><br><span class="line">spring.data.rest.limit-param-name= # Name of the URL query string parameter that indicates how many results to return at once.</span><br><span class="line">spring.data.rest.max-page-size= # Maximum size of pages.</span><br><span class="line">spring.data.rest.page-param-name= # Name of the URL query string parameter that indicates what page to return.</span><br><span class="line">spring.data.rest.return-body-on-create= # Return a response body after creating an entity.</span><br><span class="line">spring.data.rest.return-body-on-update= # Return a response body after updating an entity.</span><br><span class="line">spring.data.rest.sort-param-name= # Name of the URL query string parameter that indicates what direction to sort results.</span><br><span class="line"></span><br><span class="line"># SOLR (SolrProperties)</span><br><span class="line">spring.data.solr.host=http://127.0.0.1:8983/solr # Solr host. Ignored if "zk-host" is set.</span><br><span class="line">spring.data.solr.repositories.enabled=true # Enable Solr repositories.</span><br><span class="line">spring.data.solr.zk-host= # ZooKeeper host address in the form HOST:PORT.</span><br><span class="line"></span><br><span class="line"># DATASOURCE (DataSourceAutoConfiguration &amp; DataSourceProperties)</span><br><span class="line">spring.datasource.continue-on-error=false # Do not stop if an error occurs while initializing the database.</span><br><span class="line">spring.datasource.data= # Data (DML) script resource references.</span><br><span class="line">spring.datasource.data-username= # User of the database to execute DML scripts (if different).</span><br><span class="line">spring.datasource.data-password= # Password of the database to execute DML scripts (if different).</span><br><span class="line">spring.datasource.dbcp2.*= # Commons DBCP2 specific settings</span><br><span class="line">spring.datasource.driver-class-name= # Fully qualified name of the JDBC driver. Auto-detected based on the URL by default.</span><br><span class="line">spring.datasource.generate-unique-name=false # Generate a random datasource name.</span><br><span class="line">spring.datasource.hikari.*= # Hikari specific settings</span><br><span class="line">spring.datasource.initialize=true # Populate the database using 'data.sql'.</span><br><span class="line">spring.datasource.jmx-enabled=false # Enable JMX support (if provided by the underlying pool).</span><br><span class="line">spring.datasource.jndi-name= # JNDI location of the datasource. Class, url, username &amp; password are ignored when set.</span><br><span class="line">spring.datasource.name=testdb # Name of the datasource.</span><br><span class="line">spring.datasource.password= # Login password of the database.</span><br><span class="line">spring.datasource.platform=all # Platform to use in the schema resource (schema-$&#123;platform&#125;.sql).</span><br><span class="line">spring.datasource.schema= # Schema (DDL) script resource references.</span><br><span class="line">spring.datasource.schema-username= # User of the database to execute DDL scripts (if different).</span><br><span class="line">spring.datasource.schema-password= # Password of the database to execute DDL scripts (if different).</span><br><span class="line">spring.datasource.separator=; # Statement separator in SQL initialization scripts.</span><br><span class="line">spring.datasource.sql-script-encoding= # SQL scripts encoding.</span><br><span class="line">spring.datasource.tomcat.*= # Tomcat datasource specific settings</span><br><span class="line">spring.datasource.type= # Fully qualified name of the connection pool implementation to use. By default, it is auto-detected from the classpath.</span><br><span class="line">spring.datasource.url= # JDBC url of the database.</span><br><span class="line">spring.datasource.username=</span><br><span class="line"></span><br><span class="line"># JEST (Elasticsearch HTTP client) (JestProperties)</span><br><span class="line">spring.elasticsearch.jest.connection-timeout=3000 # Connection timeout in milliseconds.</span><br><span class="line">spring.elasticsearch.jest.multi-threaded=true # Enable connection requests from multiple execution threads.</span><br><span class="line">spring.elasticsearch.jest.password= # Login password.</span><br><span class="line">spring.elasticsearch.jest.proxy.host= # Proxy host the HTTP client should use.</span><br><span class="line">spring.elasticsearch.jest.proxy.port= # Proxy port the HTTP client should use.</span><br><span class="line">spring.elasticsearch.jest.read-timeout=3000 # Read timeout in milliseconds.</span><br><span class="line">spring.elasticsearch.jest.uris=http://localhost:9200 # Comma-separated list of the Elasticsearch instances to use.</span><br><span class="line">spring.elasticsearch.jest.username= # Login user.</span><br><span class="line"></span><br><span class="line"># H2 Web Console (H2ConsoleProperties)</span><br><span class="line">spring.h2.console.enabled=false # Enable the console.</span><br><span class="line">spring.h2.console.path=/h2-console # Path at which the console will be available.</span><br><span class="line">spring.h2.console.settings.trace=false # Enable trace output.</span><br><span class="line">spring.h2.console.settings.web-allow-others=false # Enable remote access.</span><br><span class="line"></span><br><span class="line"># JOOQ (JooqAutoConfiguration)</span><br><span class="line">spring.jooq.sql-dialect= # SQLDialect JOOQ used when communicating with the configured datasource. For instance `POSTGRES`</span><br><span class="line"></span><br><span class="line"># JPA (JpaBaseConfiguration, HibernateJpaAutoConfiguration)</span><br><span class="line">spring.data.jpa.repositories.enabled=true # Enable JPA repositories.</span><br><span class="line">spring.jpa.database= # Target database to operate on, auto-detected by default. Can be alternatively set using the "databasePlatform" property.</span><br><span class="line">spring.jpa.database-platform= # Name of the target database to operate on, auto-detected by default. Can be alternatively set using the "Database" enum.</span><br><span class="line">spring.jpa.generate-ddl=false # Initialize the schema on startup.</span><br><span class="line">spring.jpa.hibernate.ddl-auto= # DDL mode. This is actually a shortcut for the "hibernate.hbm2ddl.auto" property. Default to "create-drop" when using an embedded database, "none" otherwise.</span><br><span class="line">spring.jpa.hibernate.naming.implicit-strategy= # Hibernate 5 implicit naming strategy fully qualified name.</span><br><span class="line">spring.jpa.hibernate.naming.physical-strategy= # Hibernate 5 physical naming strategy fully qualified name.</span><br><span class="line">spring.jpa.hibernate.naming.strategy= # Hibernate 4 naming strategy fully qualified name. Not supported with Hibernate 5.</span><br><span class="line">spring.jpa.hibernate.use-new-id-generator-mappings= # Use Hibernate's newer IdentifierGenerator for AUTO, TABLE and SEQUENCE.</span><br><span class="line">spring.jpa.open-in-view=true # Register OpenEntityManagerInViewInterceptor. Binds a JPA EntityManager to the thread for the entire processing of the request.</span><br><span class="line">spring.jpa.properties.*= # Additional native properties to set on the JPA provider.</span><br><span class="line">spring.jpa.show-sql=false # Enable logging of SQL statements.</span><br><span class="line"></span><br><span class="line"># JTA (JtaAutoConfiguration)</span><br><span class="line">spring.jta.enabled=true # Enable JTA support.</span><br><span class="line">spring.jta.log-dir= # Transaction logs directory.</span><br><span class="line">spring.jta.transaction-manager-id= # Transaction manager unique identifier.</span><br><span class="line"></span><br><span class="line"># ATOMIKOS (AtomikosProperties)</span><br><span class="line">spring.jta.atomikos.connectionfactory.borrow-connection-timeout=30 # Timeout, in seconds, for borrowing connections from the pool.</span><br><span class="line">spring.jta.atomikos.connectionfactory.ignore-session-transacted-flag=true # Whether or not to ignore the transacted flag when creating session.</span><br><span class="line">spring.jta.atomikos.connectionfactory.local-transaction-mode=false # Whether or not local transactions are desired.</span><br><span class="line">spring.jta.atomikos.connectionfactory.maintenance-interval=60 # The time, in seconds, between runs of the pool's maintenance thread.</span><br><span class="line">spring.jta.atomikos.connectionfactory.max-idle-time=60 # The time, in seconds, after which connections are cleaned up from the pool.</span><br><span class="line">spring.jta.atomikos.connectionfactory.max-lifetime=0 # The time, in seconds, that a connection can be pooled for before being destroyed. 0 denotes no limit.</span><br><span class="line">spring.jta.atomikos.connectionfactory.max-pool-size=1 # The maximum size of the pool.</span><br><span class="line">spring.jta.atomikos.connectionfactory.min-pool-size=1 # The minimum size of the pool.</span><br><span class="line">spring.jta.atomikos.connectionfactory.reap-timeout=0 # The reap timeout, in seconds, for borrowed connections. 0 denotes no limit.</span><br><span class="line">spring.jta.atomikos.connectionfactory.unique-resource-name=jmsConnectionFactory # The unique name used to identify the resource during recovery.</span><br><span class="line">spring.jta.atomikos.datasource.borrow-connection-timeout=30 # Timeout, in seconds, for borrowing connections from the pool.</span><br><span class="line">spring.jta.atomikos.datasource.default-isolation-level= # Default isolation level of connections provided by the pool.</span><br><span class="line">spring.jta.atomikos.datasource.login-timeout= # Timeout, in seconds, for establishing a database connection.</span><br><span class="line">spring.jta.atomikos.datasource.maintenance-interval=60 # The time, in seconds, between runs of the pool's maintenance thread.</span><br><span class="line">spring.jta.atomikos.datasource.max-idle-time=60 # The time, in seconds, after which connections are cleaned up from the pool.</span><br><span class="line">spring.jta.atomikos.datasource.max-lifetime=0 # The time, in seconds, that a connection can be pooled for before being destroyed. 0 denotes no limit.</span><br><span class="line">spring.jta.atomikos.datasource.max-pool-size=1 # The maximum size of the pool.</span><br><span class="line">spring.jta.atomikos.datasource.min-pool-size=1 # The minimum size of the pool.</span><br><span class="line">spring.jta.atomikos.datasource.reap-timeout=0 # The reap timeout, in seconds, for borrowed connections. 0 denotes no limit.</span><br><span class="line">spring.jta.atomikos.datasource.test-query= # SQL query or statement used to validate a connection before returning it.</span><br><span class="line">spring.jta.atomikos.datasource.unique-resource-name=dataSource # The unique name used to identify the resource during recovery.</span><br><span class="line">spring.jta.atomikos.properties.checkpoint-interval=500 # Interval between checkpoints.</span><br><span class="line">spring.jta.atomikos.properties.console-file-count=1 # Number of debug logs files that can be created.</span><br><span class="line">spring.jta.atomikos.properties.console-file-limit=-1 # How many bytes can be stored at most in debug logs files.</span><br><span class="line">spring.jta.atomikos.properties.console-file-name=tm.out # Debug logs file name.</span><br><span class="line">spring.jta.atomikos.properties.console-log-level=warn # Console log level.</span><br><span class="line">spring.jta.atomikos.properties.default-jta-timeout=10000 # Default timeout for JTA transactions.</span><br><span class="line">spring.jta.atomikos.properties.enable-logging=true # Enable disk logging.</span><br><span class="line">spring.jta.atomikos.properties.force-shutdown-on-vm-exit=false # Specify if a VM shutdown should trigger forced shutdown of the transaction core.</span><br><span class="line">spring.jta.atomikos.properties.log-base-dir= # Directory in which the log files should be stored.</span><br><span class="line">spring.jta.atomikos.properties.log-base-name=tmlog # Transactions log file base name.</span><br><span class="line">spring.jta.atomikos.properties.max-actives=50 # Maximum number of active transactions.</span><br><span class="line">spring.jta.atomikos.properties.max-timeout=300000 # Maximum timeout (in milliseconds) that can be allowed for transactions.</span><br><span class="line">spring.jta.atomikos.properties.output-dir= # Directory in which to store the debug log files.</span><br><span class="line">spring.jta.atomikos.properties.serial-jta-transactions=true # Specify if sub-transactions should be joined when possible.</span><br><span class="line">spring.jta.atomikos.properties.service= # Transaction manager implementation that should be started.</span><br><span class="line">spring.jta.atomikos.properties.threaded-two-phase-commit=true # Use different (and concurrent) threads for two-phase commit on the participating resources.</span><br><span class="line">spring.jta.atomikos.properties.transaction-manager-unique-name= # Transaction manager's unique name.</span><br><span class="line"></span><br><span class="line"># BITRONIX</span><br><span class="line">spring.jta.bitronix.connectionfactory.acquire-increment=1 # Number of connections to create when growing the pool.</span><br><span class="line">spring.jta.bitronix.connectionfactory.acquisition-interval=1 # Time, in seconds, to wait before trying to acquire a connection again after an invalid connection was acquired.</span><br><span class="line">spring.jta.bitronix.connectionfactory.acquisition-timeout=30 # Timeout, in seconds, for acquiring connections from the pool.</span><br><span class="line">spring.jta.bitronix.connectionfactory.allow-local-transactions=true # Whether or not the transaction manager should allow mixing XA and non-XA transactions.</span><br><span class="line">spring.jta.bitronix.connectionfactory.apply-transaction-timeout=false # Whether or not the transaction timeout should be set on the XAResource when it is enlisted.</span><br><span class="line">spring.jta.bitronix.connectionfactory.automatic-enlisting-enabled=true # Whether or not resources should be enlisted and delisted automatically.</span><br><span class="line">spring.jta.bitronix.connectionfactory.cache-producers-consumers=true # Whether or not produces and consumers should be cached.</span><br><span class="line">spring.jta.bitronix.connectionfactory.defer-connection-release=true # Whether or not the provider can run many transactions on the same connection and supports transaction interleaving.</span><br><span class="line">spring.jta.bitronix.connectionfactory.ignore-recovery-failures=false # Whether or not recovery failures should be ignored.</span><br><span class="line">spring.jta.bitronix.connectionfactory.max-idle-time=60 # The time, in seconds, after which connections are cleaned up from the pool.</span><br><span class="line">spring.jta.bitronix.connectionfactory.max-pool-size=10 # The maximum size of the pool. 0 denotes no limit.</span><br><span class="line">spring.jta.bitronix.connectionfactory.min-pool-size=0 # The minimum size of the pool.</span><br><span class="line">spring.jta.bitronix.connectionfactory.password= # The password to use to connect to the JMS provider.</span><br><span class="line">spring.jta.bitronix.connectionfactory.share-transaction-connections=false #  Whether or not connections in the ACCESSIBLE state can be shared within the context of a transaction.</span><br><span class="line">spring.jta.bitronix.connectionfactory.test-connections=true # Whether or not connections should be tested when acquired from the pool.</span><br><span class="line">spring.jta.bitronix.connectionfactory.two-pc-ordering-position=1 # The position that this resource should take during two-phase commit (always first is Integer.MIN_VALUE, always last is Integer.MAX_VALUE).</span><br><span class="line">spring.jta.bitronix.connectionfactory.unique-name=jmsConnectionFactory # The unique name used to identify the resource during recovery.</span><br><span class="line">spring.jta.bitronix.connectionfactory.use-tm-join=true Whether or not TMJOIN should be used when starting XAResources.</span><br><span class="line">spring.jta.bitronix.connectionfactory.user= # The user to use to connect to the JMS provider.</span><br><span class="line">spring.jta.bitronix.datasource.acquire-increment=1 # Number of connections to create when growing the pool.</span><br><span class="line">spring.jta.bitronix.datasource.acquisition-interval=1 # Time, in seconds, to wait before trying to acquire a connection again after an invalid connection was acquired.</span><br><span class="line">spring.jta.bitronix.datasource.acquisition-timeout=30 # Timeout, in seconds, for acquiring connections from the pool.</span><br><span class="line">spring.jta.bitronix.datasource.allow-local-transactions=true # Whether or not the transaction manager should allow mixing XA and non-XA transactions.</span><br><span class="line">spring.jta.bitronix.datasource.apply-transaction-timeout=false # Whether or not the transaction timeout should be set on the XAResource when it is enlisted.</span><br><span class="line">spring.jta.bitronix.datasource.automatic-enlisting-enabled=true # Whether or not resources should be enlisted and delisted automatically.</span><br><span class="line">spring.jta.bitronix.datasource.cursor-holdability= # The default cursor holdability for connections.</span><br><span class="line">spring.jta.bitronix.datasource.defer-connection-release=true # Whether or not the database can run many transactions on the same connection and supports transaction interleaving.</span><br><span class="line">spring.jta.bitronix.datasource.enable-jdbc4-connection-test= # Whether or not Connection.isValid() is called when acquiring a connection from the pool.</span><br><span class="line">spring.jta.bitronix.datasource.ignore-recovery-failures=false # Whether or not recovery failures should be ignored.</span><br><span class="line">spring.jta.bitronix.datasource.isolation-level= # The default isolation level for connections.</span><br><span class="line">spring.jta.bitronix.datasource.local-auto-commit= # The default auto-commit mode for local transactions.</span><br><span class="line">spring.jta.bitronix.datasource.login-timeout= # Timeout, in seconds, for establishing a database connection.</span><br><span class="line">spring.jta.bitronix.datasource.max-idle-time=60 # The time, in seconds, after which connections are cleaned up from the pool.</span><br><span class="line">spring.jta.bitronix.datasource.max-pool-size=10 # The maximum size of the pool. 0 denotes no limit.</span><br><span class="line">spring.jta.bitronix.datasource.min-pool-size=0 # The minimum size of the pool.</span><br><span class="line">spring.jta.bitronix.datasource.prepared-statement-cache-size=0 # The target size of the prepared statement cache. 0 disables the cache.</span><br><span class="line">spring.jta.bitronix.datasource.share-transaction-connections=false #  Whether or not connections in the ACCESSIBLE state can be shared within the context of a transaction.</span><br><span class="line">spring.jta.bitronix.datasource.test-query= # SQL query or statement used to validate a connection before returning it.</span><br><span class="line">spring.jta.bitronix.datasource.two-pc-ordering-position=1 # The position that this resource should take during two-phase commit (always first is Integer.MIN_VALUE, always last is Integer.MAX_VALUE).</span><br><span class="line">spring.jta.bitronix.datasource.unique-name=dataSource # The unique name used to identify the resource during recovery.</span><br><span class="line">spring.jta.bitronix.datasource.use-tm-join=true Whether or not TMJOIN should be used when starting XAResources.</span><br><span class="line">spring.jta.bitronix.properties.allow-multiple-lrc=false # Allow multiple LRC resources to be enlisted into the same transaction.</span><br><span class="line">spring.jta.bitronix.properties.asynchronous2-pc=false # Enable asynchronously execution of two phase commit.</span><br><span class="line">spring.jta.bitronix.properties.background-recovery-interval-seconds=60 # Interval in seconds at which to run the recovery process in the background.</span><br><span class="line">spring.jta.bitronix.properties.current-node-only-recovery=true # Recover only the current node.</span><br><span class="line">spring.jta.bitronix.properties.debug-zero-resource-transaction=false # Log the creation and commit call stacks of transactions executed without a single enlisted resource.</span><br><span class="line">spring.jta.bitronix.properties.default-transaction-timeout=60 # Default transaction timeout in seconds.</span><br><span class="line">spring.jta.bitronix.properties.disable-jmx=false # Enable JMX support.</span><br><span class="line">spring.jta.bitronix.properties.exception-analyzer= # Set the fully qualified name of the exception analyzer implementation to use.</span><br><span class="line">spring.jta.bitronix.properties.filter-log-status=false # Enable filtering of logs so that only mandatory logs are written.</span><br><span class="line">spring.jta.bitronix.properties.force-batching-enabled=true #  Set if disk forces are batched.</span><br><span class="line">spring.jta.bitronix.properties.forced-write-enabled=true # Set if logs are forced to disk.</span><br><span class="line">spring.jta.bitronix.properties.graceful-shutdown-interval=60 # Maximum amount of seconds the TM will wait for transactions to get done before aborting them at shutdown time.</span><br><span class="line">spring.jta.bitronix.properties.jndi-transaction-synchronization-registry-name= # JNDI name of the TransactionSynchronizationRegistry.</span><br><span class="line">spring.jta.bitronix.properties.jndi-user-transaction-name= # JNDI name of the UserTransaction.</span><br><span class="line">spring.jta.bitronix.properties.journal=disk # Name of the journal. Can be 'disk', 'null' or a class name.</span><br><span class="line">spring.jta.bitronix.properties.log-part1-filename=btm1.tlog # Name of the first fragment of the journal.</span><br><span class="line">spring.jta.bitronix.properties.log-part2-filename=btm2.tlog # Name of the second fragment of the journal.</span><br><span class="line">spring.jta.bitronix.properties.max-log-size-in-mb=2 # Maximum size in megabytes of the journal fragments.</span><br><span class="line">spring.jta.bitronix.properties.resource-configuration-filename= # ResourceLoader configuration file name.</span><br><span class="line">spring.jta.bitronix.properties.server-id= # ASCII ID that must uniquely identify this TM instance. Default to the machine's IP address.</span><br><span class="line">spring.jta.bitronix.properties.skip-corrupted-logs=false # Skip corrupted transactions log entries.</span><br><span class="line">spring.jta.bitronix.properties.warn-about-zero-resource-transaction=true # Log a warning for transactions executed without a single enlisted resource.</span><br><span class="line"></span><br><span class="line"># NARAYANA (NarayanaProperties)</span><br><span class="line">spring.jta.narayana.default-timeout=60 # Transaction timeout in seconds.</span><br><span class="line">spring.jta.narayana.expiry-scanners=com.arjuna.ats.internal.arjuna.recovery.ExpiredTransactionStatusManagerScanner # Comma-separated list of expiry scanners.</span><br><span class="line">spring.jta.narayana.log-dir= # Transaction object store directory.</span><br><span class="line">spring.jta.narayana.one-phase-commit=true # Enable one phase commit optimisation.</span><br><span class="line">spring.jta.narayana.periodic-recovery-period=120 # Interval in which periodic recovery scans are performed in seconds.</span><br><span class="line">spring.jta.narayana.recovery-backoff-period=10 # Back off period between first and second phases of the recovery scan in seconds.</span><br><span class="line">spring.jta.narayana.recovery-db-pass= # Database password to be used by recovery manager.</span><br><span class="line">spring.jta.narayana.recovery-db-user= # Database username to be used by recovery manager.</span><br><span class="line">spring.jta.narayana.recovery-jms-pass= # JMS password to be used by recovery manager.</span><br><span class="line">spring.jta.narayana.recovery-jms-user= # JMS username to be used by recovery manager.</span><br><span class="line">spring.jta.narayana.recovery-modules= # Comma-separated list of recovery modules.</span><br><span class="line">spring.jta.narayana.transaction-manager-id=1 # Unique transaction manager id.</span><br><span class="line">spring.jta.narayana.xa-resource-orphan-filters= # Comma-separated list of orphan filters.</span><br><span class="line"></span><br><span class="line"># EMBEDDED MONGODB (EmbeddedMongoProperties)</span><br><span class="line">spring.mongodb.embedded.features=SYNC_DELAY # Comma-separated list of features to enable.</span><br><span class="line">spring.mongodb.embedded.storage.database-dir= # Directory used for data storage.</span><br><span class="line">spring.mongodb.embedded.storage.oplog-size= # Maximum size of the oplog in megabytes.</span><br><span class="line">spring.mongodb.embedded.storage.repl-set-name= # Name of the replica set.</span><br><span class="line">spring.mongodb.embedded.version=2.6.10 # Version of Mongo to use.</span><br><span class="line"></span><br><span class="line"># REDIS (RedisProperties)</span><br><span class="line">spring.redis.cluster.max-redirects= # Maximum number of redirects to follow when executing commands across the cluster.</span><br><span class="line">spring.redis.cluster.nodes= # Comma-separated list of "host:port" pairs to bootstrap from.</span><br><span class="line">spring.redis.database=0 # Database index used by the connection factory.</span><br><span class="line">spring.redis.url= # Connection URL, will override host, port and password (user will be ignored), e.g. redis://user:password@example.com:6379</span><br><span class="line">spring.redis.host=localhost # Redis server host.</span><br><span class="line">spring.redis.password= # Login password of the redis server.</span><br><span class="line">spring.redis.ssl=false # Enable SSL support.</span><br><span class="line">spring.redis.pool.max-active=8 # Max number of connections that can be allocated by the pool at a given time. Use a negative value for no limit.</span><br><span class="line">spring.redis.pool.max-idle=8 # Max number of "idle" connections in the pool. Use a negative value to indicate an unlimited number of idle connections.</span><br><span class="line">spring.redis.pool.max-wait=-1 # Maximum amount of time (in milliseconds) a connection allocation should block before throwing an exception when the pool is exhausted. Use a negative value to block indefinitely.</span><br><span class="line">spring.redis.pool.min-idle=0 # Target for the minimum number of idle connections to maintain in the pool. This setting only has an effect if it is positive.</span><br><span class="line">spring.redis.port=6379 # Redis server port.</span><br><span class="line">spring.redis.sentinel.master= # Name of Redis server.</span><br><span class="line">spring.redis.sentinel.nodes= # Comma-separated list of host:port pairs.</span><br><span class="line">spring.redis.timeout=0 # Connection timeout in milliseconds.</span><br><span class="line"></span><br><span class="line"># TRANSACTION (TransactionProperties)</span><br><span class="line">spring.transaction.default-timeout= # Default transaction timeout in seconds.</span><br><span class="line">spring.transaction.rollback-on-commit-failure= # Perform the rollback on commit failures.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># ----------------------------------------</span><br><span class="line"># INTEGRATION PROPERTIES</span><br><span class="line"># ----------------------------------------</span><br><span class="line"></span><br><span class="line"># ACTIVEMQ (ActiveMQProperties)</span><br><span class="line">spring.activemq.broker-url= # URL of the ActiveMQ broker. Auto-generated by default. For instance `tcp://localhost:61616`</span><br><span class="line">spring.activemq.in-memory=true # Specify if the default broker URL should be in memory. Ignored if an explicit broker has been specified.</span><br><span class="line">spring.activemq.password= # Login password of the broker.</span><br><span class="line">spring.activemq.user= # Login user of the broker.</span><br><span class="line">spring.activemq.packages.trust-all=false # Trust all packages.</span><br><span class="line">spring.activemq.packages.trusted= # Comma-separated list of specific packages to trust (when not trusting all packages).</span><br><span class="line">spring.activemq.pool.configuration.*= # See PooledConnectionFactory.</span><br><span class="line">spring.activemq.pool.enabled=false # Whether a PooledConnectionFactory should be created instead of a regular ConnectionFactory.</span><br><span class="line">spring.activemq.pool.expiry-timeout=0 # Connection expiration timeout in milliseconds.</span><br><span class="line">spring.activemq.pool.idle-timeout=30000 # Connection idle timeout in milliseconds.</span><br><span class="line">spring.activemq.pool.max-connections=1 # Maximum number of pooled connections.</span><br><span class="line"></span><br><span class="line"># ARTEMIS (ArtemisProperties)</span><br><span class="line">spring.artemis.embedded.cluster-password= # Cluster password. Randomly generated on startup by default.</span><br><span class="line">spring.artemis.embedded.data-directory= # Journal file directory. Not necessary if persistence is turned off.</span><br><span class="line">spring.artemis.embedded.enabled=true # Enable embedded mode if the Artemis server APIs are available.</span><br><span class="line">spring.artemis.embedded.persistent=false # Enable persistent store.</span><br><span class="line">spring.artemis.embedded.queues= # Comma-separated list of queues to create on startup.</span><br><span class="line">spring.artemis.embedded.server-id= # Server id. By default, an auto-incremented counter is used.</span><br><span class="line">spring.artemis.embedded.topics= # Comma-separated list of topics to create on startup.</span><br><span class="line">spring.artemis.host=localhost # Artemis broker host.</span><br><span class="line">spring.artemis.mode= # Artemis deployment mode, auto-detected by default.</span><br><span class="line">spring.artemis.password= # Login password of the broker.</span><br><span class="line">spring.artemis.port=61616 # Artemis broker port.</span><br><span class="line">spring.artemis.user= # Login user of the broker.</span><br><span class="line"></span><br><span class="line"># SPRING BATCH (BatchProperties)</span><br><span class="line">spring.batch.initializer.enabled= # Create the required batch tables on startup if necessary. Enabled automatically if no custom table prefix is set or if a custom schema is configured.</span><br><span class="line">spring.batch.job.enabled=true # Execute all Spring Batch jobs in the context on startup.</span><br><span class="line">spring.batch.job.names= # Comma-separated list of job names to execute on startup (For instance `job1,job2`). By default, all Jobs found in the context are executed.</span><br><span class="line">spring.batch.schema=classpath:org/springframework/batch/core/schema-@@platform@@.sql # Path to the SQL file to use to initialize the database schema.</span><br><span class="line">spring.batch.table-prefix= # Table prefix for all the batch meta-data tables.</span><br><span class="line"></span><br><span class="line"># JMS (JmsProperties)</span><br><span class="line">spring.jms.jndi-name= # Connection factory JNDI name. When set, takes precedence to others connection factory auto-configurations.</span><br><span class="line">spring.jms.listener.acknowledge-mode= # Acknowledge mode of the container. By default, the listener is transacted with automatic acknowledgment.</span><br><span class="line">spring.jms.listener.auto-startup=true # Start the container automatically on startup.</span><br><span class="line">spring.jms.listener.concurrency= # Minimum number of concurrent consumers.</span><br><span class="line">spring.jms.listener.max-concurrency= # Maximum number of concurrent consumers.</span><br><span class="line">spring.jms.pub-sub-domain=false # Specify if the default destination type is topic.</span><br><span class="line">spring.jms.template.default-destination= # Default destination to use on send/receive operations that do not have a destination parameter.</span><br><span class="line">spring.jms.template.delivery-delay= # Delivery delay to use for send calls in milliseconds.</span><br><span class="line">spring.jms.template.delivery-mode= # Delivery mode. Enable QoS when set.</span><br><span class="line">spring.jms.template.priority= # Priority of a message when sending. Enable QoS when set.</span><br><span class="line">spring.jms.template.qos-enabled= # Enable explicit QoS when sending a message.</span><br><span class="line">spring.jms.template.receive-timeout= # Timeout to use for receive calls in milliseconds.</span><br><span class="line">spring.jms.template.time-to-live= # Time-to-live of a message when sending in milliseconds. Enable QoS when set.</span><br><span class="line"></span><br><span class="line"># APACHE KAFKA (KafkaProperties)</span><br><span class="line">spring.kafka.bootstrap-servers= # Comma-delimited list of host:port pairs to use for establishing the initial connection to the Kafka cluster.</span><br><span class="line">spring.kafka.client-id= # Id to pass to the server when making requests; used for server-side logging.</span><br><span class="line">spring.kafka.consumer.auto-commit-interval= # Frequency in milliseconds that the consumer offsets are auto-committed to Kafka if 'enable.auto.commit' true.</span><br><span class="line">spring.kafka.consumer.auto-offset-reset= # What to do when there is no initial offset in Kafka or if the current offset does not exist any more on the server.</span><br><span class="line">spring.kafka.consumer.bootstrap-servers= # Comma-delimited list of host:port pairs to use for establishing the initial connection to the Kafka cluster.</span><br><span class="line">spring.kafka.consumer.client-id= # Id to pass to the server when making requests; used for server-side logging.</span><br><span class="line">spring.kafka.consumer.enable-auto-commit= # If true the consumer's offset will be periodically committed in the background.</span><br><span class="line">spring.kafka.consumer.fetch-max-wait= # Maximum amount of time in milliseconds the server will block before answering the fetch request if there isn't sufficient data to immediately satisfy the requirement given by "fetch.min.bytes".</span><br><span class="line">spring.kafka.consumer.fetch-min-size= # Minimum amount of data the server should return for a fetch request in bytes.</span><br><span class="line">spring.kafka.consumer.group-id= # Unique string that identifies the consumer group this consumer belongs to.</span><br><span class="line">spring.kafka.consumer.heartbeat-interval= # Expected time in milliseconds between heartbeats to the consumer coordinator.</span><br><span class="line">spring.kafka.consumer.key-deserializer= # Deserializer class for keys.</span><br><span class="line">spring.kafka.consumer.max-poll-records= # Maximum number of records returned in a single call to poll().</span><br><span class="line">spring.kafka.consumer.value-deserializer= # Deserializer class for values.</span><br><span class="line">spring.kafka.listener.ack-count= # Number of records between offset commits when ackMode is "COUNT" or "COUNT_TIME".</span><br><span class="line">spring.kafka.listener.ack-mode= # Listener AckMode; see the spring-kafka documentation.</span><br><span class="line">spring.kafka.listener.ack-time= # Time in milliseconds between offset commits when ackMode is "TIME" or "COUNT_TIME".</span><br><span class="line">spring.kafka.listener.concurrency= # Number of threads to run in the listener containers.</span><br><span class="line">spring.kafka.listener.poll-timeout= # Timeout in milliseconds to use when polling the consumer.</span><br><span class="line">spring.kafka.producer.acks= # Number of acknowledgments the producer requires the leader to have received before considering a request complete.</span><br><span class="line">spring.kafka.producer.batch-size= # Number of records to batch before sending.</span><br><span class="line">spring.kafka.producer.bootstrap-servers= # Comma-delimited list of host:port pairs to use for establishing the initial connection to the Kafka cluster.</span><br><span class="line">spring.kafka.producer.buffer-memory= # Total bytes of memory the producer can use to buffer records waiting to be sent to the server.</span><br><span class="line">spring.kafka.producer.client-id= # Id to pass to the server when making requests; used for server-side logging.</span><br><span class="line">spring.kafka.producer.compression-type= # Compression type for all data generated by the producer.</span><br><span class="line">spring.kafka.producer.key-serializer= # Serializer class for keys.</span><br><span class="line">spring.kafka.producer.retries= # When greater than zero, enables retrying of failed sends.</span><br><span class="line">spring.kafka.producer.value-serializer= # Serializer class for values.</span><br><span class="line">spring.kafka.properties.*= # Additional properties used to configure the client.</span><br><span class="line">spring.kafka.ssl.key-password= # Password of the private key in the key store file.</span><br><span class="line">spring.kafka.ssl.keystore-location= # Location of the key store file.</span><br><span class="line">spring.kafka.ssl.keystore-password= # Store password for the key store file.</span><br><span class="line">spring.kafka.ssl.truststore-location= # Location of the trust store file.</span><br><span class="line">spring.kafka.ssl.truststore-password= # Store password for the trust store file.</span><br><span class="line">spring.kafka.template.default-topic= # Default topic to which messages will be sent.</span><br><span class="line"></span><br><span class="line"># RABBIT (RabbitProperties)</span><br><span class="line">spring.rabbitmq.addresses= # Comma-separated list of addresses to which the client should connect.</span><br><span class="line">spring.rabbitmq.cache.channel.checkout-timeout= # Number of milliseconds to wait to obtain a channel if the cache size has been reached.</span><br><span class="line">spring.rabbitmq.cache.channel.size= # Number of channels to retain in the cache.</span><br><span class="line">spring.rabbitmq.cache.connection.mode=channel # Connection factory cache mode.</span><br><span class="line">spring.rabbitmq.cache.connection.size= # Number of connections to cache.</span><br><span class="line">spring.rabbitmq.connection-timeout= # Connection timeout, in milliseconds; zero for infinite.</span><br><span class="line">spring.rabbitmq.dynamic=true # Create an AmqpAdmin bean.</span><br><span class="line">spring.rabbitmq.host=localhost # RabbitMQ host.</span><br><span class="line">spring.rabbitmq.listener.acknowledge-mode= # Acknowledge mode of container.</span><br><span class="line">spring.rabbitmq.listener.auto-startup=true # Start the container automatically on startup.</span><br><span class="line">spring.rabbitmq.listener.concurrency= # Minimum number of consumers.</span><br><span class="line">spring.rabbitmq.listener.default-requeue-rejected= # Whether or not to requeue delivery failures; default `true`.</span><br><span class="line">spring.rabbitmq.listener.idle-event-interval= # How often idle container events should be published in milliseconds.</span><br><span class="line">spring.rabbitmq.listener.max-concurrency= # Maximum number of consumers.</span><br><span class="line">spring.rabbitmq.listener.prefetch= # Number of messages to be handled in a single request. It should be greater than or equal to the transaction size (if used).</span><br><span class="line">spring.rabbitmq.listener.retry.enabled=false # Whether or not publishing retries are enabled.</span><br><span class="line">spring.rabbitmq.listener.retry.initial-interval=1000 # Interval between the first and second attempt to deliver a message.</span><br><span class="line">spring.rabbitmq.listener.retry.max-attempts=3 # Maximum number of attempts to deliver a message.</span><br><span class="line">spring.rabbitmq.listener.retry.max-interval=10000 # Maximum interval between attempts.</span><br><span class="line">spring.rabbitmq.listener.retry.multiplier=1.0 # A multiplier to apply to the previous delivery retry interval.</span><br><span class="line">spring.rabbitmq.listener.retry.stateless=true # Whether or not retry is stateless or stateful.</span><br><span class="line">spring.rabbitmq.listener.transaction-size= # Number of messages to be processed in a transaction. For best results it should be less than or equal to the prefetch count.</span><br><span class="line">spring.rabbitmq.password= # Login to authenticate against the broker.</span><br><span class="line">spring.rabbitmq.port=5672 # RabbitMQ port.</span><br><span class="line">spring.rabbitmq.publisher-confirms=false # Enable publisher confirms.</span><br><span class="line">spring.rabbitmq.publisher-returns=false # Enable publisher returns.</span><br><span class="line">spring.rabbitmq.requested-heartbeat= # Requested heartbeat timeout, in seconds; zero for none.</span><br><span class="line">spring.rabbitmq.ssl.enabled=false # Enable SSL support.</span><br><span class="line">spring.rabbitmq.ssl.key-store= # Path to the key store that holds the SSL certificate.</span><br><span class="line">spring.rabbitmq.ssl.key-store-password= # Password used to access the key store.</span><br><span class="line">spring.rabbitmq.ssl.trust-store= # Trust store that holds SSL certificates.</span><br><span class="line">spring.rabbitmq.ssl.trust-store-password= # Password used to access the trust store.</span><br><span class="line">spring.rabbitmq.ssl.algorithm= # SSL algorithm to use. By default configure by the rabbit client library.</span><br><span class="line">spring.rabbitmq.template.mandatory=false # Enable mandatory messages.</span><br><span class="line">spring.rabbitmq.template.receive-timeout=0 # Timeout for `receive()` methods.</span><br><span class="line">spring.rabbitmq.template.reply-timeout=5000 # Timeout for `sendAndReceive()` methods.</span><br><span class="line">spring.rabbitmq.template.retry.enabled=false # Set to true to enable retries in the `RabbitTemplate`.</span><br><span class="line">spring.rabbitmq.template.retry.initial-interval=1000 # Interval between the first and second attempt to publish a message.</span><br><span class="line">spring.rabbitmq.template.retry.max-attempts=3 # Maximum number of attempts to publish a message.</span><br><span class="line">spring.rabbitmq.template.retry.max-interval=10000 # Maximum number of attempts to publish a message.</span><br><span class="line">spring.rabbitmq.template.retry.multiplier=1.0 # A multiplier to apply to the previous publishing retry interval.</span><br><span class="line">spring.rabbitmq.username= # Login user to authenticate to the broker.</span><br><span class="line">spring.rabbitmq.virtual-host= # Virtual host to use when connecting to the broker.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># ----------------------------------------</span><br><span class="line"># ACTUATOR PROPERTIES</span><br><span class="line"># ----------------------------------------</span><br><span class="line"></span><br><span class="line"># ENDPOINTS (AbstractEndpoint subclasses)</span><br><span class="line">endpoints.enabled=true # Enable endpoints.</span><br><span class="line">endpoints.sensitive= # Default endpoint sensitive setting.</span><br><span class="line">endpoints.actuator.enabled=true # Enable the endpoint.</span><br><span class="line">endpoints.actuator.path= # Endpoint URL path.</span><br><span class="line">endpoints.actuator.sensitive=false # Enable security on the endpoint.</span><br><span class="line">endpoints.auditevents.enabled= # Enable the endpoint.</span><br><span class="line">endpoints.auditevents.path= # Endpoint path.</span><br><span class="line">endpoints.auditevents.sensitive=false # Enable security on the endpoint.</span><br><span class="line">endpoints.autoconfig.enabled= # Enable the endpoint.</span><br><span class="line">endpoints.autoconfig.id= # Endpoint identifier.</span><br><span class="line">endpoints.autoconfig.path= # Endpoint path.</span><br><span class="line">endpoints.autoconfig.sensitive= # Mark if the endpoint exposes sensitive information.</span><br><span class="line">endpoints.beans.enabled= # Enable the endpoint.</span><br><span class="line">endpoints.beans.id= # Endpoint identifier.</span><br><span class="line">endpoints.beans.path= # Endpoint path.</span><br><span class="line">endpoints.beans.sensitive= # Mark if the endpoint exposes sensitive information.</span><br><span class="line">endpoints.configprops.enabled= # Enable the endpoint.</span><br><span class="line">endpoints.configprops.id= # Endpoint identifier.</span><br><span class="line">endpoints.configprops.keys-to-sanitize=password,secret,key,token,.*credentials.*,vcap_services # Keys that should be sanitized. Keys can be simple strings that the property ends with or regex expressions.</span><br><span class="line">endpoints.configprops.path= # Endpoint path.</span><br><span class="line">endpoints.configprops.sensitive= # Mark if the endpoint exposes sensitive information.</span><br><span class="line">endpoints.docs.curies.enabled=false # Enable the curie generation.</span><br><span class="line">endpoints.docs.enabled=true # Enable actuator docs endpoint.</span><br><span class="line">endpoints.docs.path=/docs #</span><br><span class="line">endpoints.docs.sensitive=false #</span><br><span class="line">endpoints.dump.enabled= # Enable the endpoint.</span><br><span class="line">endpoints.dump.id= # Endpoint identifier.</span><br><span class="line">endpoints.dump.path= # Endpoint path.</span><br><span class="line">endpoints.dump.sensitive= # Mark if the endpoint exposes sensitive information.</span><br><span class="line">endpoints.env.enabled= # Enable the endpoint.</span><br><span class="line">endpoints.env.id= # Endpoint identifier.</span><br><span class="line">endpoints.env.keys-to-sanitize=password,secret,key,token,.*credentials.*,vcap_services # Keys that should be sanitized. Keys can be simple strings that the property ends with or regex expressions.</span><br><span class="line">endpoints.env.path= # Endpoint path.</span><br><span class="line">endpoints.env.sensitive= # Mark if the endpoint exposes sensitive information.</span><br><span class="line">endpoints.flyway.enabled= # Enable the endpoint.</span><br><span class="line">endpoints.flyway.id= # Endpoint identifier.</span><br><span class="line">endpoints.flyway.sensitive= # Mark if the endpoint exposes sensitive information.</span><br><span class="line">endpoints.health.enabled= # Enable the endpoint.</span><br><span class="line">endpoints.health.id= # Endpoint identifier.</span><br><span class="line">endpoints.health.mapping.*= # Mapping of health statuses to HttpStatus codes. By default, registered health statuses map to sensible defaults (i.e. UP maps to 200).</span><br><span class="line">endpoints.health.path= # Endpoint path.</span><br><span class="line">endpoints.health.sensitive= # Mark if the endpoint exposes sensitive information.</span><br><span class="line">endpoints.health.time-to-live=1000 # Time to live for cached result, in milliseconds.</span><br><span class="line">endpoints.heapdump.enabled= # Enable the endpoint.</span><br><span class="line">endpoints.heapdump.path= # Endpoint path.</span><br><span class="line">endpoints.heapdump.sensitive= # Mark if the endpoint exposes sensitive information.</span><br><span class="line">endpoints.hypermedia.enabled=false # Enable hypermedia support for endpoints.</span><br><span class="line">endpoints.info.enabled= # Enable the endpoint.</span><br><span class="line">endpoints.info.id= # Endpoint identifier.</span><br><span class="line">endpoints.info.path= # Endpoint path.</span><br><span class="line">endpoints.info.sensitive= # Mark if the endpoint exposes sensitive information.</span><br><span class="line">endpoints.jolokia.enabled=true # Enable Jolokia endpoint.</span><br><span class="line">endpoints.jolokia.path=/jolokia # Endpoint URL path.</span><br><span class="line">endpoints.jolokia.sensitive=true # Enable security on the endpoint.</span><br><span class="line">endpoints.liquibase.enabled= # Enable the endpoint.</span><br><span class="line">endpoints.liquibase.id= # Endpoint identifier.</span><br><span class="line">endpoints.liquibase.sensitive= # Mark if the endpoint exposes sensitive information.</span><br><span class="line">endpoints.logfile.enabled=true # Enable the endpoint.</span><br><span class="line">endpoints.logfile.external-file= # External Logfile to be accessed.</span><br><span class="line">endpoints.logfile.path=/logfile # Endpoint URL path.</span><br><span class="line">endpoints.logfile.sensitive=true # Enable security on the endpoint.</span><br><span class="line">endpoints.loggers.enabled=true # Enable the endpoint.</span><br><span class="line">endpoints.loggers.id= # Endpoint identifier.</span><br><span class="line">endpoints.loggers.path=/logfile # Endpoint path.</span><br><span class="line">endpoints.loggers.sensitive=true # Mark if the endpoint exposes sensitive information.</span><br><span class="line">endpoints.mappings.enabled= # Enable the endpoint.</span><br><span class="line">endpoints.mappings.id= # Endpoint identifier.</span><br><span class="line">endpoints.mappings.path= # Endpoint path.</span><br><span class="line">endpoints.mappings.sensitive= # Mark if the endpoint exposes sensitive information.</span><br><span class="line">endpoints.metrics.enabled= # Enable the endpoint.</span><br><span class="line">endpoints.metrics.filter.enabled=true # Enable the metrics servlet filter.</span><br><span class="line">endpoints.metrics.filter.gauge-submissions=merged # Http filter gauge submissions (merged, per-http-method)</span><br><span class="line">endpoints.metrics.filter.counter-submissions=merged # Http filter counter submissions (merged, per-http-method)</span><br><span class="line">endpoints.metrics.id= # Endpoint identifier.</span><br><span class="line">endpoints.metrics.path= # Endpoint path.</span><br><span class="line">endpoints.metrics.sensitive= # Mark if the endpoint exposes sensitive information.</span><br><span class="line">endpoints.shutdown.enabled= # Enable the endpoint.</span><br><span class="line">endpoints.shutdown.id= # Endpoint identifier.</span><br><span class="line">endpoints.shutdown.path= # Endpoint path.</span><br><span class="line">endpoints.shutdown.sensitive= # Mark if the endpoint exposes sensitive information.</span><br><span class="line">endpoints.trace.enabled= # Enable the endpoint.</span><br><span class="line">endpoints.trace.id= # Endpoint identifier.</span><br><span class="line">endpoints.trace.path= # Endpoint path.</span><br><span class="line">endpoints.trace.sensitive= # Mark if the endpoint exposes sensitive information.</span><br><span class="line"></span><br><span class="line"># ENDPOINTS CORS CONFIGURATION (EndpointCorsProperties)</span><br><span class="line">endpoints.cors.allow-credentials= # Set whether credentials are supported. When not set, credentials are not supported.</span><br><span class="line">endpoints.cors.allowed-headers= # Comma-separated list of headers to allow in a request. '*' allows all headers.</span><br><span class="line">endpoints.cors.allowed-methods=GET # Comma-separated list of methods to allow. '*' allows all methods.</span><br><span class="line">endpoints.cors.allowed-origins= # Comma-separated list of origins to allow. '*' allows all origins. When not set, CORS support is disabled.</span><br><span class="line">endpoints.cors.exposed-headers= # Comma-separated list of headers to include in a response.</span><br><span class="line">endpoints.cors.max-age=1800 # How long, in seconds, the response from a pre-flight request can be cached by clients.</span><br><span class="line"></span><br><span class="line"># JMX ENDPOINT (EndpointMBeanExportProperties)</span><br><span class="line">endpoints.jmx.domain= # JMX domain name. Initialized with the value of 'spring.jmx.default-domain' if set.</span><br><span class="line">endpoints.jmx.enabled=true # Enable JMX export of all endpoints.</span><br><span class="line">endpoints.jmx.static-names= # Additional static properties to append to all ObjectNames of MBeans representing Endpoints.</span><br><span class="line">endpoints.jmx.unique-names=false # Ensure that ObjectNames are modified in case of conflict.</span><br><span class="line"></span><br><span class="line"># JOLOKIA (JolokiaProperties)</span><br><span class="line">jolokia.config.*= # See Jolokia manual</span><br><span class="line"></span><br><span class="line"># MANAGEMENT HTTP SERVER (ManagementServerProperties)</span><br><span class="line">management.add-application-context-header=true # Add the "X-Application-Context" HTTP header in each response.</span><br><span class="line">management.address= # Network address that the management endpoints should bind to.</span><br><span class="line">management.context-path= # Management endpoint context-path. For instance `/actuator`</span><br><span class="line">management.cloudfoundry.enabled= # Enable extended Cloud Foundry actuator endpoints</span><br><span class="line">management.cloudfoundry.skip-ssl-validation= # Skip SSL verification for Cloud Foundry actuator endpoint security calls</span><br><span class="line">management.port= # Management endpoint HTTP port. Uses the same port as the application by default. Configure a different port to use management-specific SSL.</span><br><span class="line">management.security.enabled=true # Enable security.</span><br><span class="line">management.security.roles=ACTUATOR # Comma-separated list of roles that can access the management endpoint.</span><br><span class="line">management.security.sessions=stateless # Session creating policy to use (always, never, if_required, stateless).</span><br><span class="line">management.ssl.ciphers= # Supported SSL ciphers. Requires a custom management.port.</span><br><span class="line">management.ssl.client-auth= # Whether client authentication is wanted ("want") or needed ("need"). Requires a trust store. Requires a custom management.port.</span><br><span class="line">management.ssl.enabled= # Enable SSL support. Requires a custom management.port.</span><br><span class="line">management.ssl.enabled-protocols= # Enabled SSL protocols. Requires a custom management.port.</span><br><span class="line">management.ssl.key-alias= # Alias that identifies the key in the key store. Requires a custom management.port.</span><br><span class="line">management.ssl.key-password= # Password used to access the key in the key store. Requires a custom management.port.</span><br><span class="line">management.ssl.key-store= # Path to the key store that holds the SSL certificate (typically a jks file). Requires a custom management.port.</span><br><span class="line">management.ssl.key-store-password= # Password used to access the key store. Requires a custom management.port.</span><br><span class="line">management.ssl.key-store-provider= # Provider for the key store. Requires a custom management.port.</span><br><span class="line">management.ssl.key-store-type= # Type of the key store. Requires a custom management.port.</span><br><span class="line">management.ssl.protocol=TLS # SSL protocol to use. Requires a custom management.port.</span><br><span class="line">management.ssl.trust-store= # Trust store that holds SSL certificates. Requires a custom management.port.</span><br><span class="line">management.ssl.trust-store-password= # Password used to access the trust store. Requires a custom management.port.</span><br><span class="line">management.ssl.trust-store-provider= # Provider for the trust store. Requires a custom management.port.</span><br><span class="line">management.ssl.trust-store-type= # Type of the trust store. Requires a custom management.port.</span><br><span class="line"></span><br><span class="line"># HEALTH INDICATORS</span><br><span class="line">management.health.db.enabled=true # Enable database health check.</span><br><span class="line">management.health.cassandra.enabled=true # Enable cassandra health check.</span><br><span class="line">management.health.couchbase.enabled=true # Enable couchbase health check.</span><br><span class="line">management.health.defaults.enabled=true # Enable default health indicators.</span><br><span class="line">management.health.diskspace.enabled=true # Enable disk space health check.</span><br><span class="line">management.health.diskspace.path= # Path used to compute the available disk space.</span><br><span class="line">management.health.diskspace.threshold=0 # Minimum disk space that should be available, in bytes.</span><br><span class="line">management.health.elasticsearch.enabled=true # Enable elasticsearch health check.</span><br><span class="line">management.health.elasticsearch.indices= # Comma-separated index names.</span><br><span class="line">management.health.elasticsearch.response-timeout=100 # The time, in milliseconds, to wait for a response from the cluster.</span><br><span class="line">management.health.jms.enabled=true # Enable JMS health check.</span><br><span class="line">management.health.ldap.enabled=true # Enable LDAP health check.</span><br><span class="line">management.health.mail.enabled=true # Enable Mail health check.</span><br><span class="line">management.health.mongo.enabled=true # Enable MongoDB health check.</span><br><span class="line">management.health.rabbit.enabled=true # Enable RabbitMQ health check.</span><br><span class="line">management.health.redis.enabled=true # Enable Redis health check.</span><br><span class="line">management.health.solr.enabled=true # Enable Solr health check.</span><br><span class="line">management.health.status.order=DOWN, OUT_OF_SERVICE, UP, UNKNOWN # Comma-separated list of health statuses in order of severity.</span><br><span class="line"></span><br><span class="line"># INFO CONTRIBUTORS (InfoContributorProperties)</span><br><span class="line">management.info.build.enabled=true # Enable build info.</span><br><span class="line">management.info.defaults.enabled=true # Enable default info contributors.</span><br><span class="line">management.info.env.enabled=true # Enable environment info.</span><br><span class="line">management.info.git.enabled=true # Enable git info.</span><br><span class="line">management.info.git.mode=simple # Mode to use to expose git information.</span><br><span class="line"></span><br><span class="line"># REMOTE SHELL (ShellProperties)</span><br><span class="line">management.shell.auth.type=simple # Authentication type. Auto-detected according to the environment.</span><br><span class="line">management.shell.auth.jaas.domain=my-domain # JAAS domain.</span><br><span class="line">management.shell.auth.key.path= # Path to the authentication key. This should point to a valid ".pem" file.</span><br><span class="line">management.shell.auth.simple.user.name=user # Login user.</span><br><span class="line">management.shell.auth.simple.user.password= # Login password.</span><br><span class="line">management.shell.auth.spring.roles=ACTUATOR # Comma-separated list of required roles to login to the CRaSH console.</span><br><span class="line">management.shell.command-path-patterns=classpath*:/commands/**,classpath*:/crash/commands/** # Patterns to use to look for commands.</span><br><span class="line">management.shell.command-refresh-interval=-1 # Scan for changes and update the command if necessary (in seconds).</span><br><span class="line">management.shell.config-path-patterns=classpath*:/crash/* # Patterns to use to look for configurations.</span><br><span class="line">management.shell.disabled-commands=jpa*,jdbc*,jndi* # Comma-separated list of commands to disable.</span><br><span class="line">management.shell.disabled-plugins= # Comma-separated list of plugins to disable. Certain plugins are disabled by default based on the environment.</span><br><span class="line">management.shell.ssh.auth-timeout = # Number of milliseconds after user will be prompted to login again.</span><br><span class="line">management.shell.ssh.enabled=true # Enable CRaSH SSH support.</span><br><span class="line">management.shell.ssh.idle-timeout = # Number of milliseconds after which unused connections are closed.</span><br><span class="line">management.shell.ssh.key-path= # Path to the SSH server key.</span><br><span class="line">management.shell.ssh.port=2000 # SSH port.</span><br><span class="line">management.shell.telnet.enabled=false # Enable CRaSH telnet support. Enabled by default if the TelnetPlugin is  available.</span><br><span class="line">management.shell.telnet.port=5000 # Telnet port.</span><br><span class="line"></span><br><span class="line"># TRACING (TraceProperties)</span><br><span class="line">management.trace.include=request-headers,response-headers,cookies,errors # Items to be included in the trace.</span><br><span class="line"></span><br><span class="line"># METRICS EXPORT (MetricExportProperties)</span><br><span class="line">spring.metrics.export.aggregate.key-pattern= # Pattern that tells the aggregator what to do with the keys from the source repository.</span><br><span class="line">spring.metrics.export.aggregate.prefix= # Prefix for global repository if active.</span><br><span class="line">spring.metrics.export.delay-millis=5000 # Delay in milliseconds between export ticks. Metrics are exported to external sources on a schedule with this delay.</span><br><span class="line">spring.metrics.export.enabled=true # Flag to enable metric export (assuming a MetricWriter is available).</span><br><span class="line">spring.metrics.export.excludes= # List of patterns for metric names to exclude. Applied after the includes.</span><br><span class="line">spring.metrics.export.includes= # List of patterns for metric names to include.</span><br><span class="line">spring.metrics.export.redis.key=keys.spring.metrics # Key for redis repository export (if active).</span><br><span class="line">spring.metrics.export.redis.prefix=spring.metrics # Prefix for redis repository if active.</span><br><span class="line">spring.metrics.export.send-latest= # Flag to switch off any available optimizations based on not exporting unchanged metric values.</span><br><span class="line">spring.metrics.export.statsd.host= # Host of a statsd server to receive exported metrics.</span><br><span class="line">spring.metrics.export.statsd.port=8125 # Port of a statsd server to receive exported metrics.</span><br><span class="line">spring.metrics.export.statsd.prefix= # Prefix for statsd exported metrics.</span><br><span class="line">spring.metrics.export.triggers.*= # Specific trigger properties per MetricWriter bean name.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># ----------------------------------------</span><br><span class="line"># DEVTOOLS PROPERTIES</span><br><span class="line"># ----------------------------------------</span><br><span class="line"></span><br><span class="line"># DEVTOOLS (DevToolsProperties)</span><br><span class="line">spring.devtools.livereload.enabled=true # Enable a livereload.com compatible server.</span><br><span class="line">spring.devtools.livereload.port=35729 # Server port.</span><br><span class="line">spring.devtools.restart.additional-exclude= # Additional patterns that should be excluded from triggering a full restart.</span><br><span class="line">spring.devtools.restart.additional-paths= # Additional paths to watch for changes.</span><br><span class="line">spring.devtools.restart.enabled=true # Enable automatic restart.</span><br><span class="line">spring.devtools.restart.exclude=META-INF/maven/**,META-INF/resources/**,resources/**,static/**,public/**,templates/**,**/*Test.class,**/*Tests.class,git.properties # Patterns that should be excluded from triggering a full restart.</span><br><span class="line">spring.devtools.restart.poll-interval=1000 # Amount of time (in milliseconds) to wait between polling for classpath changes.</span><br><span class="line">spring.devtools.restart.quiet-period=400 # Amount of quiet time (in milliseconds) required without any classpath changes before a restart is triggered.</span><br><span class="line">spring.devtools.restart.trigger-file= # Name of a specific file that when changed will trigger the restart check. If not specified any classpath file change will trigger the restart.</span><br><span class="line"></span><br><span class="line"># REMOTE DEVTOOLS (RemoteDevToolsProperties)</span><br><span class="line">spring.devtools.remote.context-path=/.~~spring-boot!~ # Context path used to handle the remote connection.</span><br><span class="line">spring.devtools.remote.debug.enabled=true # Enable remote debug support.</span><br><span class="line">spring.devtools.remote.debug.local-port=8000 # Local remote debug server port.</span><br><span class="line">spring.devtools.remote.proxy.host= # The host of the proxy to use to connect to the remote application.</span><br><span class="line">spring.devtools.remote.proxy.port= # The port of the proxy to use to connect to the remote application.</span><br><span class="line">spring.devtools.remote.restart.enabled=true # Enable remote restart.</span><br><span class="line">spring.devtools.remote.secret= # A shared secret required to establish a connection (required to enable remote support).</span><br><span class="line">spring.devtools.remote.secret-header-name=X-AUTH-TOKEN # HTTP header used to transfer the shared secret.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># ----------------------------------------</span><br><span class="line"># TESTING PROPERTIES</span><br><span class="line"># ----------------------------------------</span><br><span class="line"></span><br><span class="line">spring.test.database.replace=any # Type of existing DataSource to replace.</span><br><span class="line">spring.test.mockmvc.print=default # MVC Print option.</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Spring Boot干货系列 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring Boot干货系列：（一）优雅的入门篇]]></title>
      <url>http://tengj.top/2017/02/26/springboot1/</url>
      <content type="html"><![CDATA[<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/spring.jpg" alt=""></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Spring一直是很火的一个开源框架，在过去的一段时间里，Spring Boot在社区中热度一直很高，所以决定花时间来了解和学习，为自己做技术储备。</p>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>首先声明，Spring Boot不是一门新技术，所以不用紧张。从本质上来说，Spring Boot就是Spring,它做了那些没有它你也会去做的Spring Bean配置。它使用“习惯优于配置”（项目中存在大量的配置，此外还内置了一个习惯性的配置，让你无需手动进行配置）的理念让你的项目快速运行起来。使用Spring Boot很容易创建一个独立运行（运行jar,内嵌Servlet容器）、准生产级别的基于Spring框架的项目，使用Spring Boot你可以不用或者只需要很少的Spring配置。</p>
<h2 id="Spring-Boot精要"><a href="#Spring-Boot精要" class="headerlink" title="Spring Boot精要"></a>Spring Boot精要</h2><p>Spring将很多魔法带入了Spring应用程序的开发之中，其中最重要的是以下四个核心。</p>
<ul>
<li>自动配置：针对很多Spring应用程序常见的应用功能，Spring Boot能自动提供相关配置</li>
<li>起步依赖：告诉Spring Boot需要什么功能，它就能引入需要的库。</li>
<li>命令行界面：这是Spring Boot的可选特性，借此你只需写代码就能完成完整的应用程序，无需传统项目构建。</li>
<li>Actuator：让你能够深入运行中的Spring Boot应用程序，一套究竟。</li>
</ul>
<p>详细的我们就不展开，等你爱上后自然会去深入的了解，后续章节我们会一一展开介绍。接下来让我们开搞吧。我已经迫不及待的要尝尝Spring Boot的味道了。</p>
<h2 id="系统要求"><a href="#系统要求" class="headerlink" title="系统要求"></a>系统要求</h2><p>目前Spring Boot正式版为1.5.1.RELEASE默认情况下，Spring Boot 1.5.1.RELEASE需要Java 7和Spring Framework 4.3.6.RELEASE或更高版本,你也可以使用Spring Boot with Java 6和一些额外的配置（不建议）,使用Maven（3.2+）或Gradle 2（2.9或更高版本）和3来构建。</p>
<blockquote>
<p>虽然你可以使用Java 6或7的Spring Boot，但我们通常推荐Java 8。</p>
</blockquote>
<p>所以本博客系列统一使用Java 1.8，Spring Boot 1.5.1.RELEASE以及Maven3.3.9版本。开发工具使用IDEA（强烈推荐，可以看我另外一篇介绍IDEA入门文章，内有官方中文教程:<a href="http://tengj.top/2017/02/22/idea1-1/">Java人员正确使用 IntelliJ IDEA的方式</a>）</p>
<h2 id="光速入门-开发一个web服务"><a href="#光速入门-开发一个web服务" class="headerlink" title="光速入门-开发一个web服务"></a>光速入门-开发一个web服务</h2><p>没有比较就没有伤害，让我们先看看传统Spring MVC开发一个简单的Hello World Web应用程序，你应该做什么，我能想到一些基本的需求。</p>
<ul>
<li>一个项目结构，其中有一个包含必要依赖的Maven或者Gradle构建文件，最起码要有Spring MVC和Servlet API这些依赖。</li>
<li>一个web.xml文件（或者一个WebApplicationInitializer实现），其中声明了Spring的DispatcherServlet。</li>
<li>一个启动了Spring MVC的Spring配置</li>
<li>一控制器类，以“hello World”相应HTTP请求。</li>
<li>一个用于部署应用程序的Web应用服务器，比如Tomcat。</li>
</ul>
<p>最让人难以接受的是，这份清单里面只有一个东西是和Hello World功能相关的，即控制器，剩下的都是Spring开发的Web应用程序必需的通用模板。</p>
<p>接下来看看Spring Boot如何搞定？<br>很简单，我仅仅只需要非常少的几个配置就可以迅速方便的搭建起来一套web项目</p>
<h2 id="初始化Spring-Boot项目"><a href="#初始化Spring-Boot项目" class="headerlink" title="初始化Spring Boot项目"></a>初始化Spring Boot项目</h2><p>构建一个Sping Boot的Maven项目，强烈推荐Spring Initializr,它从本质上来说就是一个Web应用程序，它能为你生成Spring Boot项目结构。<br>Spring Initializr有几种用法：</p>
<ul>
<li>通过Web界面使用</li>
</ul>
<ol>
<li>访问：<code>http://start.spring.io/</code></li>
<li><p>选择构建工具<code>Maven Project</code>、Spring Boot版本<code>1.5.1</code>以及一些工程基本信息，可参考下图所示<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/springboot1-1.png" alt=""></p>
</li>
<li><p>点击<code>Generate Project</code>下载项目压缩包</p>
</li>
<li>导入到你的工程，如果是IDEA，则需要：<br>a.菜单中选择<code>File</code>–&gt;<code>New</code>–&gt;<code>Project from Existing Sources...</code><br>b.选择解压后的项目文件夹，点击<code>OK</code><br>c.点击<code>Import project from external model</code>并选择<code>Maven</code>，点击<code>Next</code>到底为止。<br>d.若你的环境有多个版本的JDK，注意到选择<code>Java SDK</code>的时候请选择<code>Java 7</code>以上的版本</li>
</ol>
<ul>
<li>通过IntelliJ IDEA使用(个人推荐)<br>IntelliJ IDEA是非常流行的IDE，IntelliJ IDEA 14.1已经支持Spring Boot了。<br>创建Spring Boot操作步骤如下：<br>1.在File菜单里面选择 New &gt; Project,然后选择Spring Initializr，接着如下图一步步操作即可。</li>
</ul>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/springboot1-2.png" alt=""></p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/springboot1-3.png" alt=""></p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/springboot1-4.png" alt=""></p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/springboot1-5.png" alt=""></p>
<p>##　项目结构<br>根据上面的操作已经初始化了一个Spring Boot的框架了，项目结构如下：<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/springboot1-6.png" alt=""><br>如你所见，项目里面基本没有代码，除了几个空目录外，还包含如下几样东西。</p>
<ul>
<li>pom.xml：Maven构建说明文件。</li>
<li>Chapter1Application.java：一个带有main()方法的类，用于启动应用程序（关键）。</li>
<li>Chapter1ApplicationTests.java：一个空的Junit测试类，它加载了一个使用Spring Boot字典配置功能的Spring应用程序上下文。</li>
<li>application.properties：一个空的properties文件，你可以根据需要添加配置属性。</li>
</ul>
<h2 id="解析pom-xml"><a href="#解析pom-xml" class="headerlink" title="解析pom.xml"></a>解析pom.xml</h2><p>大家跟我一起移步pom.xml,看看Spring Boot的跟普通Spring MVC工程的Maven配置有啥不一样<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">project</span> <span class="attribute">xmlns</span>=<span class="value">"http://maven.apache.org/POM/4.0.0"</span> <span class="attribute">xmlns:xsi</span>=<span class="value">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">    <span class="attribute">xsi:schemaLocation</span>=<span class="value">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="title">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>com.dudu<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>chapter1<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="title">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">name</span>&gt;</span>chapter1<span class="tag">&lt;/<span class="title">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="title">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">version</span>&gt;</span>1.5.1.RELEASE<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="title">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="title">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="title">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="title">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="title">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">project</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>可以看出，有几个配置是不大一样的,我们挑几个重要的说说，要是客观不想过早的了解这些，自行跳过这一知识点即可。</p>
<h3 id="Spring-Boot父级依赖"><a href="#Spring-Boot父级依赖" class="headerlink" title="Spring Boot父级依赖"></a>Spring Boot父级依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">version</span>&gt;</span>1.5.1.RELEASE<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这块配置就是Spring Boot父级依赖，有了这个，当前的项目就是Spring Boot项目了，spring-boot-starter-parent是一个特殊的starter,它用来提供相关的Maven默认依赖，使用它之后，常用的包依赖可以省去version标签。关于Spring Boot提供了哪些jar包的依赖，可查看C:\Users\用户.m2\repository\org\springframework\boot\spring-boot-dependencies\1.5.1.RELEASE\spring-boot-dependencies-1.5.1.RELEASE.pom<br>这里我就贴一点点意思意思，如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">properties</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Dependency versions --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">activemq.version</span>&gt;</span>5.14.3<span class="tag">&lt;/<span class="title">activemq.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">antlr2.version</span>&gt;</span>2.7.7<span class="tag">&lt;/<span class="title">antlr2.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">appengine-sdk.version</span>&gt;</span>1.9.48<span class="tag">&lt;/<span class="title">appengine-sdk.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">artemis.version</span>&gt;</span>1.5.2<span class="tag">&lt;/<span class="title">artemis.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">aspectj.version</span>&gt;</span>1.8.9<span class="tag">&lt;/<span class="title">aspectj.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">assertj.version</span>&gt;</span>2.6.0<span class="tag">&lt;/<span class="title">assertj.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">atomikos.version</span>&gt;</span>3.9.3<span class="tag">&lt;/<span class="title">atomikos.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">bitronix.version</span>&gt;</span>2.1.4<span class="tag">&lt;/<span class="title">bitronix.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">caffeine.version</span>&gt;</span>2.3.5<span class="tag">&lt;/<span class="title">caffeine.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">cassandra-driver.version</span>&gt;</span>3.1.3<span class="tag">&lt;/<span class="title">cassandra-driver.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">classmate.version</span>&gt;</span>1.3.3<span class="tag">&lt;/<span class="title">classmate.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">commons-beanutils.version</span>&gt;</span>1.9.3<span class="tag">&lt;/<span class="title">commons-beanutils.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">commons-collections.version</span>&gt;</span>3.2.2<span class="tag">&lt;/<span class="title">commons-collections.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">spring-data-releasetrain.version</span>&gt;</span>Ingalls-RELEASE<span class="tag">&lt;/<span class="title">spring-data-releasetrain.version</span>&gt;</span></span><br><span class="line">        ......</span><br><span class="line"><span class="tag">&lt;/<span class="title">properties</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>如果你不想使用某个依赖默认的版本，您还可以通过覆盖自己的项目中的属性来覆盖各个依赖项，例如，要升级到另一个Spring Data版本系列，您可以将以下内容添加到pom.xml中。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">spring-data-releasetrain.version</span>&gt;</span>Fowler-SR2<span class="tag">&lt;/<span class="title">spring-data-releasetrain.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">properties</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>原本默认版本是Ingalls-RELEASE的（看上面最后一行有说明<spring-data-releasetrain.version>Ingalls-RELEASE</spring-data-releasetrain.version>），现在就使用Fowler-SR2版本了，简单吧。</p>
<p>并不是每个人都喜欢继承自spring-boot-starter-parent POM。您可能有您需要使用的自己的公司标准parent，或者您可能更喜欢显式声明所有的Maven配置。<br>如果你不想使用spring-boot-starter-parent，您仍然可以通过使用scope = import依赖关系来保持依赖关系管理：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">dependencyManagement</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="title">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- Import dependency management from Spring Boot --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">version</span>&gt;</span>1.5.1.RELEASE<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="title">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="title">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>该设置不允许您使用如上所述的属性(properties)覆盖各个依赖项，要实现相同的结果，您需要在spring-boot-dependencies项之前的项目的dependencyManagement中添加一个配置，例如，要升级到另一个Spring Data版本系列，您可以将以下内容添加到pom.xml中。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Override Spring Data release train provided by Spring Boot --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.springframework.data<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>spring-data-releasetrain<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">version</span>&gt;</span>Fowler-SR2<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="title">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="title">type</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">version</span>&gt;</span>1.5.1.RELEASE<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="title">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="title">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="起步依赖-spring-boot-starter-xx"><a href="#起步依赖-spring-boot-starter-xx" class="headerlink" title="起步依赖 spring-boot-starter-xx"></a>起步依赖 spring-boot-starter-xx</h3><p>Spring Boot提供了很多”开箱即用“的依赖模块，都是以spring-boot-starter-xx作为命名的。举个例子来说明一下这个起步依赖的好处，比如组装台式机和品牌机，自己组装的话需要自己去选择不同的零件，最后还要组装起来，期间有可能会遇到零件不匹配的问题。耗时又消力，而品牌机就好一点，买来就能直接用的，后续想换零件也是可以的。相比较之下，后者带来的效果更好点（这里就不讨论价格问题哈），起步依赖就像这里的品牌机，自动给你封装好了你想要实现的功能的依赖。就比如我们之前要实现web功能，引入了spring-boot-starter-web这个起步依赖。我们来看看spring-boot-starter-web到底依赖了哪些,如下图：<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/springboot1-7.png" alt=""></p>
<p>嘿嘿嘿，看来依赖了好多呢，如果让我自己弄估计要调半天，所以Spring Boot通过提供众多起步依赖降低项目依赖的复杂度。起步依赖本质上是一个Maven项目对象模型（Project Object Model，POM），定义了对其他库的传递依赖，这些东西加在一起即支持某项功能。很多起步依赖的命名都暗示了它们提供的某种或者某类功能。</p>
<h3 id="Spring-Boot-Maven插件"><a href="#Spring-Boot-Maven插件" class="headerlink" title="Spring Boot Maven插件"></a>Spring Boot Maven插件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">build</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>上面的配置就是Spring Boot Maven插件，Spring Boot Maven插件提供了许多方便的功能：</p>
<ul>
<li>把项目打包成一个可执行的超级JAR（uber-JAR）,包括把应用程序的所有依赖打入JAR文件内，并为JAR添加一个描述文件，其中的内容能让你用java -jar来运行应用程序。</li>
<li>搜索public static void main()方法来标记为可运行类。</li>
</ul>
<h2 id="应用入口类"><a href="#应用入口类" class="headerlink" title="应用入口类"></a>应用入口类</h2><p>Chapter1Application是一个很关键的启动类，程序的入口就是这里,为了演示简单，我们不再新建控制类，而是直接在这个入口类中编写，添加@RestController以及index方法，如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dudu;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="annotation">@RestController</span></span><br><span class="line"><span class="annotation">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Chapter1Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="annotation">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"Hello Spring Boot"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		SpringApplication.run(Chapter1Application.class, args);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ol>
<li>@SpringBootApplication是Sprnig Boot项目的核心注解，主要目的是开启自动配置。后续讲解原理的时候再深入介绍。</li>
<li><p>main方法这是一个标准的Java应用的main的方法，主要作用是作为项目启动的入口。</p>
</li>
<li><p>@RestController注解等价于@Controller+@ResponseBody的结合，使用这个注解的类里面的方法都以json格式输出。</p>
</li>
</ol>
<p>最后，启动项目有三种方式：</p>
<ul>
<li>Chapter1Application的main方法<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/springboot1-8.png" alt=""></li>
<li>使用命令 mvn spring-boot:run”在命令行启动该应用，IDEA中该命令在如下位置：<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/springboot1-9.png" alt=""></li>
<li>运行“mvn package”进行打包时，会打包成一个可以直接运行的 JAR 文件，使用“java -jar”命令就可以直接运行。<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/springboot1-10.png" alt=""><br><img src="http://7xqch5.com1.z0.glb.clouddn.com/springboot1-11.png" alt=""></li>
</ul>
<p>打开浏览器访问<a href="http://localhost:8080" target="_blank" rel="external">http://localhost:8080</a>, 你就能看到页面显示Hello Spring Boot效果了，一个简单的Web的项目就是如此简单。</p>
<h1 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h1><p>虽然我上面讲解了那么多，但是实际开发步骤就是那么简单暴力，初始化一个Spring Boot，添加一个控制类，启动就能看到效果了。<br>本章作为入门Spring Boot的入门介绍，相关的需要理解的概念就只有这几点：</p>
<ul>
<li>Spring Boot父级依赖的概念</li>
<li>起步依赖 spring-boot-starter-xx的概念</li>
<li>应用入口类的作用</li>
</ul>
<p>最后希望你玩的开心~</p>
<h1 id="源码下载"><a href="#源码下载" class="headerlink" title="源码下载"></a>源码下载</h1><p>(￣︶￣)↗[<a href="https://github.com/tengj/SpringBootDemo/tree/master" target="_blank" rel="external">相关示例完整代码</a>]</p>
<p>我手里有几本Spring Boot的中文电子书资料，有需要的可以关注博主微信公众号（嘟爷java超神学堂），自行前往下载【开发工具-&gt;java电子书籍】<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/springboot1-12.png" alt=""><br><a href="http://7xqch5.com1.z0.glb.clouddn.com/javaLearn.PNG" target="_blank" rel="external"><img src="http://7xqch5.com1.z0.glb.clouddn.com/javaLearn.PNG" alt=""></a></p>
<hr>
]]></content>
      
        <categories>
            
            <category> Spring Boot干货系列 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java人员正确使用 IntelliJ IDEA的方式]]></title>
      <url>http://tengj.top/2017/02/22/idea1-1/</url>
      <content type="html"><![CDATA[<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/idea1_1.jpg" alt=""></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>博主是Java开发人员，以前一直都用myeclipse来开发的，说实话感觉myeclipse毫无美感可言，后来经过同事介绍，认识了IDEA，一眼就相中了IDEA黑色的主题风格，自此就抛弃了旧爱myeclipse。当时还不懂IDEA功能上比myeclipse好在哪里，只是单纯的爱上了黑色的主题。后来用了一段时间，事实证明还真的更好用。下文我将介绍一下正确的使用IDEA的方式。</p>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>IntelliJ IDEA 主要用于支持 Java、Scala、Groovy 等语言的开发工具，同时具备支持目前主流的技术和框架，擅长于企业应用、移动应用和 Web 应用的开发。</p>
<p>IntelliJ IDEA 对自己的定义是很清晰的，对于新人来讲可能还不太理解，可能还会有误会，认为它博而不精，但是对于老用户来讲应该是非常认可上面这句话的。通过下面功能表格，新人对于 IntelliJ IDEA 所具备的功能会有一个新的认识。</p>
<p>如果用一句话来形容 IntelliJ IDEA，我会说：<strong>IntelliJ IDEA 是目前所有 IDE 中最具备沉浸式的 IDE，没有之一</strong>。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>一般人安装直接去官网找到对应的安装版本下载安装，之前我也是这样，这样的结果就是版本不好控制，有新版本更新了我都不知道，每次想换版本还要重新下载安装。后来经别人提点才发现JetBrains官网本身就提供了一个管理所有JetBrains旗下所有的产品软件的工具，那就是toolbox，如图，官网首页IDEs右下角菜单就是入口<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/idea1_2.png" alt=""></p>
<p>进去后点击下载即可<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/idea1_3.png" alt=""></p>
<p>安装完的效果如下图</p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/idea1_4.png" alt=""></p>
<p>这边列出了所有JetBrains旗下的产品，想怎么用就怎么用，选择对应的版本安装即可，用toolbox的好处就是如果使用的软件有个更新，在这个工具上就有提醒，几点更新即可。<br>更方便的是toolbox还提供历史项目的检索，很方便打开历史的项目。<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/idea1_5.png" alt=""></p>
<p>如果你想修改项目内存，可以打开已经安装的对应的项目的settings,修改对应的内存大小即可。<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/idea1_6.png" alt=""></p>
<p>注意：小编自己安装的时候好像toolbox被默认安装到C盘了，如果你也不小心，可以修改下对应的安装路径，这样后续安装的IDEA软件就会安装到指定路径。<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/idea1_7.png" alt=""></p>
<h2 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h2><p>好了，用正确的方式安装IDEA后，小编这里推荐几款平时比较实用的插件，这里抛砖引玉，只介绍个人使用比较多的。<br>IDEA下面安装插件是在File下面的setting中设置，如图：<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/idea1_8.png" alt=""><br><img src="https://github.com/tengj/IntelliJ-IDEA-Tutorial/raw/newMaster/images/xx-b-plugins-install-1.gif" alt="插件的安装"></p>
<h3 id="图片背景插件background-Image-Plus"><a href="#图片背景插件background-Image-Plus" class="headerlink" title="图片背景插件background Image Plus"></a>图片背景插件background Image Plus</h3><p>插件名称叫background Image Plus，在插件里面搜索安装即可，如下图<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/idea1_9.png" alt=""></p>
<p>安装完重启后可以在菜单View下面的Set Background Image里面设置，选好本地一张图片设置下亮度和模式即可，这里小编推荐尽量用深色一点的图片，视觉效果相对好点。<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/idea1_10.png" alt=""></p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/idea1_11.png" alt=""></p>
<p>最终展示效果如图：<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/idea1_12.png" alt=""></p>
<h3 id="翻译插件Translation"><a href="#翻译插件Translation" class="headerlink" title="翻译插件Translation"></a>翻译插件Translation</h3><p>开发的时候经常会遇到看不懂的英语单词，再去百度多麻烦，这里推荐这款翻译插件，插件名称叫做，安装后选中单词按下快捷键ALT+1即可。<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/idea1_13.png" alt=""></p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/idea1_14.png" alt=""></p>
<h3 id="CodeGlance"><a href="#CodeGlance" class="headerlink" title="CodeGlance"></a>CodeGlance</h3><p>在编辑代码最右侧，显示一块代码小地图 这款插件使用效果图如下，个人感觉还是有点用处，滚动条太小，有这个地图，拖动起来更加方便一点<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/idea1_15.png" alt=""></p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/idea1_16.png" alt=""></p>
<h3 id="Grep-Console"><a href="#Grep-Console" class="headerlink" title="Grep Console"></a>Grep Console</h3><p>Grep Console 自定义设置控制台输出颜色，这样控制台就能比较明显的看到警告或者错误的信息，方便查找问题。<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/idea1_17.png" alt=""></p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/idea1_18.png" alt=""></p>
<h1 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h1><p>以上就是博主自己使用IDEA的经验心得，如果你看了心动了但是还担心IDEA复杂不好入门，嘿嘿，别担心博主手里还有大招，在此奉献出IDEA官方教程中文版一套，让你无缝切换随心所欲的玩耍起来。教程地址如下：<a href="https://github.com/tengj/IntelliJ-IDEA-Tutorial" target="_blank" rel="external">https://github.com/tengj/IntelliJ-IDEA-Tutorial</a><br>讲真，博主觉得这个教程就值的一波赞了。对了，我还提供了IDEA的激活码，如果你需要可关注我的微信公众号，回复激活码即可获取。<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/idea1_19.png" alt=""></p>
<hr>
<p> 博主弄了个java学习资源的公众号，学习资源超级多，视频，电子书，最新开发工具一个都不能少，已全部分享到百度云盘，求资源共享，打造一个学习方便，工作方便的java公众号，开源开源，有需求的可以关注~撒花<br> <img src="http://7xqch5.com1.z0.glb.clouddn.com/javaLearn.PNG" alt=""></p>
<hr>
]]></content>
      
        <categories>
            
            <category> IDEA大汇总 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> IDEA </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[如何制作微课系列——（第一天）微课选题怎么玩？]]></title>
      <url>http://tengj.top/2016/05/24/wk01/</url>
      <content type="html"><![CDATA[<h1 id="首页"><a href="#首页" class="headerlink" title="首页"></a>首页</h1><p>今天第一次接触微课，还是蛮新鲜的，非常感谢公司举办的这个活动，自己也有幸参与进来。<br>今天是第一天，王发松老师给我们带来的精彩课程——《微课选题怎么玩》。下面是个人整理的课后笔记，希望对您有用。</p>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>一个好的微课选题要怎么包装，老师介绍需要以下3个步骤</p>
<ul>
<li>常见误区</li>
<li>选题方法</li>
<li>让课题变炫</li>
</ul>
<p>下面具体展开学习。</p>
<h2 id="常见误区"><a href="#常见误区" class="headerlink" title="常见误区"></a>常见误区</h2><ul>
<li>将大题剁成微课<br>矫正：实际上微课虽小，但必须是完整的课程，独立的章节，一般不大于10分钟</li>
<li>题目大而全<br>贪多嚼不烂，比如：《项目管理》《情绪压力管理》《数据库优化》</li>
<li>选题不接地气<br>比如：《大毛的自述》《骆驼之死的启示》《互联网新时代到来》<br>看不懂，听不明白，跟我们自己的工作，生活的关系，以及对我们的帮助全都写的不明确。这就造成没有任何吸引力，没有吸引力就不会点开看。</li>
</ul>
<h2 id="选题方法"><a href="#选题方法" class="headerlink" title="选题方法"></a>选题方法</h2><p>以上3个就是微课选题中最常见到的问题，那么要如何解决这问题，看过来</p>
<h3 id="用3W1H梳理思路"><a href="#用3W1H梳理思路" class="headerlink" title="用3W1H梳理思路"></a>用3W1H梳理思路</h3><ol>
<li>首先要明确微课给谁看Who</li>
<li>其次要明确看什么 What</li>
<li>然后要明白为什么会看 Why</li>
<li>最后考虑怎么看 How</li>
</ol>
<p>举个简单例子：<br>如何给新员工介绍公司，根据上面提到的3W1H梳理后的思路如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Who  &#26032;&#20837;&#32844;&#21592;&#24037;&#10;What &#20225;&#19994;&#35268;&#27169;&#12289;&#32463;&#33829;&#19994;&#21153;&#12289;&#21457;&#23637;&#21382;&#31243;&#12289;&#25216;&#26415;&#23454;&#21147;&#10;Why  &#28040;&#38500;&#38476;&#29983;&#24863;&#65292;&#24555;&#36895;&#34701;&#20837;&#20225;&#19994;&#10;How  &#27169;&#25311;&#20855;&#20307;&#22330;&#26223;&#12289;90&#21518;&#21592;&#24037;&#39118;&#26684;&#65292;&#37319;&#29992;&#19968;&#38382;&#19968;&#31572;&#24418;&#24335;</span><br></pre></td></tr></table></figure></p>
<h3 id="选题流程"><a href="#选题流程" class="headerlink" title="选题流程"></a>选题流程</h3><p>最核心归纳起来就是两个问题<br>1.对象：微课究竟给谁讲<br>2.问题：希望通过微课解决什么难题或者帮助他们完成什么任务</p>
<h3 id="选题原则"><a href="#选题原则" class="headerlink" title="选题原则"></a>选题原则</h3><ul>
<li>宜小不宜大</li>
<li>宜深不宜宽</li>
</ul>
<p>说白了就是在微课选题过程中，做减法比做加法来的重要<br>最重要的是聚焦、说透，而不是面面俱到</p>
<h3 id="聚焦：基于任务、问题导向"><a href="#聚焦：基于任务、问题导向" class="headerlink" title="聚焦：基于任务、问题导向"></a>聚焦：基于任务、问题导向</h3><p>如何实现宜小不宜大、宜深不宜宽原则呢？最主要的就是在微课选题过程中要围绕四个方面展开</p>
<ul>
<li>基本点<br>基本流程、基本步骤，最基础的应知应会。比如新员工，要先了解公司的基本规章，企业文化，以及公司简介。</li>
<li>痛点<br>经常感觉到难受的地方，经常摔跤的地方。</li>
<li>关键点<br>20%的东西决定80%的成效，这20%就是关键点</li>
<li>变化点<br>比如指制度更新了，编程语言升级了，围绕这些变化，这些不同来展开微课</li>
</ul>
<p>所以我们的微课只要扣住这四点来展开，那么宜小不宜大，宜深不宜宽的原则我们就实现了。</p>
<p>举例子：<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/wk01.jpg" alt=""></p>
<p>微课选题能做到聚焦，小，接地气，一般都是不错的题目。</p>
<h2 id="让课题变炫"><a href="#让课题变炫" class="headerlink" title="让课题变炫"></a>让课题变炫</h2><p>好酒也怕巷子深，再好的题目颜值太差的话，点开的人也不多。所以适当的包装自己的题目，也就是所谓的标题党哈哈哈<br>老师介绍了课题美化的四支魔法棒</p>
<h3 id="创造眼球经济——进行数字化处理"><a href="#创造眼球经济——进行数字化处理" class="headerlink" title="创造眼球经济——进行数字化处理"></a>创造眼球经济——进行数字化处理</h3><p>比如：《绩效考核ABC》,《项目干系人沟通的3大纪律》，《专业知识生动化4招》<br>以上题目都是带上了数字来处理，显得更直接，也更清晰。</p>
<h3 id="展示价值诱惑——直击信息点"><a href="#展示价值诱惑——直击信息点" class="headerlink" title="展示价值诱惑——直击信息点"></a>展示价值诱惑——直击信息点</h3><p>比如：《1张图搞定课程体系规划》，《一眼识别软件BUG》，《秒懂公司考情规定》<br>直接展示价值和利益最能吸引学员关注，所以要吸引人，就这么干。</p>
<h3 id="诱发思考模式——适当采用反问句式"><a href="#诱发思考模式——适当采用反问句式" class="headerlink" title="诱发思考模式——适当采用反问句式"></a>诱发思考模式——适当采用反问句式</h3><p>比如：《戒烟，你做得到吗？》《内训师必经的坎，你造吗？》<br>因为问问题会引发别人思考，会引发大家的回应。</p>
<h3 id="加载热点效应——利用热点词语"><a href="#加载热点效应——利用热点词语" class="headerlink" title="加载热点效应——利用热点词语"></a>加载热点效应——利用热点词语</h3><p>《中国好保险第一季——教育基金》《DUANG,U兔带你进入电子课堂》《别告诉我你懂PPT》<br>利用热点，能引起大家的广泛讨论，点击量就上去了。</p>
<p>继续上面的例子，经过包装之后如下：<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/wk02.png" alt=""></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>微课选题要这么玩：</p>
<ol>
<li>微课选题的时候，要足够的聚焦，越小越好，越深越好</li>
<li>微课选题要接地气，实用，围绕基本点、痛点、关键点、变化点来展开</li>
<li>有了好选题之后，还要利用方法来进行选题的包装，有卖相，颜值更高后就能吸引更多的受众<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/wk03.jpg" alt=""></li>
</ol>
<h1 id="课后问题答疑"><a href="#课后问题答疑" class="headerlink" title="课后问题答疑"></a>课后问题答疑</h1><p>1.聚焦要满足四点还是只要取其中一点也可以<br>答：聚焦只要满足其中一点就好，不要求全部都要满足</p>
<p>2.有没有限定选择题目字数，有的标题名称太长之类的？<br>答：没有限制，但是太长会折行，所以在说的清楚的情况下建议越短越好。</p>
<p>3.如何提高学员的参与度？有什么好的互动技巧？<br>答：做微课的时候要模拟有学员坐在面前听课的感觉。提完一个问题的时候稍微停一停，让学员也有思考的时间，而不是一鼓作气全部讲完。</p>
<p>4.比如内容不能超过多长？时间一般多久就要结束等？<br>答：一般不超过10分钟，尽量在5-8分钟为最佳。</p>
<p>5.老师，您好。刚刚提到优化魔法棒，大招不宜使用超过7招（例如降龙十八掌），对应的微课是需要把7招都介绍完，还是允许分系列？   例如：7步成诗：带你认识JAVA 需要一期微课介绍完全部JAVA的基础点，还是允许一步一个短课？<br>答：根据心里学家的研究，跟人脑短时信息的记忆容量有关系， 一个人能记忆短时存储的能力大概在7加减2，最少记5个，最多记9个，还跟内容的类型有关系。所以一旦超过9，最好就是拆分弄成系列微课。</p>
<p>6.公司级的课程，培训工时刚性要求在7个小时以上，那么是不是需选多个微小题，如何有效串起来？<br>答：7小时更多的是线下课程，微课跟线下大课是两个范畴的东西。主张用翻转式课堂的方式，把微课作为线下7小时大课的课前学习，课上做研讨和解决问题，这样既能节约时间，也能提高培训效果。</p>
<p>7.王老师，听你一说，感觉选题有了思路，工作中有很多技术交流的内容，一般交流下来都要1小时讲透，怎么压缩成微课？<br>答：微课不是大课的缩写，也不是把一个大课程切成小课程，每一个微课应该可以独立成章，也可以跟其他微课组成一个系列。麻雀虽小，五脏俱全。</p>
<p>8.控制课程时间在十分钟内，除了遵循选题原则，有没有什么方法？<br>答：这跟拆分内容的颗粒度有关，围绕10分钟，围绕合适的颗粒度，把课程拆分成小专题。</p>
<p>9.困难在于内容如何提炼？<br>答：第二天课程会有。待补充</p>
<p>10.王老师，快餐式阅读在于简捷，如果采取反问句式，答案是第一页就给出来，后面再次展开？还是后面递进引出？谢谢？<br>答：建议采取反问句式的时候，答案可以第一时间给出，但是要留有悬念。引发学员的好奇心，继续探究。然后后面再给出你的答案，分点阐述。</p>
<p>11.微课内容宜小不宜大，这点如何有效选题，老师有没有什么启发点？或经验？<br>答：</p>
<ol>
<li>微课选题的时候，要足够的聚焦，越小越好，越深越好</li>
<li>微课选题要接地气，实用，围绕基本点、痛点、关键点、变化点来展开</li>
<li>有了好选题之后，还要利用方法来进行选题的包装，有卖相，颜值更高后就能吸引更多的受众</li>
</ol>
<p>12.老师，如何解读为了吸引眼球打黄色暴力擦边球或过于奇葩词语的标题？但往往点击率最高？<br>答：为了保证人生安全，介意不要这样，节操很重要。</p>
<p>13.微课也有互动环节？不是发完微课程就完了？<br>答：<br>第一种是真实的，往往通过软件技术来实现，比如flash，比如动画电影，可以让提出问题，让学员来参与。<br>第二种情况是心里上的互动，比如表达的时候稍微提个问题，停顿一下，让屏幕前的学员有时间思考，这种也是一种互动。<br>第三种是老师自问自答，或者给出若干选项，分析各个选项的利弊之后给出答案，这种在心理上也会带着学员跟着你走，实际上也是一种互动。</p>
<p>14提问：如何用ppt让微课飞起来？<br>答：除了PPT之外还有很多其他工具，如果使用PPT开发微课0，可以做图文性，视频型的，也可以图文动画型的，详情第三次课程介绍。</p>
<p>15.一张图搞定xxx，实际上展示的时候只能一张图？<br>答：不是的，一张图作为工作工具来搞定一项工作，实际情况用两页，三页或者一段视频来搞定微课，也是可以的。不要被一张纸一张图给框住。关键是内容为王，关键是实现教学目的。</p>
<p>16.如何让你的学员，在禁言的半小时或1小时微课语音中，耐心的听完每一段？<br>答：关键看内容有吸引力，另外分享之前建立规则，约定老师分享的时候禁止发言也禁止提问，等老师讲完了再提问和分享。当然还需要一个主持人和助教帮忙维持秩序。</p>
<p>17.微课是不是只需要针对一个点进行深入？<br>答：嗯没错，微课就是应该针对一个点进行深入探讨，它应该宜小、宜深，把一个点做透，把一个点讲明白，这就是微课的价值了。</p>
]]></content>
      
        <categories>
            
            <category> 微课系列 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[SpringMVC干货系列：从零搭建SpringMVC+mybatis（四）：Spring两大核心之AOP学习]]></title>
      <url>http://tengj.top/2016/05/12/springmvc4aop/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>上一篇我们介绍了Spring的核心概念DI,DI有助与应用对象之间的解耦。今天我们就来介绍下另一个非常核心的概念，面向切面编程AOP。</p>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>在软件开发中，散布于应用中多处的功能被称为横切关注点（cross-cutting concern）。通常来讲，这些横切关注点从概念上是与应用的业务逻辑相分离的。比如：日志、声明式事物、安全和缓存。这些东西都不是我们平时写代码的核心功能，但许多地方都要用到。<br>把这些横切关注点与业务相分离正是面向切面编程（AOP）索要解决的问题。<br>简单的说就是把这些许多地方都要用到，但又不是核心业务的功能，单独剥离出来封装，通过配置指定要切入到指定的方法中去。</p>
<h2 id="什么是面向切面编程"><a href="#什么是面向切面编程" class="headerlink" title="什么是面向切面编程"></a>什么是面向切面编程</h2><p><img src="http://7xqch5.com1.z0.glb.clouddn.com/springmvc4_1.png" alt="">  </p>
<p>如上图所示，这就是横切关注点的概念，水平的是核心业务，这些切入的箭头就是我们的横切关注点。  </p>
<p>横切关注点可以被模块化为特殊的类，这些类被称为切面（aspect）。这样做有两个好处：</p>
<ul>
<li>首先，现在每个关注点都集中于一个地方，而不是分割到多处代码中</li>
<li>其次，服务模块更简洁，因为它们只包含主要关注点（或核心功能）的代码，而次要关注点的代码被转移到切面中了。</li>
</ul>
<h2 id="定义AOP术语"><a href="#定义AOP术语" class="headerlink" title="定义AOP术语"></a>定义AOP术语</h2><p>为了理解AOP，我们必须先了解AOP的相关术语，很简单不难:</p>
<p><strong>通知（Advice）</strong>：<br>在AOP中，切面的工作被称为通知。通知定义了切面“是什么”以及“何时”使用。除了描述切面要完成的工作，通知还解决了何时执行这个工作的问题。<br>Spring切面可以应用5种类型的通知：</p>
<ul>
<li>前置通知（Before）：在目标方法被调用之前调用通知功能</li>
<li>后置通知（After）：在目标方法完成之后调用通知，此时不会关心方法的输出是什么</li>
<li>返回通知（After-returning）：在目标方法成功执行之后调用通知</li>
<li>异常通知（After-throwing）：在目标方法抛出异常后调用通知</li>
<li>环绕通知（Around）：通知包裹了被通知的方法，在被通知的方法调用之前和调用之后执行自定义的行为</li>
</ul>
<p><strong>连接点（Join point）</strong>：<br>连接点是在应用执行过程中能够插入切面的一个点。这个点可以是调用方法时、抛出异常时、甚至修改一个字段时。切面代码可以利用这些点插入到应用的正常流程之中，并添加行为。</p>
<p><strong>切点（Pointcut）</strong>:<br>如果说通知定义了切面“是什么”和“何时”的话，那么切点就定义了“何处”。比如我想把日志引入到某个具体的方法中，这个方法就是所谓的切点。</p>
<p><strong>切面（Aspect）</strong>：<br>切面是通知和切点的结合。通知和切点共同定义了切面的全部内容———他是什么，在何时和何处完成其功能。</p>
<p><strong>引入（Introduction）</strong>：<br>引入允许我们向现有的类添加新的方法和属性(Spring提供了一个方法注入的功能）。</p>
<p><strong>织入(Weaving)</strong>：<br>把切面应用到目标对象来创建新的代理对象的过程，织入一般发生在如下几个时机:</p>
<ul>
<li>编译时：当一个类文件被编译时进行织入，这需要特殊的编译器才可以做的到，例如AspectJ的织入编译器</li>
<li>类加载时：使用特殊的ClassLoader在目标类被加载到程序之前增强类的字节代码</li>
<li>运行时：切面在运行的某个时刻被织入,SpringAOP就是以这种方式织入切面的，原理应该是使用了JDK的动态代理技术</li>
</ul>
<h2 id="Spring对AOP的支持"><a href="#Spring对AOP的支持" class="headerlink" title="Spring对AOP的支持"></a>Spring对AOP的支持</h2><p>创建切入点来定义切面所织入的连接点是AOP框架的基本功能。<br>Spring提供了4种类型的AOP支持：</p>
<ul>
<li>基于代理的经典Spring AOP</li>
<li>纯POJO切面</li>
<li>@AspectJ注解驱动的切面</li>
<li>注入式AspectJ切面（使用与Spring各版本）</li>
</ul>
<p>前三种都是Spring AOP实现的变体，Spring AOP构建在动态代理基础之上，因此，Spring对AOP的支持局限于方法拦截。<br>这里我不准备介绍经典Spring AOP，因为引入了简单的声明式AOP和基于直接的AOP后，Spring经典的AOP看起来就显得非常笨重和过于复杂。<br>对于新手入门来说，我们不需要知道这么多，在这里我也只介绍2,3两种方式，简单的说就是一个基于xml配置，一个基于注解。<br>下面就直接开始举两个例子分别来介绍下这两种AOP方式，我们就拿简单的日志来说明。</p>
<h3 id="基于注解的方式"><a href="#基于注解的方式" class="headerlink" title="基于注解的方式"></a>基于注解的方式</h3><p>首先基于注解的方式需要引入这些包，对用的pom.xml如下：  </p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">version</span>&gt;</span>4.1.1.RELEASE<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>aspectjrt<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">version</span>&gt;</span>1.8.8<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">version</span>&gt;</span>1.8.8<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>我们还是举前面用到的UserController来说明，下面方法很简单，执行进入这个方法的时候会打印“进来了”信息，现在我打算给这个方法加日志，在执行该方法前打印“进来前”，在执行完方法后执行“进来后”。  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tengj.demo.controller;</span><br><span class="line"></span><br><span class="line"><span class="annotation">@Controller</span></span><br><span class="line"><span class="annotation">@RequestMapping</span>(value=<span class="string">"/test"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="annotation">@Autowired</span></span><br><span class="line">    UserService userService;</span><br><span class="line">    </span><br><span class="line">    <span class="annotation">@RequestMapping</span>(value=<span class="string">"/view"</span>,method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">        userService.sayHello(<span class="string">"tengj"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>servie层代码：  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tengj.demo.service</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>servie实现类代码：  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tengj.demo.service.impl;</span><br><span class="line"><span class="annotation">@Service</span>(<span class="string">"userService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"hello，"</span>+name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面方法index()其实就是我们之前定义的切点，表示在哪里切入AOP。<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/springmvc4_2.png" alt="">  </p>
<p> 如图所示，我们使用execution()指示器选择UserServiceImpl的sayHello方法。方法表达式以“*”号开始，表明了我们不关心方法返回值的类型。然后，我们指定了全限定类名和方法名。对于方法参数列表，我们使用两个点号（..）表明切点要选择任意的sayHello()方法，无论该方法的入参是什么。</p>
<p>接下来我们要定义个切面，也就是所谓的日志功能的类。  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tengj.demo.aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="annotation">@Component</span> <span class="comment">//注入依赖</span></span><br><span class="line"><span class="annotation">@Aspect</span> <span class="comment">//该注解标示该类为切面类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogAspect</span> </span>&#123;</span><br><span class="line">    <span class="annotation">@Pointcut</span>(<span class="string">"execution(* com.tengj.demo.service.impl.UserServiceImpl.*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logAop</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Before</span>(<span class="string">"logAop() &amp;&amp; args(name)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logBefore</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        System.out.println(name+<span class="string">"前置通知Before"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@AfterReturning</span>(<span class="string">"logAop()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logAfterReturning</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"返回通知AfterReturning"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@After</span>(<span class="string">"logAop() &amp;&amp; args(name)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logAfter</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        System.out.println(name+<span class="string">"后置通知After"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@AfterThrowing</span>(<span class="string">"logAop()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logAfterThrow</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"异常通知AfterThrowing"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面就是切面类的代码，很简单，这里用到了前面提的通知的几种类型。<br>这样就能实现切入功能了</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Pointcut</span>(<span class="string">"execution(* com.tengj.demo.service.impl.UserServiceImpl.*(..))"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logAop</span><span class="params">()</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<p>这里的@Pointcut注解是为了定义切面内重用的切点，也就是说把公共的东西抽出来，定义了任意的方法名称logAop，这样下面用到的各种类型通知就只要写成</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Before</span>(<span class="string">"logAop() &amp;&amp; args(name)"</span>)</span><br><span class="line"><span class="annotation">@AfterReturning</span>(<span class="string">"logAop()"</span>)</span><br><span class="line"><span class="annotation">@AfterThrowing</span>(<span class="string">"logAop()"</span>)</span><br></pre></td></tr></table></figure>
<p>这样既可，否则就要写成</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Before</span>(<span class="string">"execution(* com.tengj.demo.service.impl.UserServiceImpl.*(..))"</span>)</span><br><span class="line"><span class="annotation">@AfterReturning</span>(<span class="string">"execution(* com.tengj.demo.service.impl.UserServiceImpl.*(..))"</span>)</span><br><span class="line"><span class="annotation">@AfterThrowing</span>(<span class="string">"execution(* com.tengj.demo.service.impl.UserServiceImpl.*(..))"</span>)</span><br></pre></td></tr></table></figure>
<p>大家是否注意到了<code>@Before(&quot;logAop() &amp;&amp; args(name)&quot;)</code>这里多出来个<code>&amp;&amp; args(name)</code>,这个是用来传递参数的，定义只要跟sayHello参数名称一样就可以。</p>
<p>如果就此止步的话，LogAspect只会是Spring容器中的一个Bean,即便使用了AspectJ注解，但它并不会被视为切面，这些注解不会解析，也不会创建将其转换为切面的代理。</p>
<p>所以需要在XML里面配置一下，需要使用Spring aop命名空间中的<code>&lt;aop:aspectj-autoproxy/&gt;</code>元素，简单如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">beans</span> <span class="attribute">xmlns</span>=<span class="value">"http://www.springframework.org/schema/beans"</span></span><br><span class="line">       <span class="attribute">xmlns:xsi</span>=<span class="value">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">       <span class="attribute">xmlns:context</span>=<span class="value">"http://www.springframework.org/schema/context"</span></span><br><span class="line">       <span class="attribute">xmlns:mvc</span>=<span class="value">"http://www.springframework.org/schema/mvc"</span></span><br><span class="line">       <span class="attribute">xmlns:aop</span>=<span class="value">"http://www.springframework.org/schema/aop"</span></span><br><span class="line">       <span class="attribute">xsi:schemaLocation</span>=<span class="value">"http://www.springframework.org/schema/beans </span><br><span class="line">       http://www.springframework.org/schema/beans/spring-beans-4.1.xsd</span><br><span class="line">       http://www.springframework.org/schema/context </span><br><span class="line">       http://www.springframework.org/schema/context/spring-context-4.1.xsd</span><br><span class="line">       http://www.springframework.org/schema/mvc</span><br><span class="line">       http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd</span><br><span class="line">       http://www.springframework.org/schema/aop</span><br><span class="line">       http://www.springframework.org/schema/aop/spring-aop.xsd"</span></span><br><span class="line">       <span class="attribute">default-lazy-init</span>=<span class="value">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">context:component-scan</span> <span class="attribute">base-package</span>=<span class="value">"com.tengj.demo"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">mvc:resources</span> <span class="attribute">location</span>=<span class="value">"/WEB-INF/pages/"</span> <span class="attribute">mapping</span>=<span class="value">"/pages/**"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 默认的注解映射的支持 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--启用AspectJ自动代理--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">aop:aspectj-autoproxy</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">class</span>=<span class="value">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"prefix"</span> <span class="attribute">value</span>=<span class="value">"/WEB-INF/pages/"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"suffix"</span> <span class="attribute">value</span>=<span class="value">".jsp"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>接着就可以启动工程，访问index这个方法，<code>http://localhost:8080/SpringMVCMybatis/test/view</code><br>执行结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tengj前置通知Before</span><br><span class="line">hello，tengj</span><br><span class="line">tengj后置通知After</span><br><span class="line">返回通知AfterReturning</span><br></pre></td></tr></table></figure></p>
<p>根据前面学的我们知道，除了上面提到的通知外，还有一个更强大通知类型，就是环绕通知。可以自定义我们需要切入的位置，可以替代上面提到的所有通知。看例子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Around</span>(<span class="string">"logAop()"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logAround</span><span class="params">(ProceedingJoinPoint jp)</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"自定义前置通知Before"</span>);</span><br><span class="line">        jp.proceed();<span class="comment">//将控制权交给被通知的方法，也就是执行sayHello方法</span></span><br><span class="line">        System.out.println(<span class="string">"自定义后置通知After"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">        System.out.println(<span class="string">"异常处理~"</span>);</span><br><span class="line">        throwable.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>执行结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">自定义前置通知Before</span><br><span class="line">hello，tengj</span><br><span class="line">自定义后置通知After</span><br></pre></td></tr></table></figure></p>
<p>这里主要是通过ProceedingJoinPoint这个参数。其中里面的proceed()方法就是将控制权交给被通知的方法。如果你忘记调用这个方法，那么你的通知实际上会阻塞对被通知方法的调用。</p>
<p>有意思的是，你可以不调用proceed()方法，从而阻塞堆被通知方法的访问，与之类似，你也可以在通知中对它进行多次调用。要这样做的一个场景就是实现重试逻辑，也就是在被通知方法失败后，进行重复尝试。</p>
<h3 id="基于XML配置的方式"><a href="#基于XML配置的方式" class="headerlink" title="基于XML配置的方式"></a>基于XML配置的方式</h3><p>这里介绍使用XML配置的方式来实现，在Spring的aop命名空间中，提供了多个元素用来在XML中声明切面。</p>
<table>
<thead>
<tr>
<th>AOP配置元素</th>
<th style="text-align:center">用  途</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&lt;aop:advisor&gt;</code></td>
<td style="text-align:center">定义AOP通知器</td>
</tr>
<tr>
<td><code>&lt;aop:after&gt;</code></td>
<td style="text-align:center">定义AOP后置通知（不管被通知的方法是否执行成功）</td>
</tr>
<tr>
<td><code>&lt;aop:after-returning&gt;</code></td>
<td style="text-align:center">定义AOP返回通知</td>
</tr>
<tr>
<td><code>&lt;aop:after-throwing&gt;</code></td>
<td style="text-align:center">定义AOP异常通知</td>
</tr>
<tr>
<td><code>&lt;aop:around&gt;</code></td>
<td style="text-align:center">定义AOP环绕通知</td>
</tr>
<tr>
<td><code>&lt;aop:aspect&gt;</code></td>
<td style="text-align:center">定义一个切面</td>
</tr>
<tr>
<td><code>&lt;aop:aspectj-autoproxy&gt;</code></td>
<td style="text-align:center">启用@AspectJ注解驱动的切面</td>
</tr>
<tr>
<td><code>&lt;aop:before&gt;</code></td>
<td style="text-align:center">定义一个AOP前置通知</td>
</tr>
<tr>
<td><code>&lt;aop:config&gt;</code></td>
<td style="text-align:center">顶层的AOP配置元素，大多数的<code>&lt;aop:*&gt;</code>元素必须包含在<code>&lt;aop:config&gt;</code>元素内</td>
</tr>
<tr>
<td><code>&lt;aop:declare-parents&gt;</code></td>
<td style="text-align:center">以透明的方式为被通知的对象引入额外的接口</td>
</tr>
<tr>
<td><code>&lt;aop:pointcut&gt;</code></td>
<td style="text-align:center">定义一个切点</td>
</tr>
</tbody>
</table>
<p>我们已经看过了<code>&lt;aop:aspectj-autoproxy/&gt;</code>元素，它能够自动代理AspectJ注解的通知类。aop命名空间的其他元素能够让我们直接在Spring配置中声明切面，而不需要使用注解。<br>所以，我们重新来看看一下这个LogAspect类，这次我们将它所有的AspectJ注解全部移除掉：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tengj.demo.aspect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogAspect</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logBefore</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        System.out.println(name+<span class="string">"前置通知Before"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logAfterReturning</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"返回通知AfterReturning"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logAfter</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        System.out.println(name+<span class="string">"后置通知After"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logAfterThrow</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"异常通知AfterThrowing"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>然后在xml配置文件中使用Spring aop命名空间中的一些元素，详细基本配置参考上面注解方式中的xml配置，这里是贴出来关键的代码：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"logAspect"</span> <span class="attribute">class</span>=<span class="value">"com.tengj.demo.aspect.LogAspect"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">aop:config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">aop:aspect</span> <span class="attribute">id</span>=<span class="value">"log"</span>  <span class="attribute">ref</span>=<span class="value">"logAspect"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">aop:pointcut</span> <span class="attribute">id</span>=<span class="value">"logAop"</span> <span class="attribute">expression</span>=<span class="value">"execution(* com.tengj.demo.service.impl.UserServiceImpl.sayHello(..)) and args(name)"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">aop:before</span> <span class="attribute">method</span>=<span class="value">"logBefore"</span> <span class="attribute">pointcut-ref</span>=<span class="value">"logAop"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">aop:after</span> <span class="attribute">method</span>=<span class="value">"logAfter"</span>  <span class="attribute">pointcut-ref</span>=<span class="value">"logAop"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">aop:after-returning</span> <span class="attribute">method</span>=<span class="value">"logAfterReturning"</span>  <span class="attribute">pointcut-ref</span>=<span class="value">"logAop"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">aop:after-throwing</span> <span class="attribute">method</span>=<span class="value">"logAfterThrow"</span> <span class="attribute">pointcut-ref</span>=<span class="value">"logAop"</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&lt;aop:around method="logAfterThrow"  pointcut-ref="logAop"/&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>配置也 很好理解</p>
<ul>
<li>xml里面配置aop，都是放在<code>&lt;aop:config&gt;</code>里面</li>
<li>然后使用<code>&lt;aop:aspect&gt;</code>一个切面，指向具体的bean类。</li>
<li>使用<code>&lt;aop:pointcut&gt;</code>定义切点，基本跟注解的很像，其中要注意的是xml配置里面如果要带参数的，用的不再是&amp;&amp;，要使用and关键字才行（因为在XML中，“&amp;”符号会被解析为实体的开始）</li>
<li>然后就是使用各种通知标签了，简单。</li>
</ul>
<p>执行效果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tengj&#21069;&#32622;&#36890;&#30693;Before&#10;hello&#65292;tengj&#10;tengj&#21518;&#32622;&#36890;&#30693;After&#10;&#36820;&#22238;&#36890;&#30693;AfterReturning</span><br></pre></td></tr></table></figure></p>
<p>环绕通知也很简单，直接贴代码：<br>xml配置：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">aop:around</span> <span class="attribute">method</span>=<span class="value">"logAround"</span>  <span class="attribute">pointcut-ref</span>=<span class="value">"logAop"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>切面方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logAround</span><span class="params">(ProceedingJoinPoint jp,String name)</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        System.out.println(name+<span class="string">"自定义前置通知Before"</span>);</span><br><span class="line">        jp.proceed();</span><br><span class="line">        System.out.println(name+<span class="string">"自定义后置通知After"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">        System.out.println(<span class="string">"异常处理~"</span>);</span><br><span class="line">        throwable.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>执行结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tengj自定义前置通知Before</span><br><span class="line">hello，tengj</span><br><span class="line">tengj自定义后置通知After</span><br></pre></td></tr></table></figure></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Spring AOP是Spring学习中最关键的，我总结的这2种写法也是开发中最常用的。也不知道大家能不能理解~看得时候如果有不懂的地方可以提出来，我好修改一下，让更多的人理解并掌握AOP，希望对你有所帮助。</p>
<hr>
<p>一直觉得自己写的不是技术，而是情怀，一篇篇文章是自己这一路走来的痕迹。靠专业技能的成功是最具可复制性的，希望我的这条路能让你少走弯路，希望我能帮你抹去知识的蒙尘，希望我能帮你理清知识的脉络，希望未来技术之巅上有你也有我。</p>
<hr>
<p> 博主弄了个java学习资源的公众号，学习资源超级多，视频，电子书，最新开发工具一个都不能少，已全部分享到百度云盘，求资源共享，打造一个学习方便，工作方便的java公众号，开源开源，有需求的可以关注~撒花<br> <img src="http://7xqch5.com1.z0.glb.clouddn.com/javaLearn.PNG" alt=""></p>
]]></content>
      
        <categories>
            
            <category> springMVC干货系列 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> springMVC </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java多线程干货系列—（四）volatile关键字]]></title>
      <url>http://tengj.top/2016/05/06/threadvolatile4/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>今天介绍下volatile关键字，volatile这个关键字可能很多朋友都听说过，或许也都用过。在Java 5之前，它是一个备受争议的关键字，因为在程序中使用它往往会导致出人意料的结果。在Java 5之后，volatile关键字才得以重获生机。</p>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>volatile关键字虽然从字面上理解起来比较简单，但是要用好不是一件容易的事情。由于volatile关键字是与Java的内存模型有关的。所以让我们先来了解下Java的内存模型。</p>
<h2 id="Java内存模型"><a href="#Java内存模型" class="headerlink" title="Java内存模型"></a>Java内存模型</h2><p>Java内存模型规定所有的变量都是存在主存当中（类似于前面说的物理内存），每个线程都有自己的工作内存（类似于前面的高速缓存）。线程对变量的所有操作都必须在工作内存中进行，而不能直接对主存进行操作。并且每个线程不能访问其他线程的工作内存。如下图：<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/thread4_1.jpg" alt=""></p>
<p>看个例子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VolatileExample</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="comment">//设置类静态变量,各线程访问这同一共享变量</span></span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">static</span> <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">//无限循环,等待flag变为true时才跳出循环</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">while</span> (!flag)&#123;</span><br><span class="line">       &#125;;</span><br><span class="line">       System.out.println(<span class="string">"停止了"</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> VolatileExample().start();</span><br><span class="line">        <span class="comment">//sleep的目的是等待线程启动完毕,也就是说进入run的无限循环体了</span></span><br><span class="line">        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        flag = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这段代码是很典型的一段代码，很多人在中断线程时可能都会采用这种标记办法。但是事实上，这段代码会完全运行正确么？即一定会将线程中断么？不一定，也许在大多数时候，这个代码能够把线程中断，但是也有可能会导致无法中断线程（虽然这个可能性很小，但是只要一旦发生这种情况就会造成死循环了）。<br>我执行后发现上面的程序一直在while循环，不会打印“停止了”这条信息，为什么呢？不是有设置flag=true吗？<br>下面解释一下这段代码为何有可能导致无法中断线程。在前面已经解释过，每个线程在运行过程中都有自己的工作内存，那么线程VolatileExample在运行的时候，会将flag变量的值拷贝一份放在自己的工作内存当中。<br>那么当线程main更改了flag变量的值之后，但是还没来得及写入主存当中，线程main转去做其他事情了，那么线程VolatileExample由于不知道线程main对flag变量的更改，因此还会一直循环下去。</p>
<h2 id="线程中的三个概念"><a href="#线程中的三个概念" class="headerlink" title="线程中的三个概念"></a>线程中的三个概念</h2><p><strong>1.原子性</strong><br>在Java中，对基本数据类型的变量的读取和赋值操作是原子性操作，即这些操作是不可被中断的，要么执行，要么不执行。</p>
<p>上面一句话虽然看起来简单，但是理解起来并不是那么容易。看下面一个例子i：</p>
<p>请分析以下哪些操作是原子性操作：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">10</span>;         <span class="comment">//语句1</span></span><br><span class="line">y = x;         <span class="comment">//语句2</span></span><br><span class="line">x++;           <span class="comment">//语句3</span></span><br><span class="line">x = x + <span class="number">1</span>;     <span class="comment">//语句4</span></span><br></pre></td></tr></table></figure></p>
<p>咋一看，有些朋友可能会说上面的4个语句中的操作都是原子性操作。其实只有语句1是原子性操作，其他三个语句都不是原子性操作。</p>
<p>语句1是直接将数值10赋值给x，也就是说线程执行这个语句的会直接将数值10写入到工作内存中。</p>
<p>语句2实际上包含2个操作，它先要去读取x的值，再将x的值写入工作内存，虽然读取x的值以及 将x的值写入工作内存 这2个操作都是原子性操作，但是合起来就不是原子性操作了。</p>
<p>同样的，x++和 x = x+1包括3个操作：读取x的值，进行加1操作，写入新的值。</p>
<p>所以上面4个语句只有语句1的操作具备原子性。</p>
<p>也就是说，只有简单的读取、赋值（而且必须是将数字赋值给某个变量，变量之间的相互赋值不是原子操作）才是原子操作。</p>
<p>不过这里有一点需要注意：在32位平台下，对64位数据的读取和赋值是需要通过两个操作来完成的，不能保证其原子性。但是好像在最新的JDK中，JVM已经保证对64位数据的读取和赋值也是原子性操作了。</p>
<p>从上面可以看出，Java内存模型只保证了基本读取和赋值是原子性操作，如果要实现更大范围操作的原子性，可以通过synchronized和Lock来实现。由于synchronized和Lock能够保证任一时刻只有一个线程执行该代码块，那么自然就不存在原子性问题了，从而保证了原子性。</p>
<p><strong>2.可见性</strong></p>
<p>对于可见性，Java提供了volatile关键字来保证可见性。</p>
<p>当一个共享变量被volatile修饰时，它会保证修改的值会立即被更新到主存，当有其他线程需要读取时，它会去内存中读取新值。</p>
<p>而普通的共享变量不能保证可见性，因为普通共享变量被修改之后，什么时候被写入主存是不确定的，当其他线程去读取时，此时内存中可能还是原来的旧值，因此无法保证可见性。</p>
<p>另外，通过synchronized和Lock也能够保证可见性，synchronized和Lock能保证同一时刻只有一个线程获取锁然后执行同步代码，并且在释放锁之前会将对变量的修改刷新到主存当中。因此可以保证可见性。</p>
<p><strong>3.有序性</strong></p>
<p>在Java内存模型中，允许编译器和处理器对指令进行重排序，但是重排序过程不会影响到单线程程序的执行，却会影响到多线程并发执行的正确性。</p>
<p>在Java里面，可以通过volatile关键字来保证一定的“有序性”（具体原理在下一节讲述）。另外可以通过synchronized和Lock来保证有序性，很显然，synchronized和Lock保证每个时刻是有一个线程执行同步代码，相当于是让线程顺序执行同步代码，自然就保证了有序性。</p>
<p>另外，Java内存模型具备一些先天的“有序性”，即不需要通过任何手段就能够得到保证的有序性，这个通常也称为 happens-before 原则。如果两个操作的执行次序无法从happens-before原则推导出来，那么它们就不能保证它们的有序性，虚拟机可以随意地对它们进行重排序。</p>
<p>下面就来具体介绍下happens-before原则（先行发生原则）：</p>
<ul>
<li>程序次序规则：一个线程内，按照代码顺序，书写在前面的操作先行发生于书写在后面的操作</li>
<li>锁定规则：一个unLock操作先行发生于后面对同一个锁额lock操作</li>
<li>volatile变量规则：对一个变量的写操作先行发生于后面对这个变量的读操作</li>
<li>传递规则：如果操作A先行发生于操作B，而操作B又先行发生于操作C，则可以得出操作A先行发生于操作C</li>
<li>线程启动规则：Thread对象的start()方法先行发生于此线程的每个一个动作</li>
<li>线程中断规则：对线程interrupt()方法的调用先行发生于被中断线程的代码检测到中断事件的发生</li>
<li>线程终结规则：线程中所有的操作都先行发生于线程的终止检测，我们可以通过Thread.join()方法结束、Thread.isAlive()的返回值手段检测到线程已经终止执行</li>
<li>对象终结规则：一个对象的初始化完成先行发生于他的finalize()方法的开始</li>
</ul>
<p>这8条原则摘自《深入理解Java虚拟机》。</p>
<p>这8条规则中，前4条规则是比较重要的，后4条规则都是显而易见的。</p>
<p>下面我们来解释一下前4条规则：</p>
<p>对于程序次序规则来说，我的理解就是一段程序代码的执行在单个线程中看起来是有序的。注意，虽然这条规则中提到“书写在前面的操作先行发生于书写在后面的操作”，这个应该是程序看起来执行的顺序是按照代码顺序执行的，因为虚拟机可能会对程序代码进行指令重排序。虽然进行重排序，但是最终执行的结果是与程序顺序执行的结果一致的，它只会对不存在数据依赖性的指令进行重排序。因此，在单个线程中，程序执行看起来是有序执行的，这一点要注意理解。事实上，这个规则是用来保证程序在单线程中执行结果的正确性，但无法保证程序在多线程中执行的正确性。</p>
<p>第二条规则也比较容易理解，也就是说无论在单线程中还是多线程中，同一个锁如果出于被锁定的状态，那么必须先对锁进行了释放操作，后面才能继续进行lock操作。</p>
<p>第三条规则是一条比较重要的规则，也是后文将要重点讲述的内容。直观地解释就是，如果一个线程先去写一个变量，然后一个线程去进行读取，那么写入操作肯定会先行发生于读操作。</p>
<p>第四条规则实际上就是体现happens-before原则具备传递性。</p>
<h2 id="volatile语义"><a href="#volatile语义" class="headerlink" title="volatile语义"></a>volatile语义</h2><p>一旦一个共享变量（类的成员变量、类的静态成员变量）被volatile修饰之后，那么就具备了两层语义：</p>
<ul>
<li>保证了不同线程对这个变量进行操作时的可见性，即一个线程修改了某个变量的值，这新值对其他线程来说是立即可见的。</li>
<li>禁止进行指令重排序。</li>
</ul>
<p>所以当把上面代码中变量flag改成下面这样：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span>  <span class="keyword">static</span> valotile <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br></pre></td></tr></table></figure></p>
<p>在执行的话，你就会发现打印了“停止了”信息，因为用volatile修饰之后就变得不一样了：</p>
<p>第一：使用volatile关键字会强制将修改的值立即写入主存；</p>
<p>第二：使用volatile关键字的话，当线程main进行修改时，会导致线程那么线程VolatileExample的工作内存中缓存变量flag的缓存行无效（反映到硬件层的话，就是CPU的L1或者L2缓存中对应的缓存行无效）；</p>
<p>第三：由于线程那么线程VolatileExample的工作内存中缓存变量flag的缓存行无效，所以线程那么线程VolatileExample再次读取变量flag的值时会去主存读取。</p>
<p>那么在线程main修改flag值时（当然这里包括2个操作，修改线程main工作内存中的值，然后将修改后的值写入内存），会使得线程VolatileExample的工作内存中缓存变量flag的缓存行无效，然后线程读取时，发现自己的缓存行无效，它会等待缓存行对应的主存地址被更新之后，然后去对应的主存读取最新的值。</p>
<p>那么线程VolatileExample读取到的就是最新的正确的值。</p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/thread4_2.jpg" alt=""></p>
<p>使用volatile关键字增加了实例变量在多个线程之间的可见性。但是volatile关键字最致命的缺点是不支持原子性。<br>下面将关键字synchronized和volatile进行一下比较：<br>1）关键字volatile是线程同步的轻量级实现，所以volatile性能肯定比synchronized要好，并且volatile只能修饰于变量，而synchronized可以修饰方法，以及代码块。随着JDK新版本的发布，synchronized关键字在执行效率上得到很大提升，在开发中使用synchronized关键字的比率还是比较大的。</p>
<p>2）多线程访问volatile不会发生阻塞，而synchronized会出现阻塞。</p>
<p>3）volatile能保证数据的可见性，但不能保证原子性；而synchronized可以保证原子性，也可以间接保证可见性，因为它将私有内存和公共内存中的数据做同步。</p>
<p>4）再次重申一下，关键字volatile解决的是变量在多个线程之间的可见性；而synchronized关键字解决的是多个线程之间访问资源的同步性。</p>
<h2 id="volatile非原子的特性"><a href="#volatile非原子的特性" class="headerlink" title="volatile非原子的特性"></a>volatile非原子的特性</h2><p>从上面知道volatile关键字保证了操作的可见性，但是volatile能保证对变量的操作是原子性吗？<br>下面看一个例子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">volatile</span> <span class="keyword">int</span> inc = <span class="number">0</span>;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">increase</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        inc++;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Test test = <span class="keyword">new</span> Test();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">1000</span>;j++)</span><br><span class="line">                        test.increase();</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;.start();</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">while</span>(Thread.activeCount()&gt;<span class="number">1</span>)  <span class="comment">//保证前面的线程都执行完</span></span><br><span class="line">            Thread.yield();</span><br><span class="line">        System.out.println(test.inc);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>大家想一下这段程序的输出结果是多少？也许有些朋友认为是10000。但是事实上运行它会发现每次运行结果都不一致，都是一个小于10000的数字。</p>
<p>可能有的朋友就会有疑问，不对啊，上面是对变量inc进行自增操作，由于volatile保证了可见性，那么在每个线程中对inc自增完之后，在其他线程中都能看到修改后的值啊，所以有10个线程分别进行了1000次操作，那么最终inc的值应该是1000*10=10000。</p>
<p>这里面就有一个误区了，volatile关键字能保证可见性没有错，但是上面的程序错在没能保证原子性。可见性只能保证每次读取的是最新的值，但是volatile没办法保证对变量的操作的原子性。</p>
<p>在前面已经提到过，自增操作是不具备原子性的，它包括读取变量的原始值、进行加1操作、写入工作内存。那么就是说自增操作的三个子操作可能会分割开执行，就有可能导致下面这种情况出现：</p>
<p>假如某个时刻变量inc的值为10，</p>
<p>线程1对变量进行自增操作，线程1先读取了变量inc的原始值，然后线程1被阻塞了；</p>
<p>然后线程2对变量进行自增操作，线程2也去读取变量inc的原始值，由于线程1只是对变量inc进行读取操作，而没有对变量进行修改操作，所以不会导致线程2的工作内存中缓存变量inc的缓存行无效，所以线程2会直接去主存读取inc的值，发现inc的值时10，然后进行加1操作，并把11写入工作内存，最后写入主存。</p>
<p>然后线程1接着进行加1操作，由于已经读取了inc的值，注意此时在线程1的工作内存中inc的值仍然为10，所以线程1对inc进行加1操作后inc的值为11，然后将11写入工作内存，最后写入主存。</p>
<p>那么两个线程分别进行了一次自增操作后，inc只增加了1。</p>
<p>解释到这里，可能有朋友会有疑问，不对啊，前面不是保证一个变量在修改volatile变量时，会让缓存行无效吗？然后其他线程去读就会读到新的值，对，这个没错。这个就是上面的happens-before规则中的volatile变量规则，但是要注意，线程1对变量进行读取操作之后，被阻塞了的话，并没有对inc值进行修改。然后虽然volatile能保证线程2对变量inc的值读取是从内存中读取的，但是线程1没有进行修改，所以线程2根本就不会看到修改的值。</p>
<p>根源就在这里，自增操作不是原子性操作，而且volatile也无法保证对变量的任何操作都是原子性的。</p>
<p>把上面的代码改成以下任何一种都可以达到效果：</p>
<p>采用synchronized：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">int</span> inc = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">increase</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        inc++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Test test = <span class="keyword">new</span> Test();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">1000</span>;j++)</span><br><span class="line">                        test.increase();</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;.start();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(Thread.activeCount()&gt;<span class="number">1</span>)  <span class="comment">//保证前面的线程都执行完</span></span><br><span class="line">            Thread.yield();</span><br><span class="line">        System.out.println(test.inc);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>采用Lock：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">int</span> inc = <span class="number">0</span>;</span><br><span class="line">    Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">increase</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            inc++;</span><br><span class="line">        &#125; <span class="keyword">finally</span>&#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Test test = <span class="keyword">new</span> Test();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">1000</span>;j++)</span><br><span class="line">                        test.increase();</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;.start();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(Thread.activeCount()&gt;<span class="number">1</span>)  <span class="comment">//保证前面的线程都执行完</span></span><br><span class="line">            Thread.yield();</span><br><span class="line">        System.out.println(test.inc);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>采用AtomicInteger：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span>  AtomicInteger inc = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">increase</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        inc.getAndIncrement();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Test test = <span class="keyword">new</span> Test();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">1000</span>;j++)</span><br><span class="line">                        test.increase();</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;.start();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(Thread.activeCount()&gt;<span class="number">1</span>)  <span class="comment">//保证前面的线程都执行完</span></span><br><span class="line">            Thread.yield();</span><br><span class="line">        System.out.println(test.inc);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在java 1.5的java.util.concurrent.atomic包下提供了一些原子操作类，即对基本数据类型的 自增（加1操作），自减（减1操作）、以及加法操作（加一个数），减法操作（减一个数）进行了封装，保证这些操作是原子性操作。atomic是利用CAS来实现原子性操作的（Compare And Swap），CAS实际上是利用处理器提供的CMPXCHG指令实现的，而处理器执行CMPXCHG指令是一个原子性操作。</p>
<h2 id="volatile能保证有序性"><a href="#volatile能保证有序性" class="headerlink" title="volatile能保证有序性"></a>volatile能保证有序性</h2><p>在前面提到volatile关键字能禁止指令重排序，所以volatile能在一定程度上保证有序性。</p>
<p>volatile关键字禁止指令重排序有两层意思：</p>
<p>1）当程序执行到volatile变量的读操作或者写操作时，在其前面的操作的更改肯定全部已经进行，且结果已经对后面的操作可见；在其后面的操作肯定还没有进行；</p>
<p>2）在进行指令优化时，不能将在对volatile变量访问的语句放在其后面执行，也不能把volatile变量后面的语句放到其前面执行。</p>
<p>可能上面说的比较绕，举个简单的例子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//x、y为非volatile变量</span></span><br><span class="line"><span class="comment">//flag为volatile变量</span></span><br><span class="line"> </span><br><span class="line">x = <span class="number">2</span>;        <span class="comment">//语句1</span></span><br><span class="line">y = <span class="number">0</span>;        <span class="comment">//语句2</span></span><br><span class="line">flag = <span class="keyword">true</span>;  <span class="comment">//语句3</span></span><br><span class="line">x = <span class="number">4</span>;         <span class="comment">//语句4</span></span><br><span class="line">y = -<span class="number">1</span>;       <span class="comment">//语句5</span></span><br></pre></td></tr></table></figure></p>
<p>由于flag变量为volatile变量，那么在进行指令重排序的过程的时候，不会将语句3放到语句1、语句2前面，也不会讲语句3放到语句4、语句5后面。但是要注意语句1和语句2的顺序、语句4和语句5的顺序是不作任何保证的。</p>
<p>并且volatile关键字能保证，执行到语句3时，语句1和语句2必定是执行完毕了的，且语句1和语句2的执行结果对语句3、语句4、语句5是可见的。</p>
<h2 id="4-volatile的原理和实现机制"><a href="#4-volatile的原理和实现机制" class="headerlink" title="4.volatile的原理和实现机制"></a>4.volatile的原理和实现机制</h2><p>前面讲述了源于volatile关键字的一些使用，下面我们来探讨一下volatile到底如何保证可见性和禁止指令重排序的。</p>
<p>下面这段话摘自《深入理解Java虚拟机》：</p>
<p>“观察加入volatile关键字和没有加入volatile关键字时所生成的汇编代码发现，加入volatile关键字时，会多出一个lock前缀指令”</p>
<p>lock前缀指令实际上相当于一个内存屏障（也成内存栅栏），内存屏障会提供3个功能：</p>
<ul>
<li><p>它确保指令重排序时不会把其后面的指令排到内存屏障之前的位置，也不会把前面的指令排到内存屏障的后面；即在执行到内存屏障这句指令时，在它前面的操作已经全部完成；</p>
</li>
<li><p>它会强制将对缓存的修改操作立即写入主存；</p>
</li>
<li><p>如果是写操作，它会导致其他CPU中对应的缓存行无效。</p>
</li>
</ul>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>　synchronized关键字是防止多个线程同时执行一段代码，那么就会很影响程序执行效率，而volatile关键字在某些情况下性能要优于synchronized，但是要注意volatile关键字是无法替代synchronized关键字的，因为volatile关键字无法保证操作的原子性。通常来说，使用volatile必须具备以下2个条件：</p>
<ul>
<li><p>对变量的写操作不依赖于当前值</p>
</li>
<li><p>该变量没有包含在具有其他变量的不变式中</p>
</li>
</ul>
<p>实际上，这些条件表明，可以被写入 volatile 变量的这些有效值独立于任何程序的状态，包括变量的当前状态。<br>设计模式中的单例模式中的双检查锁就使用到了volatile关键字，跳转地址如下：<br><a href="http://www.jianshu.com/p/d8bf5d08a147" target="_blank" rel="external">设计模式干货系列：（四）单例模式【学习难度：★☆☆☆☆，使用频率：★★★★☆】</a></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>该文为本人学习的笔记，方便以后自己跳槽前复习。参考网上各大帖子，取其精华整合自己的理解而成。还有，关注我个人主页的公众号，里面电子书资源有《Java多线程编程核心技术》以及《深入理解Java虚拟机》高清版，需要的小伙伴自己取。<br>《Java多线程编程核心技术》<br>《深入理解Java虚拟机》<br><a href="http://www.cnblogs.com/mengheng/p/3495379.html" target="_blank" rel="external">Java的多线程机制系列：(四)不得不提的volatile及指令重排序(happen-before)</a><br><a href="http://www.cnblogs.com/dolphin0520/p/3920373.html" target="_blank" rel="external">Java并发编程：volatile关键字解析</a></p>
<h1 id="整理的思维导图"><a href="#整理的思维导图" class="headerlink" title="整理的思维导图"></a>整理的思维导图</h1><p>个人整理的volatile的思维导图,导出的图片无法查看备注的一些信息，所以需要源文件的童鞋可以关注我个人主页上的公众号，回复<strong>volatile</strong>即可获取源文件。<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/Volatile.png" alt=""></p>
<hr>
<p>一直觉得自己写的不是技术，而是情怀，一篇篇文章是自己这一路走来的痕迹。靠专业技能的成功是最具可复制性的，希望我的这条路能让你少走弯路，希望我能帮你抹去知识的蒙尘，希望我能帮你理清知识的脉络，希望未来技术之巅上有你也有我。</p>
<hr>
<p> 博主弄了个java学习资源的公众号，学习资源超级多，视频，电子书，最新开发工具一个都不能少，已全部分享到百度云盘，求资源共享，打造一个学习方便，工作方便的java公众号，开源开源，有需求的可以关注~撒花<br> <img src="http://7xqch5.com1.z0.glb.clouddn.com/javaLearn.PNG" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Java多线程 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Java多线程干货系列—（二）synchronized]]></title>
      <url>http://tengj.top/2016/05/03/threadsynchronized2/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本篇主要介绍Java多线程中的同步，也就是如何在Java语言中写出线程安全的程序，如何在Java语言中解决非线程安全的相关问题。没错就是使用synchronized。</p>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="如何解决线程安全问题？"><a href="#如何解决线程安全问题？" class="headerlink" title="如何解决线程安全问题？"></a>如何解决线程安全问题？</h2><p>那么一般来说，是如何解决线程安全问题的呢？</p>
<p>基本上所有的并发模式在解决线程安全问题时，都采用“序列化访问临界资源”的方案，即在同一时刻，只能有一个线程访问临界资源，也称作同步互斥访问。</p>
<p>通常来说，是在访问临界资源的代码前面加上一个锁，当访问完临界资源后释放锁，让其他线程继续访问。</p>
<p>在Java中，提供了两种方式来实现同步互斥访问：synchronized和Lock。</p>
<p>本文主要讲述synchronized的使用方法，Lock的使用方法在下一篇博文中讲述。</p>
<h2 id="synchronized同步方法"><a href="#synchronized同步方法" class="headerlink" title="synchronized同步方法"></a>synchronized同步方法</h2><p>synchronized是Java语言的关键字，当它用来修饰一个方法或者一个代码块的时候，能够保证在同一时刻最多只有一个线程执行该段代码。在了解synchronized关键字的使用方法之前，我们先来看一个概念：互斥锁，顾名思义：能到达到互斥访问目的的锁。</p>
<p>举个简单的例子：如果对临界资源加上互斥锁，当一个线程在访问该临界资源时，其他线程便只能等待。</p>
<p>在Java中，每一个对象都拥有一个锁标记（monitor），也称为监视器，多线程同时访问某个对象时，线程只有获取了该对象的锁才能访问。</p>
<p>在Java中，可以使用synchronized关键字来标记一个方法或者代码块，当某个线程调用该对象的synchronized方法或者访问synchronized代码块时，这个线程便获得了该对象的锁，其他线程暂时无法访问这个方法，只有等待这个方法执行完毕或者代码块执行完毕，这个线程才会释放该对象的锁，其他线程才能执行这个方法或者代码块。</p>
<h3 id="synchronized的使用"><a href="#synchronized的使用" class="headerlink" title="synchronized的使用"></a>synchronized的使用</h3><ul>
<li><p>synchronized代码块，被修饰的代码成为同步语句块，其作用的范围是调用这个代码块的对象，我们在用synchronized关键字的时候，能缩小代码段的范围就尽量缩小，能在代码段上加同步就不要再整个方法上加同步。这叫减小锁的粒度，使代码更大程度的并发。</p>
</li>
<li><p>synchronized方法，被修饰的方法成为同步方法，其作用范围是整个方法，作用对象是调用这个方法的对象。</p>
</li>
<li><p>synchronized静态方法，修饰一个static静态方法，其作用范围是整个静态方法，作用对象是这个类的所有对象。</p>
</li>
<li><p>synchronized类，其作用范围是Synchronized后面括号括起来的部分synchronized(className.class)，作用的对象是这个类的所有对象。</p>
</li>
<li><p>synchronized()，()中是锁住的对象， synchronized(this)锁住的只是对象本身，同一个类的不同对象调用的synchronized方法并不会被锁住，而synchronized(className.class)实现了全局锁的功能，所有这个类的对象调用这个方法都受到锁的影响，此外()中还可以添加一个具体的对象，实现给具体对象加锁。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span> (object) &#123;</span><br><span class="line">  <span class="comment">//在同步代码块中对对象进行操作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="synchronized注意事项"><a href="#synchronized注意事项" class="headerlink" title="synchronized注意事项"></a>synchronized注意事项</h1><ul>
<li><p>当两个并发线程访问同一个对象中的<code>synchronized</code>代码块时，在同一时刻只能有一个线程得到执行，另一个线程受阻塞，必须等待当前线程执行完这个代码块以后才能执行该代码块。两个线程间是互斥的，因为在执行<code>synchronized</code>代码块时会锁定当前的对象，只有执行完该代码块才能释放该对象锁，下一个线程才能执行并锁定该对象。</p>
</li>
<li><p>当一个线程访问<code>object</code>的一个<code>synchronized(this)</code>同步代码块时，另一个线程仍然可以访问该<code>object</code>中的非<code>synchronized(this)</code>同步代码块。(两个线程使用的是同一个对象)</p>
</li>
<li>当一个线程访问<code>object</code>的一个<code>synchronized(this)</code>同步代码块时，其他线程对<code>object</code>中所有其它<code>synchronized(this)</code>同步代码块的访问将被阻塞(同上，两个线程使用的是同一个对象)。</li>
</ul>
<p>下面通过代码来实现：</p>
<p>1）当两个并发线程访问同一个对象object中的这个synchronized(this)同步代码块时，一个时间内只能有一个线程得到执行。另一个线程必须等待当前线程执行完这个代码块以后才能执行该代码块。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ths;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Thread1</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;  </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">          <span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;  </span><br><span class="line">               <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;  </span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">" synchronized loop "</span> + i);  </span><br><span class="line">               &#125;  </span><br><span class="line">          &#125;  </span><br><span class="line">     &#125;  </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">          Thread1 t1 = <span class="keyword">new</span> Thread1();  </span><br><span class="line">          Thread ta = <span class="keyword">new</span> Thread(t1, <span class="string">"A"</span>);  </span><br><span class="line">          Thread tb = <span class="keyword">new</span> Thread(t1, <span class="string">"B"</span>);  </span><br><span class="line">          ta.start();  </span><br><span class="line">          tb.start();  </span><br><span class="line">     &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>输出结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">A <span class="keyword">synchronized</span> loop <span class="number">0</span>  </span><br><span class="line">A <span class="keyword">synchronized</span> loop <span class="number">1</span>  </span><br><span class="line">A <span class="keyword">synchronized</span> loop <span class="number">2</span>  </span><br><span class="line">A <span class="keyword">synchronized</span> loop <span class="number">3</span>  </span><br><span class="line">A <span class="keyword">synchronized</span> loop <span class="number">4</span>  </span><br><span class="line">B <span class="keyword">synchronized</span> loop <span class="number">0</span>  </span><br><span class="line">B <span class="keyword">synchronized</span> loop <span class="number">1</span>  </span><br><span class="line">B <span class="keyword">synchronized</span> loop <span class="number">2</span>  </span><br><span class="line">B <span class="keyword">synchronized</span> loop <span class="number">3</span>  </span><br><span class="line">B <span class="keyword">synchronized</span> loop <span class="number">4</span></span><br></pre></td></tr></table></figure></p>
<p>2）然而，当一个线程访问object的一个synchronized(this)同步代码块时，另一个线程仍然可以访问该object中的非synchronized(this)同步代码块。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ths;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Thread2</span> </span>&#123;  </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m4t1</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">          <span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;  </span><br><span class="line">               <span class="keyword">int</span> i = <span class="number">5</span>;  </span><br><span class="line">               <span class="keyword">while</span>( i-- &gt; <span class="number">0</span>) &#123;  </span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">" : "</span> + i);  </span><br><span class="line">                    <span class="keyword">try</span> &#123;  </span><br><span class="line">                         Thread.sleep(<span class="number">500</span>);  </span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException ie) &#123;  </span><br><span class="line">                    &#125;  </span><br><span class="line">               &#125;  </span><br><span class="line">          &#125;  </span><br><span class="line">     &#125;  </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m4t2</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">          <span class="keyword">int</span> i = <span class="number">5</span>;  </span><br><span class="line">          <span class="keyword">while</span>( i-- &gt; <span class="number">0</span>) &#123;  </span><br><span class="line">               System.out.println(Thread.currentThread().getName() + <span class="string">" : "</span> + i);  </span><br><span class="line">               <span class="keyword">try</span> &#123;  </span><br><span class="line">                    Thread.sleep(<span class="number">500</span>);  </span><br><span class="line">               &#125; <span class="keyword">catch</span> (InterruptedException ie) &#123;  </span><br><span class="line">               &#125;  </span><br><span class="line">          &#125;  </span><br><span class="line">     &#125;  </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">          <span class="keyword">final</span> Thread2 myt2 = <span class="keyword">new</span> Thread2();  </span><br><span class="line">          Thread t1 = <span class="keyword">new</span> Thread(  <span class="keyword">new</span> Runnable() &#123;  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  myt2.m4t1();  &#125;  &#125;, <span class="string">"t1"</span>  );  </span><br><span class="line">          Thread t2 = <span class="keyword">new</span> Thread(  <span class="keyword">new</span> Runnable() &#123;  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123; myt2.m4t2();   &#125;  &#125;, <span class="string">"t2"</span>  );  </span><br><span class="line">          t1.start();  </span><br><span class="line">          t2.start();  </span><br><span class="line">     &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>输出结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">t1 : <span class="number">4</span>  </span><br><span class="line">t2 : <span class="number">4</span>  </span><br><span class="line">t1 : <span class="number">3</span>  </span><br><span class="line">t2 : <span class="number">3</span>  </span><br><span class="line">t1 : <span class="number">2</span>  </span><br><span class="line">t2 : <span class="number">2</span>  </span><br><span class="line">t1 : <span class="number">1</span>  </span><br><span class="line">t2 : <span class="number">1</span>  </span><br><span class="line">t1 : <span class="number">0</span>  </span><br><span class="line">t2 : <span class="number">0</span></span><br></pre></td></tr></table></figure></p>
<p>3)尤其关键的是，当一个线程访问object的一个synchronized(this)同步代码块时，其他线程对object中所有其它synchronized(this)同步代码块的访问将被阻塞。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//修改Thread2.m4t2()方法：  </span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m4t2</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">          <span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;  </span><br><span class="line">               <span class="keyword">int</span> i = <span class="number">5</span>;  </span><br><span class="line">               <span class="keyword">while</span>( i-- &gt; <span class="number">0</span>) &#123;  </span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">" : "</span> + i);  </span><br><span class="line">                    <span class="keyword">try</span> &#123;  </span><br><span class="line">                         Thread.sleep(<span class="number">500</span>);  </span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException ie) &#123;  </span><br><span class="line">                    &#125;  </span><br><span class="line">               &#125;  </span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure></p>
<p>输出结果:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">t1 : <span class="number">4</span>  </span><br><span class="line">t1 : <span class="number">3</span>  </span><br><span class="line">t1 : <span class="number">2</span>  </span><br><span class="line">t1 : <span class="number">1</span>  </span><br><span class="line">t1 : <span class="number">0</span>  </span><br><span class="line">t2 : <span class="number">4</span>  </span><br><span class="line">t2 : <span class="number">3</span>  </span><br><span class="line">t2 : <span class="number">2</span>  </span><br><span class="line">t2 : <span class="number">1</span>  </span><br><span class="line">t2 : <span class="number">0</span></span><br></pre></td></tr></table></figure></p>
<p>4)第三个例子同样适用其它同步代码块。也就是说，当一个线程访问object的一个synchronized(this)同步代码块时，它就获得了这个object的对象锁。结果，其它线程对该object对象所有同步代码部分的访问都被暂时阻塞。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//修改Thread2.m4t2()方法如下：</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">m4t2</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">         <span class="keyword">int</span> i = <span class="number">5</span>;  </span><br><span class="line">         <span class="keyword">while</span>( i-- &gt; <span class="number">0</span>) &#123;  </span><br><span class="line">              System.out.println(Thread.currentThread().getName() + <span class="string">" : "</span> + i);  </span><br><span class="line">              <span class="keyword">try</span> &#123;  </span><br><span class="line">                   Thread.sleep(<span class="number">500</span>);  </span><br><span class="line">              &#125; <span class="keyword">catch</span> (InterruptedException ie) &#123;  </span><br><span class="line">              &#125;  </span><br><span class="line">         &#125;  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>输出结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">t1 : <span class="number">4</span>  </span><br><span class="line">t1 : <span class="number">3</span>  </span><br><span class="line">t1 : <span class="number">2</span>  </span><br><span class="line">t1 : <span class="number">1</span>  </span><br><span class="line">t1 : <span class="number">0</span>  </span><br><span class="line">t2 : <span class="number">4</span>  </span><br><span class="line">t2 : <span class="number">3</span>  </span><br><span class="line">t2 : <span class="number">2</span>  </span><br><span class="line">t2 : <span class="number">1</span>  </span><br><span class="line">t2 : <span class="number">0</span></span><br></pre></td></tr></table></figure></p>
<p>5)每个类也会有一个锁，它可以用来控制对static数据成员的并发访问。<br>并且如果一个线程执行一个对象的非static synchronized方法，另外一个线程需要执行这个对象所属类的static synchronized方法，此时不会发生互斥现象，因为访问static synchronized方法占用的是类锁，而访问非static synchronized方法占用的是对象锁，所以不存在互斥现象。<br>代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> InsertData insertData = <span class="keyword">new</span> InsertData();</span><br><span class="line">        <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                insertData.insert();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start(); </span><br><span class="line">        <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                insertData.insert1();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InsertData</span> </span>&#123; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"执行insert"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"执行insert完毕"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insert1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"执行insert1"</span>);</span><br><span class="line">        System.out.println(<span class="string">"执行insert1完毕"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>输出结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">执行insert</span><br><span class="line">执行insert1</span><br><span class="line">执行insert1完毕</span><br><span class="line">执行insert完毕</span><br></pre></td></tr></table></figure></p>
<p>第一个线程里面执行的是insert方法，不会导致第二个线程执行insert1方法发生阻塞现象。</p>
<h1 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h1><p><strong>当一个线程进入一个对象的synchronized方法A之后，其它线程是否可进入此对象的synchronized方法B？</strong><br>答：不能。其它线程只能访问该对象的非同步方法，同步方法则不能进入。因为非静态方法上的synchronized修饰符要求执行方法时要获得对象的锁，如果已经进入A方法说明对象锁已经被取走，那么试图进入B方法的线程就只能在等锁池（<strong>注意不是等待池哦</strong>）中等待对象的锁。</p>
<p><strong>synchronized关键字的用法？</strong><br>答：synchronized关键字可以将对象或者方法标记为同步，以实现对对象和方法的互斥访问，可以用synchronized(对象) { … }定义同步代码块，或者在声明方法时将synchronized作为方法的修饰符。</p>
<p><strong>简述synchronized 和java.util.concurrent.locks.Lock的异同？</strong><br>答：Lock是Java 5以后引入的新的API，和关键字synchronized相比主要相同点：Lock 能完成synchronized所实现的所有功能；主要不同点：Lock有比synchronized更精确的线程语义和更好的性能，而且不强制性的要求一定要获得锁。synchronized会自动释放锁，而Lock一定要求程序员手工释放，并且最好在finally 块中释放（这是释放外部资源的最好的地方）</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>以上就是<strong>synchronized</strong>的概念和基本使用用法，下一篇博文中将介绍Lock，希望对你有所帮助。</p>
<hr>
<p>一直觉得自己写的不是技术，而是情怀，一篇篇文章是自己这一路走来的痕迹。靠专业技能的成功是最具可复制性的，希望我的这条路能让你少走弯路，希望我能帮你抹去知识的蒙尘，希望我能帮你理清知识的脉络，希望未来技术之巅上有你也有我。</p>
<hr>
<p> 博主弄了个java学习资源的公众号，学习资源超级多，视频，电子书，最新开发工具一个都不能少，已全部分享到百度云盘，求资源共享，打造一个学习方便，工作方便的java公众号，开源开源，有需求的可以关注~撒花<br> <img src="http://7xqch5.com1.z0.glb.clouddn.com/javaLearn.PNG" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Java多线程 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[springMVC干货系列：从零搭建springMVC+mybatis（总纲）]]></title>
      <url>http://tengj.top/2016/05/02/springmvctotal/</url>
      <content type="html"><![CDATA[<h1 id="首页"><a href="#首页" class="headerlink" title="首页"></a>首页</h1><p>最近一段时间有个公司项目需求调研后，项目组决定使用springMVC+mybatis3+bootstrap来实现。<br>于是总结一下最近使用的心得，以及开发过程中遇到的问题。</p>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>SpringMVC是Java开发人员必须要掌握的一个框架，掌握它能令你工作上如鱼得水。<br>本系列会从零开始教你如何搭建springMVC的项目，包含spring注解，mybatis,日志系统，事务，多数据源，单元测试等居多功能。<br>让新手也能一步到位：搭建起来现在比较流行的框架<br>开发环境：<br>IED:myeclipse2014<br>jdk:1.7<br>tomcat:7<br>springmvc:4<br>mybatis: 3.3<br>junit: 4.11</p>
<h2 id="后期该系列博文目录如下"><a href="#后期该系列博文目录如下" class="headerlink" title="后期该系列博文目录如下"></a>后期该系列博文目录如下</h2><p><a href="http://tengj.top/2016/03/13/springmvcseries1/">从零搭建SpringMVC+mybatis（一）：maven WEB 项目的搭建</a><br><a href="http://tengj.top/2016/05/02/springmvcyuanli/">从零搭建SpringMVC+mybatis（二）：SpringMVC原理解析及常用注解</a><br><a href="http://tengj.top/2016/05/02/springmvc3iocdi/">从零搭建SpringMVC+mybatis（三）：Spring两大核心之IOC/DI学习</a><br><a href="http://tengj.top/2016/05/12/springmvc4aop/">从零搭建SpringMVC+mybatis（四）：Spring两大核心之AOP学习</a><br>从零搭建SpringMVC+mybatis（五）：SpringMVC整合mybatis<br>从零搭建SpringMVC+mybatis（六）：SpringMVC中日志系统log4j的配置<br>从零搭建SpringMVC+mybatis（七）：基于注解的事务配置，多数据源切换<br>从零搭建SpringMVC+mybatis（八）：SpringMVC使用Junit4单元测试<br>从零搭建SpringMVC+mybatis（九）：SpringMVC中定时任务的配置 (Quartz &amp; spring-task)<br>从零搭建SpringMVC+mybatis（十）： SpringMVC中 安全机制<br>从零搭建SpringMVC+mybatis（十一）： SpringMVC中 缓存实现方式  </p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>希望自己能坚持写下去，整理出一套入门简单的教程。</p>
<hr>
<p> 博主弄了个java学习资源的公众号，学习资源超级多，视频，电子书，最新开发工具一个都不能少，已全部分享到百度云盘，求资源共享，打造一个学习方便，工作方便的java公众号，开源开源，有需求的可以关注~撒花<br> <img src="http://7xqch5.com1.z0.glb.clouddn.com/javaLearn.PNG" alt=""></p>
]]></content>
      
        <categories>
            
            <category> springMVC干货系列 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> springMVC </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[springMVC干货系列：从零搭建springMVC+mybatis（三）：spring两大核心之IOC/DI学习]]></title>
      <url>http://tengj.top/2016/05/02/springmvc3iocdi/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>上篇讲了SpringMVC的实现原理以及常用的注解，其实里面都用到的spring的核心概念，那就是IOC/DI，今天给大家介绍下这核心概念IOC/DI。</p>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>分享Iteye的开涛这位技术牛人对Spring框架的IOC的理解,写得非常通俗易懂。</p>
<h2 id="IoC是什么"><a href="#IoC是什么" class="headerlink" title="IoC是什么"></a>IoC是什么</h2><p>Ioc—Inversion of Control，即“控制反转”，不是什么技术，而是一种设计思想。在Java开发中，Ioc意味着将你设计好的对象交给容器控制，而不是传统的在你的对象内部直接控制。如何理解好Ioc呢？理解好Ioc的关键是要明确“谁控制谁，控制什么，为何是反转（有反转就应该有正转了），哪些方面反转了”，那我们来深入分析一下：</p>
<ul>
<li><p>谁控制谁，控制什么：传统Java SE程序设计，我们直接在对象内部通过new进行创建对象，是程序主动去创建依赖对象；而IoC是有专门一个容器来创建这些对象，即由Ioc容器来控制对 象的创建；谁控制谁？当然是IoC 容器控制了对象；控制什么？那就是主要控制了外部资源获取（不只是对象包括比如文件等）。</p>
</li>
<li><p>为何是反转，哪些方面反转了：有反转就有正转，传统应用程序是由我们自己在对象中主动控制去直接获取依赖对象，也就是正转；而反转则是由容器来帮忙创建及注入依赖对象；为何是反转？因为由容器帮我们查找及注入依赖对象，对象只是被动的接受依赖对象，所以是反转；哪些方面反转了？依赖对象的获取被反转了。</p>
</li>
</ul>
<p>用图例说明一下，传统程序设计如图2-1，都是主动去创建相关对象然后再组合起来：<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/springmvc3_2.jpg" alt=""></p>
<p>当有了IoC/DI的容器后，在客户端类中不再主动去创建这些对象了，如图所示:<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/springmvc3_3.png" alt="">  </p>
<h2 id="IoC能做什么"><a href="#IoC能做什么" class="headerlink" title="IoC能做什么"></a>IoC能做什么</h2><p>IoC 不是一种技术，只是一种思想，一个重要的面向对象编程的法则，它能指导我们如何设计出松耦合、更优良的程序。传统应用程序都是由我们在类内部主动创建依赖对象，从而导致类与类之间高耦合，难于测试；有了IoC容器后，把创建和查找依赖对象的控制权交给了容器，由容器进行注入组合对象，所以对象与对象之间是 松散耦合，这样也方便测试，利于功能复用，更重要的是使得程序的整个体系结构变得非常灵活。</p>
<p>其实IoC对编程带来的最大改变不是从代码上，而是从思想上，发生了“主从换位”的变化。应用程序原本是老大，要获取什么资源都是主动出击，但是在IoC/DI思想中，应用程序就变成被动的了，被动的等待IoC容器来创建并注入它所需要的资源了。</p>
<p>IoC很好的体现了面向对象设计法则之一—— 好莱坞法则：“别找我们，我们找你”；即由IoC容器帮对象找相应的依赖对象并注入，而不是由对象主动去找。</p>
<h2 id="IoC和DI"><a href="#IoC和DI" class="headerlink" title="IoC和DI"></a>IoC和DI</h2><p> DI—Dependency Injection，即“依赖注入”：组件之间依赖关系由容器在运行期决定，形象的说，即由容器动态的将某个依赖关系注入到组件之中。依赖注入的目的并非为软件系统带来更多功能，而是为了提升组件重用的频率，并为系统搭建一个灵活、可扩展的平台。通过依赖注入机制，我们只需要通过简单的配置，而无需任何代码就可指定目标需要的资源，完成自身的业务逻辑，而不需要关心具体的资源来自何处，由谁实现。</p>
<p>理解DI的关键是：“谁依赖谁，为什么需要依赖，谁注入谁，注入了什么”，那我们来深入分析一下：</p>
<ul>
<li><p>谁依赖于谁：当然是应用程序依赖于IoC容器；</p>
</li>
<li><p>为什么需要依赖：应用程序需要IoC容器来提供对象需要的外部资源；</p>
</li>
<li><p>谁注入谁：很明显是IoC容器注入应用程序某个对象，应用程序依赖的对象；</p>
</li>
<li><p>注入了什么：就是注入某个对象所需要的外部资源（包括对象、资源、常量数据）。</p>
</li>
</ul>
<p>IoC和DI由什么关系呢？其实它们是同一个概念的不同角度描述，由于控制反转概念比较含糊（可能只是理解为容器控制对象这一个层面，很难让人想到谁来维护对象关系），所以2004年大师级人物Martin Fowler又给出了一个新的名字：“依赖注入”，相对IoC 而言，“依赖注入”明确描述了“被注入对象依赖IoC容器配置依赖对象”。</p>
<p>看过很多对Spring的Ioc理解的文章，好多人对Ioc和DI的解释都晦涩难懂，反正就是一种说不清，道不明的感觉，读完之后依然是一头雾水，感觉就是开涛这位技术牛人写得特别通俗易懂，他清楚地解释了IoC(控制反转) 和DI(依赖注入)中的每一个字，读完之后给人一种豁然开朗的感觉。我相信对于初学Spring框架的人对Ioc的理解应该是有很大帮助的。</p>
<h2 id="Spring配置的可选方案"><a href="#Spring配置的可选方案" class="headerlink" title="Spring配置的可选方案"></a>Spring配置的可选方案</h2><p>上面介绍了IOC跟DI的概念，接着，我将归纳一下使用Spring装备bean的基础知识，因为DI是Spring的最基本要素。所以在开发的基于Spring的应用时，我们随时都在使用这些技术。<br>当描述bean如何进行装配时，Spring具有非常大的灵活性，它提供了三种主要的装配机制：  </p>
<ul>
<li>在XML中进行显示配置</li>
<li>在Java中进行显示配置</li>
<li>隐式的bean发现机制和自动装配</li>
</ul>
<p>虽然看上去提供三种可选的配置方案会使Spring变得复杂。其实，你可以根据实际项目选择，对了，上面这三种其实可以混合搭配，目前博主使用的就是自动装配（也就是注解）+XML混合使用。这也是目前比较流行的方式。</p>
<p>下面将主要介绍自动化装备Bean+XML的混合搭配</p>
<h2 id="自动化装配bean"><a href="#自动化装配bean" class="headerlink" title="自动化装配bean"></a>自动化装配bean</h2><p>当前来说，相比较前面两种显示配置，从便利性方面来看，最强大的还是Spring的自动化配置。<br>Spring从两个角度来实现自动化装配：  </p>
<ul>
<li>组件扫描（component scanning）:Spring会自动发现应用上下文中所创建的bean</li>
<li>自动装配（autowiring）：Spring自动满足bean之间的依赖</li>
</ul>
<p>组件扫描和自动装配组合在一起就能发挥出强大的威力，他们能够将你的显示配置降低到最少。</p>
<p>这里组件扫描我们通过在XML里面使用Spring context命名空间的<context:component-scan>元素来启用。<br>配置如下：  </context:component-scan></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 加了下面2局就可以直接使用spring注解 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 自动扫描的包名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">context:component-scan</span> <span class="attribute">base-package</span>=<span class="value">"com.tengj.demo"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 默认的注解映射的支持 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">mvc:annotation-driven</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>context:component-scan里面的 base-package指明了被扫描的包的路径是在com.tengj.demo下面的所有类  </p>
<p>其中mvc:annotation-driven 是开启默认的注解映射的支持，这样就能认到被使用的注解。<br>我们在com.tengj.demo下面创建一个UserController控制类：  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span></span>&#123;</span><br><span class="line">    <span class="annotation">@Autowired</span></span><br><span class="line">	UserService userService;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>UserService是我们的一个接口，代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>UserServiceImpl是UserService的实现类：  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Service</span>(<span class="string">"userService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line"><span class="annotation">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"新增用户"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>写个单元测试类来验证这个userService是否已经自动注入了  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line"><span class="annotation">@ContextConfiguration</span>(&#123;<span class="string">"classpath:spring/applicationContext.xml"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserConTrollerTest</span> </span>&#123;</span><br><span class="line">	<span class="annotation">@Autowired</span></span><br><span class="line">	UserService userService;</span><br><span class="line">	</span><br><span class="line">	<span class="annotation">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkServiceIsNull</span><span class="params">()</span></span>&#123;</span><br><span class="line">		Assert.assertNotNull(userService);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>UserConTrollerTest使用了Spring的SpringJUnit4ClassRunner，以便在测试开始的时候自动创建Spring的应用上下文，注解@ContextConfiguration会告诉它需要在UserConTrollerTest中加载配置。所以读取applicationContext.xml配置文件，配置文件里面有<context:component-scan base-package="com.tengj.demo">这个启用自动扫描的元素。  </context:component-scan></p>
<p>为了证明这一点，在测试代码中有一个UserService类型的属性，并且这个属性带有@Autowired注解，以便于将UserService bean注入到测试代码之中。最后，会有一个简单的测试方法断言userService属性不为null。如果它不为null的话，就意味着Spring能够发现UserService类，自动在Spring上下文中将其创建为bean并将其注入到测试代码之中。  </p>
<p>在代码中右键执行Junit Test，如果执行如下是绿色的就表示成功。  </p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/springmvc3_1.png" alt=""></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这就是一个简单的DI注入测试，是不是觉得很方便，要注入什么属性只要定义一下属性。剩下都交给Spring容器来搞定。Junit单元测试写法后续会专门写一篇来介绍，这也是非常重要的一个验证自己所写代码是否正确的手段。</p>
<hr>
<p>一直觉得自己写的不是技术，而是情怀，一篇篇文章是自己这一路走来的痕迹。靠专业技能的成功是最具可复制性的，希望我的这条路能让你少走弯路，希望我能帮你抹去知识的蒙尘，希望我能帮你理清知识的脉络，希望未来技术之巅上有你也有我。</p>
<hr>
<p> 博主弄了个java学习资源的公众号，学习资源超级多，视频，电子书，最新开发工具一个都不能少，已全部分享到百度云盘，求资源共享，打造一个学习方便，工作方便的java公众号，开源开源，有需求的可以关注~撒花<br> <img src="http://7xqch5.com1.z0.glb.clouddn.com/javaLearn.PNG" alt=""></p>
]]></content>
      
        <categories>
            
            <category> springMVC干货系列 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> springMVC </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[springMVC干货系列：从零搭建springMVC+mybatis（二）：springMVC原理解析及常用注解]]></title>
      <url>http://tengj.top/2016/05/02/springmvcyuanli/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>上篇文章介绍了maven WEB 项目的搭建，基本的配置文件也都贴出来了，今天就来介绍下SpringMVC的工作原理以及工作中常用的注解。为以后开发打下坚实的基础。</p>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="SpringMVC框架介绍"><a href="#SpringMVC框架介绍" class="headerlink" title="SpringMVC框架介绍"></a>SpringMVC框架介绍</h2><p>SpringMVC就是通过DispatcherServlet将一堆组件串联起来的Web框架。</p>
<ul>
<li>Spring MVC属于SpringFrameWork的后续产品，已经融合在Spring Web Flow里面。</li>
</ul>
<blockquote>
<p>Spring 框架提供了构建 Web 应用程序的全功能 MVC 模块。使用 Spring 可插入的 MVC 架构，可以选择是使用内置的 Spring Web 框架还是 Struts 这样的 Web 框架。通过策略接口，Spring 框架是高度可配置的，而且包含多种视图技术，例如 JavaServer Pages（JSP）技术、Velocity、Tiles、iText 和 POI。Spring MVC 框架并不知道使用的视图，所以不会强迫您只使用 JSP 技术。<br>Spring MVC 分离了控制器、模型对象、分派器以及处理程序对象的角色，这种分离让它们更容易进行定制</p>
</blockquote>
<ul>
<li>Spring的MVC框架主要由DispatcherServlet、处理器映射、处理器(控制器)、视图解析器、视图组成。</li>
</ul>
<h2 id="SpringMVC原理图"><a href="#SpringMVC原理图" class="headerlink" title="SpringMVC原理图"></a>SpringMVC原理图</h2><p><img src="http://7xqch5.com1.z0.glb.clouddn.com/springmvc2_1.jpg" alt=""></p>
<h2 id="SpringMVC接口解释"><a href="#SpringMVC接口解释" class="headerlink" title="SpringMVC接口解释"></a>SpringMVC接口解释</h2><p><strong>DispatcherServlet接口</strong>：<br>Spring提供的前端控制器，所有的请求都有经过它来统一分发。在DispatcherServlet将请求分发给Spring Controller之前，需要借助于Spring提供的HandlerMapping定位到具体的Controller。</p>
<p><strong>HandlerMapping接口：</strong><br>能够完成客户请求到Controller映射。</p>
<p><strong>Controller接口：</strong><br>需要为并发用户处理上述请求，因此实现Controller接口时，必须保证线程安全并且可重用。</p>
<p>Controller将处理用户请求，这和Struts Action扮演的角色是一致的。一旦Controller处理完用户请求，则返回ModelAndView对象给DispatcherServlet前端控制器，ModelAndView中包含了模型（Model）和视图（View）。</p>
<p>从宏观角度考虑，DispatcherServlet是整个Web应用的控制器；从微观考虑，Controller是单个Http请求处理过程中的控制器，而ModelAndView是Http请求过程中返回的模型（Model）和视图（View）。</p>
<p><strong>ViewResolver接口：</strong><br>Spring提供的视图解析器（ViewResolver）在Web应用中查找View对象，从而将相应结果渲染给客户。</p>
<h2 id="SpringMVC运行原理"><a href="#SpringMVC运行原理" class="headerlink" title="SpringMVC运行原理"></a>SpringMVC运行原理</h2><ol>
<li><p>客户端请求提交到DispatcherServlet</p>
</li>
<li><p>由DispatcherServlet控制器查询一个或多个HandlerMapping，找到处理请求的Controller</p>
</li>
<li><p>DispatcherServlet将请求提交到Controller</p>
</li>
<li><p>Controller调用业务逻辑处理后，返回ModelAndView</p>
</li>
<li><p>DispatcherServlet查询一个或多个ViewResoler视图解析器，找到ModelAndView指定的视图</p>
</li>
<li><p>视图负责将结果显示到客户端</p>
</li>
</ol>
<p>DispatcherServlet是整个Spring MVC的核心。它负责接收HTTP请求组织协调Spring MVC的各个组成部分。其主要工作有以下三项：</p>
<ol>
<li>截获符合特定格式的URL请求。</li>
<li>初始化DispatcherServlet上下文对应的WebApplicationContext，并将其与业务层、持久化层的WebApplicationContext建立关联。</li>
<li>初始化Spring MVC的各个组成组件，并装配到DispatcherServlet中。</li>
</ol>
<p>结合项目理解:<br>1.大家由上面原理也看明白了，DispatcherServlet是整个Spring MVC的核心，SpringMVC所有的请求都会通过这个前端控制器。它配置的地方是在web.xml里面，配置如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">servlet-name</span>&gt;</span>springmvctouchbaidu<span class="tag">&lt;/<span class="title">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="title">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="title">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">param-value</span>&gt;</span>classpath:spring/applicationContext.xml<span class="tag">&lt;/<span class="title">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="title">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>配置的时候还指明了contextConfigLocation，这样就会去加载这个applicationContext.xml了。</p>
<p>2.原理第2点中由DispatcherServlet控制器查询一个或多个HandlerMapping，找到处理请求的Controller。这里其实是通过在applicationContext-mvc.xml配置了扫描路径以及开启了注解驱动来实现的。<br>applicationContext-mvc.xml中的配置：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">context:component-scan</span> <span class="attribute">base-package</span>=<span class="value">"com.tengj.demo"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>context:component-scan说明了要扫描com.tengj.demo这个包下所有的类。这里要注意一下，大家以后开发中有用到注解的类一定都要在这个demo包下，不然就会抛异常的。</p>
<p>加载了扫描路径后，还要开启注解驱动，这样才能认到代码中使用到的注解，比如@Controller这个注解。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">mvc:annotation-driven</span> /&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>3.ViewResoler视图解析器对应配置里面的<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">bean</span> <span class="attribute">class</span>=<span class="value">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"prefix"</span> <span class="attribute">value</span>=<span class="value">"/WEB-INF/pages/"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"suffix"</span> <span class="attribute">value</span>=<span class="value">".jsp"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>这样，当controller中方法返回的是<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="string">"index"</span>;</span><br></pre></td></tr></table></figure></p>
<p>的时候，实际是指向了/WEB-INF/pages/index.jsp这个页面。</p>
<h2 id="常用到的注解"><a href="#常用到的注解" class="headerlink" title="常用到的注解"></a>常用到的注解</h2><p>当我们使用了自动扫描+注解的方式后，就不需要在applicationContext-mvc.xml里面配置类的bean了，要引用类直接在成员变量上面加行注解，set/get方法也省了。超级方便，下面就列出常规开发中常用的注解。</p>
<h3 id="Component"><a href="#Component" class="headerlink" title="@Component"></a>@Component</h3><p>@Component<br>是所有受Spring 管理组件的通用形式，@Component注解可以放在类的头上，@Component不推荐使用。</p>
<h3 id="使用-Controller定义一个Controller控制器"><a href="#使用-Controller定义一个Controller控制器" class="headerlink" title="使用@Controller定义一个Controller控制器"></a>使用@Controller定义一个Controller控制器</h3><p>@Controller对应表现层的Bean，也就是Action，例如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"> ……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>使用@Controller注解标识UserController之后，就表示要把UserController交给Spring容器管理，在Spring容器中会存在一个名字为”userController”的action，这个名字是根据UserController类名来取的。注意：如果@Controller不指定其value【@Controller】，则默认的bean名字为这个类的类名首字母小写，如果指定value【@Controller(value=”UserController”)】或者【@Controller(“UserController”)】，则使用value作为bean的名字。</p>
<h3 id="使用-Service定义一个业务层Bean"><a href="#使用-Service定义一个业务层Bean" class="headerlink" title="使用@Service定义一个业务层Bean"></a>使用@Service定义一个业务层Bean</h3><p>@Service对应的是业务层Bean，例如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Service</span>(<span class="string">"userService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line">………</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>@Service(“userService”)注解是告诉Spring，当Spring要创建UserServiceImpl的的实例时，bean的名字必须叫做”userService”，这样当Action需要使用UserServiceImpl的的实例时,就可以由Spring创建好的”userService”，然后注入给Action：在Action只需要声明一个名字叫“userService”的变量来接收由Spring注入的”userService”即可，具体代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注入userService</span></span><br><span class="line"><span class="annotation">@Resource</span>(name=<span class="string">"userService"</span>)</span><br><span class="line">UserService userService;</span><br></pre></td></tr></table></figure></p>
<p>注意：在UserController声明的“userService”变量的类型必须是“UserServiceImpl”或者是其父类“UserService”，否则由于类型不一致而无法注入，由于UserController中的声明的“userService”变量使用了@Resource注解去标注，并且指明了其name = “userService”，这就等于告诉Spring，说我UserController要实例化一个“userService”，你Spring快点帮我实例化好，然后给我，当Spring看到userService变量上的@Resource的注解时，根据其指明的name属性可以知道，UserController中需要用到一个UserServiceImpl的实例，此时Spring就会把自己创建好的名字叫做”userService”的UserServiceImpl的实例注入给UserController中的“userService”变量，帮助UserController完成userService的实例化，这样在UserController中就不用通过“UserService userService = new UserServiceImpl();”这种最原始的方式去实例化userService了。  </p>
<p>如果没有Spring，那么当UserController需要使用UserServiceImpl时，必须通过“UserService userService = new UserServiceImpl();”主动去创建实例对象，但使用了Spring之后，UserController要使用UserServiceImpl时，就不用主动去创建UserServiceImpl的实例了，创建UserServiceImpl实例已经交给Spring来做了，Spring把创建好的UserServiceImpl实例给UserController，UserController拿到就可以直接用了。  </p>
<p>UserController由原来的主动创建UserServiceImpl实例后就可以马上使用，变成了被动等待由Spring创建好UserServiceImpl实例之后再注入给UserController，UserController才能够使用。这说明UserController对“UserServiceImpl”类的“控制权”已经被“反转”了，原来主动权在自己手上，自己要使用“UserServiceImpl”类的实例，自己主动去new一个出来马上就可以使用了，但现在自己不能主动去new“UserServiceImpl”类的实例，new“UserServiceImpl”类的实例的权力已经被Spring拿走了，只有Spring才能够new“UserServiceImpl”类的实例，而UserController只能等Spring创建好“UserServiceImpl”类的实例后，再“恳求”Spring把创建好的“UserServiceImpl”类的实例给他，这样他才能够使用“UserServiceImpl”，这就是Spring核心思想“控制反转”，也叫“依赖注入”。 </p>
<p>“依赖注入”也很好理解，UserController需要使用UserServiceImpl干活，那么就是对UserServiceImpl产生了依赖，Spring把Acion需要依赖的UserServiceImpl注入(也就是“给”)给UserController，这就是所谓的“依赖注入”。对UserController而言，UserController依赖什么东西，就请求Spring注入给他，对Spring而言，UserController需要什么，Spring就主动注入给他。</p>
<h3 id="使用-Repository定义一个数据访问层Bean"><a href="#使用-Repository定义一个数据访问层Bean" class="headerlink" title="使用@Repository定义一个数据访问层Bean"></a>使用@Repository定义一个数据访问层Bean</h3><p>@Repository对应数据访问层Bean ，例如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Repository</span>(value=<span class="string">"userDao"</span>)</span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"> ………</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p>
<p>@Repository(value=”userDao”)注解是告诉Spring，让Spring创建一个名字叫“userDao”的UserDao实例。</p>
<p>当Service需要使用Spring创建的名字叫“userDao”的UserDao实例时，就可以使用@Resource(name = “userDao”)注解告诉Spring，Spring把创建好的userDao注入给Service即可。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注入userDao</span></span><br><span class="line"><span class="annotation">@Resource</span>(name = <span class="string">"userDao"</span>)</span><br><span class="line"><span class="keyword">private</span> UserDao userDao;</span><br></pre></td></tr></table></figure></p>
<h3 id="Resource跟-Autowired比较"><a href="#Resource跟-Autowired比较" class="headerlink" title="@Resource跟@Autowired比较"></a>@Resource跟@Autowired比较</h3><p>上面介绍中Controller中注入userService或者 Service层里面注入dao都是用@Resource标签，其实也可以使用@Autowired来替代，但是建议使用@Resource。下面说说这2者的区别：</p>
<ol>
<li>@Autowired和@Resource都可以用来装配bean，都可以写在字段上，或者方法上。</li>
<li>@Autowired属于Spring的；@Resource为JSR-250标准的注释，属于J2EE的。</li>
<li><p>@Autowired默认按类型装配，默认情况下必须要求依赖对象必须存在，如果要允许null值，可以设置它的required属性为false，例如：@Autowired(required=false) ，如果我们想使用名称装配可以结合@Qualifier注解进行使用<br>例如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Autowired</span></span><br><span class="line"><span class="annotation">@Qualifier</span>(<span class="string">"baseDao"</span>)</span><br><span class="line"><span class="keyword">private</span> BaseDao baseDao;</span><br></pre></td></tr></table></figure>
</li>
<li><p>@Resource，默认按照名称进行装配，名称可以通过name属性进行指定，如果没有指定name属性，当注解写在字段上时，默认取字段名进行安装名称查找，如果注解写在setter方法上默认取属性名进行装配。当找不到与名称匹配的bean时才按照类型进行装配。但是需要注意的是，如果name属性一旦指定，就只会按照名称进行装配。<br>例如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Resource</span>(name=<span class="string">"baseDao"</span>)</span><br><span class="line"><span class="keyword">private</span> BaseDao baseDao;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>5.之所以推荐使用@Resource，因为这个注解是属于J2EE的，减少了与spring的耦合。这样代码看起就比较优雅。</p>
<h3 id="使用-RequestMapping来映射Request请求与处理器"><a href="#使用-RequestMapping来映射Request请求与处理器" class="headerlink" title="使用@RequestMapping来映射Request请求与处理器"></a>使用@RequestMapping来映射Request请求与处理器</h3><p>SpringMVC使用@RequestMapping注解为控制器制定可以处理哪些URL请求<br>在控制器的类定义及方法定义处都可以标注</p>
<ul>
<li>类定义处：提供初步的请求映射信息。相对于WEB应用的根目录</li>
<li>方法处：提供进一步的细分映射信息。相对于类定义处的URL，若类定义处未标注@RequestMapping，则方法处标记的URL相对于WEB应用的根目录。<br>举个列子：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Controller</span></span><br><span class="line"><span class="annotation">@RequestMapping</span>(value=<span class="string">"/test"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span></span>&#123;</span><br><span class="line">    <span class="annotation">@RequestMapping</span>(value=<span class="string">"/view"</span>,method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"进来了"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>上面这样，只要地址访问<a href="http://localhost:8080/SpringMVCMybatis/test/view" target="_blank" rel="external">http://localhost:8080/SpringMVCMybatis/test/view</a> 就能进入这个index方法了，其中使用method属性来指定请求是get还是post。  </p>
<h4 id="（一）使用带占位符URI-PathVariable"><a href="#（一）使用带占位符URI-PathVariable" class="headerlink" title="（一）使用带占位符URI@PathVariable"></a>（一）使用带占位符URI@PathVariable</h4><p>带占位符的URL是Spring3.0新增的功能，该功能在SpringMVC向REST目标挺进发展过程中具有里程碑的意义</p>
<p>通过@PathVariable可以将URL中占位符参数绑定到控制器处理方法的入参中：URL中的{xxx}占位符可以通过@PathVariable(“xxx”)绑定到操作方法入参中。<br>例子：  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * <span class="doctag">@RequestMapping</span> 可以来映射URL中的占位符到目标方法的参数中</span><br><span class="line"> * <span class="doctag">@param</span> id</span><br><span class="line"> * <span class="doctag">@return</span></span><br><span class="line"> */</span></span><br><span class="line"><span class="annotation">@RequestMapping</span>(<span class="string">"/testPathVariable/&#123;id&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testPathVariable</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> String id)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"testPathVariable id="</span>+id);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="（二）使用-RequestParam绑定HttpServletRequest请求参数到控制器方法参数"><a href="#（二）使用-RequestParam绑定HttpServletRequest请求参数到控制器方法参数" class="headerlink" title="（二）使用@RequestParam绑定HttpServletRequest请求参数到控制器方法参数"></a>（二）使用@RequestParam绑定HttpServletRequest请求参数到控制器方法参数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@RequestMapping</span> ( <span class="string">"requestParam"</span> )</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">testRequestParam</span><span class="params">( @RequestParam(required=<span class="keyword">false</span>)</span> String name, @<span class="title">RequestParam</span> <span class="params">( <span class="string">"age"</span> )</span> <span class="keyword">int</span> age) </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">"requestParam"</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在上面代码中利用@RequestParam从HttpServletRequest 中绑定了参数name 到控制器方法参数name ，绑定了参数age 到控制器方法参数age 。值得注意的是和@PathVariable 一样，当你没有明确指定从request 中取哪个参数时，Spring 在代码是debug 编译的情况下会默认取更方法参数同名的参数，如果不是debug 编译的就会报错。此外，当需要从request 中绑定的参数和方法的参数名不相同的时候，也需要在@RequestParam中明确指出是要绑定哪个参数。在上面的代码中如果我访问/requestParam.do?name=hello&amp;age=1 则Spring 将会把request请求参数name 的值hello 赋给对应的处理方法参数name ，把参数age 的值1 赋给对应的处理方法参数age 。</p>
<p>在@RequestParam 中除了指定绑定哪个参数的属性value 之外，还有一个属性required ，它表示所指定的参数是否必须在request 属性中存在，默认是true ，表示必须存在，当不存在时就会报错。在上面代码中我们指定了参数name 的required 的属性为false ，而没有指定age 的required 属性，这时候如果我们访问/requestParam.do而没有传递参数的时候，系统就会抛出异常，因为age 参数是必须存在的，而我们没有指定。而如果我们访问/requestParam.do?age=1 的时候就可以正常访问，因为我们传递了必须的参数age ，而参数name 是非必须的，不传递也可以。  </p>
<h4 id="（三）使用-CookieValue绑定cookie的值到Controller方法参数"><a href="#（三）使用-CookieValue绑定cookie的值到Controller方法参数" class="headerlink" title="（三）使用@CookieValue绑定cookie的值到Controller方法参数"></a>（三）使用@CookieValue绑定cookie的值到Controller方法参数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@RequestMapping</span> ( <span class="string">"cookieValue"</span> )</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testCookieValue</span><span class="params">( @CookieValue ( <span class="string">"hello"</span> )</span> String cookieValue, @CookieValue String hello) </span>&#123;</span><br><span class="line">       System. out .println(cookieValue + <span class="string">"-----------"</span> + hello);</span><br><span class="line">       <span class="keyword">return</span> <span class="string">"cookieValue"</span> ;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>在上面的代码中我们使用@<strong>CookieValue</strong> 绑定了cookie 的值到方法参数上。上面一共绑定了两个参数，一个是明确指定要绑定的是名称为hello 的cookie 的值，一个是没有指定。使用没有指定的形式的规则和@<strong>PathVariable</strong>、@<strong>RequestParam</strong> 的规则是一样的，即在debug 编译模式下将自动获取跟方法参数名同名的cookie 值。  </p>
<h4 id="（四）使用-RequestHeader注解绑定-HttpServletRequest头信息到Controller方法参数"><a href="#（四）使用-RequestHeader注解绑定-HttpServletRequest头信息到Controller方法参数" class="headerlink" title="（四）使用@RequestHeader注解绑定 HttpServletRequest头信息到Controller方法参数"></a>（四）使用@RequestHeader注解绑定 HttpServletRequest头信息到Controller方法参数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@RequestMapping</span> ( <span class="string">"testRequestHeader"</span> )</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testRequestHeader</span><span class="params">( @RequestHeader ( <span class="string">"Host"</span> )</span> String hostAddr, @RequestHeader String Host, @RequestHeader String host ) </span>&#123;</span><br><span class="line">    System. out .println(hostAddr + <span class="string">"-----"</span> + Host + <span class="string">"-----"</span> + host );</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"requestHeader"</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在上面的代码中我们使用了 @<strong>RequestHeader</strong> 绑定了 HttpServletRequest 请求头 host 到Controller 的方法参数。上面方法的三个参数都将会赋予同一个值，由此我们可以知道在绑定请求头参数到方法参数的时候规则和 @<strong>PathVariable</strong> 、 @<strong>RequestParam</strong> 以及 @<strong>CookieValue</strong> 是一样的，即没有指定绑定哪个参数到方法参数的时候，在 debug 编译模式下将使用方法参数名作为需要绑定的参数。但是有一点 @<strong>RequestHeader</strong> 跟另外三种绑定方式是不一样的，那就是在使用 @<strong>RequestHeader </strong>的时候是大小写不敏感的，即 @RequestHeader(“Host”) 和 @RequestHeader(“host”) 绑定的都是 Host 头信息。记住在 @<strong>PathVariable</strong> 、 @<strong>RequestParam</strong> 和 @<strong>CookieValue</strong> 中都是大小写敏感的。  </p>
<h4 id="（五）-RequestMapping的一些高级应用"><a href="#（五）-RequestMapping的一些高级应用" class="headerlink" title="（五）@RequestMapping的一些高级应用"></a>（五）@RequestMapping的一些高级应用</h4><p>在RequestMapping 中除了指定请求路径value 属性外，还有其他的属性可以指定，如params 、method 和headers 。这样属性都可以用于缩小请求的映射范围。<br><strong>1.params属性</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@RequestMapping</span> (value= <span class="string">"testParams"</span> , params=&#123; <span class="string">"param1=value1"</span> , <span class="string">"param2"</span> , <span class="string">"!param3"</span> &#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testParams</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       System. out .println( <span class="string">"test Params..........."</span> );</span><br><span class="line">       <span class="keyword">return</span> <span class="string">"testParams"</span> ;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>在上面的代码中我们用@RequestMapping 的params 属性指定了三个参数，这些参数都是针对请求参数而言的，它们分别表示参数param1 的值必须等于value1 ，参数param2 必须存在，值无所谓，参数param3 必须不存在，只有当请求/testParams.do 并且满足指定的三个参数条件的时候才能访问到该方法。所以当请求/testParams.do?param1=value1&amp;param2=value2 的时候能够正确访问到该testParams 方法，当请求/testParams.do?param1=value1&amp;param2=value2&amp;param3=value3 的时候就不能够正常的访问到该方法，因为在@RequestMapping 的params 参数里面指定了参数param3 是不能存在的。</p>
<p><strong>2.method属性</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@RequestMapping</span> (value= <span class="string">"testMethod"</span> , method=&#123;RequestMethod. GET , RequestMethod. DELETE &#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">"method"</span> ;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>在上面的代码中就使用method 参数限制了以GET 或DELETE 方法请求/testMethod.do 的时候才能访问到该Controller 的testMethod 方法。</p>
<p><strong>3.headers属性</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@RequestMapping</span> (value= <span class="string">"testHeaders"</span> , headers=&#123; <span class="string">"host=localhost"</span> , <span class="string">"Accept"</span> &#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testHeaders</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">"headers"</span> ;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>headers 属性的用法和功能与params 属性相似。在上面的代码中当请求/testHeaders.do 的时候只有当请求头包含Accept 信息，且请求的host 为localhost 的时候才能正确的访问到testHeaders 方法。  </p>
<h4 id="（六）以-RequestMapping标记的处理器方法支持的方法参数和返回类型"><a href="#（六）以-RequestMapping标记的处理器方法支持的方法参数和返回类型" class="headerlink" title="（六）以@RequestMapping标记的处理器方法支持的方法参数和返回类型"></a>（六）以@RequestMapping标记的处理器方法支持的方法参数和返回类型</h4><h5 id="1-支持的方法参数类型"><a href="#1-支持的方法参数类型" class="headerlink" title="1. 支持的方法参数类型"></a>1. 支持的方法参数类型</h5><ol>
<li><p>HttpServlet 对象，主要包括HttpServletRequest 、HttpServletResponse 和HttpSession 对象。 这些参数Spring 在调用处理器方法的时候会自动给它们赋值，所以当在处理器方法中需要使用到这些对象的时候，可以直接在方法上给定一个方法参数的申明，然后在方法体里面直接用就可以了。但是有一点需要注意的是在使用HttpSession 对象的时候，如果此时HttpSession 对象还没有建立起来的话就会有问题。</p>
</li>
<li><p>Spring 自己的WebRequest 对象。 使用该对象可以访问到存放在HttpServletRequest 和HttpSession 中的属性值。</p>
</li>
<li><p>InputStream 、OutputStream 、Reader 和Writer 。 InputStream 和Reader 是针对HttpServletRequest 而言的，可以从里面取数据；OutputStream 和Writer 是针对HttpServletResponse 而言的，可以往里面写数据。</p>
</li>
<li><p>使用@PathVariable 、@RequestParam 、@CookieValue 和@RequestHeader 标记的参数。</p>
</li>
<li><p>使用@ModelAttribute 标记的参数。</p>
</li>
<li><p>java.util.Map 、Spring 封装的Model 和ModelMap 。 这些都可以用来封装模型数据，用来给视图做展示。</p>
</li>
<li><p>实体类。 可以用来接收上传的参数。</p>
</li>
<li><p>Spring 封装的MultipartFile 。 用来接收上传文件的。</p>
</li>
<li><p>Spring 封装的Errors 和BindingResult 对象。 这两个对象参数必须紧接在需要验证的实体对象参数之后，它里面包含了实体对象的验证结果。   </p>
</li>
</ol>
<h5 id="2-支持的返回类型"><a href="#2-支持的返回类型" class="headerlink" title="2. 支持的返回类型"></a>2. 支持的返回类型</h5><ol>
<li><p>一个包含模型和视图的ModelAndView 对象。</p>
</li>
<li><p>一个模型对象，这主要包括Spring 封装好的Model 和ModelMap ，以及java.util.Map ，当没有视图返回的时候视图名称将由RequestToViewNameTranslator 来决定。</p>
</li>
<li><p>一个View 对象。这个时候如果在渲染视图的过程中模型的话就可以给处理器方法定义一个模型参数，然后在方法体里面往模型中添加值。</p>
</li>
<li><p>一个String 字符串。这往往代表的是一个视图名称。这个时候如果需要在渲染视图的过程中需要模型的话就可以给处理器方法一个模型参数，然后在方法体里面往模型中添加值就可以了。</p>
</li>
<li><p>返回值是void 。这种情况一般是我们直接把返回结果写到HttpServletResponse 中了，如果没有写的话，那么Spring 将会利用RequestToViewNameTranslator 来返回一个对应的视图名称。如果视图中需要模型的话，处理方法与返回字符串的情况相同。</p>
</li>
<li><p>如果处理器方法被注解@ResponseBody 标记的话，那么处理器方法的任何返回类型都会通过HttpMessageConverters 转换之后写到HttpServletResponse 中，而不会像上面的那些情况一样当做视图或者模型来处理。</p>
</li>
<li><p>除以上几种情况之外的其他任何返回类型都会被当做模型中的一个属性来处理，而返回的视图还是由RequestToViewNameTranslator 来决定，添加到模型中的属性名称可以在该方法上用@ModelAttribute(“attributeName”) 来定义，否则将使用返回类型的类名称的首字母小写形式来表示。使用@ModelAttribute 标记的方法会在@RequestMapping 标记的方法执行之前执行。</p>
</li>
</ol>
<h4 id="（七）使用-ModelAttribute-和-SessionAttributes-传递和保存数据"><a href="#（七）使用-ModelAttribute-和-SessionAttributes-传递和保存数据" class="headerlink" title="（七）使用 @ModelAttribute 和 @SessionAttributes 传递和保存数据"></a>（七）使用 @ModelAttribute 和 @SessionAttributes 传递和保存数据</h4><p>SpringMVC 支持使用 @<strong>ModelAttribute</strong> 和 @<strong>SessionAttributes</strong> 在不同的模型和控制器之间共享数据。 <strong>@ModelAttribute </strong>主要有两种使用方式，一种是标注在方法上，一种是标注在 Controller 方法参数上。</p>
<p>当 @<strong>ModelAttribute</strong> 标记在方法上的时候，该方法将在处理器方法执行之前执行，然后把返回的对象存放在 session 或模型属性中，属性名称可以使用 @<strong>ModelAttribute</strong>(“attributeName”) 在标记方法的时候指定，若未指定，则使用返回类型的类名称（首字母小写）作为属性名称。关于 @ModelAttribute 标记在方法上时对应的属性是存放在 session 中还是存放在模型中，我们来做一个实验，看下面一段代码。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Controller</span></span><br><span class="line"><span class="annotation">@RequestMapping</span> ( <span class="string">"/myTest"</span> )</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@ModelAttribute</span> ( <span class="string">"hello"</span> )</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getModel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       System. out .println( <span class="string">"-------------Hello---------"</span> );</span><br><span class="line">       <span class="keyword">return</span> <span class="string">"world"</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@ModelAttribute</span> ( <span class="string">"intValue"</span> )</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getInteger</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       System. out .println( <span class="string">"-------------intValue---------------"</span> );</span><br><span class="line">       <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@RequestMapping</span> ( <span class="string">"sayHello"</span> )</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">( @ModelAttribute ( <span class="string">"hello"</span> )</span> String hello, @<span class="title">ModelAttribute</span> <span class="params">( <span class="string">"intValue"</span> )</span> <span class="keyword">int</span> num, @<span class="title">ModelAttribute</span> <span class="params">( <span class="string">"user2"</span> )</span> User user, Writer writer, HttpSession session) <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">       writer.write( <span class="string">"Hello "</span> + hello + <span class="string">" , Hello "</span> + user.getUsername() + num);</span><br><span class="line">       writer.write( <span class="string">"\r"</span> );</span><br><span class="line">       Enumeration enume = session.getAttributeNames();</span><br><span class="line">       <span class="keyword">while</span> (enume.hasMoreElements())</span><br><span class="line">           writer.write(enume.nextElement() + <span class="string">"\r"</span> );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@ModelAttribute</span> ( <span class="string">"user2"</span> )</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       System. out .println( <span class="string">"---------getUser-------------"</span> );</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> User(<span class="number">3</span>, <span class="string">"user2"</span> );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>当我们请求 /myTest/sayHello.do 的时候使用 @ModelAttribute 标记的方法会先执行，然后把它们返回的对象存放到模型中。最终访问到 sayHello 方法的时候，使用 @ModelAttribute 标记的方法参数都能被正确的注入值。执行结果如下所示：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello world,Hello user210</span><br></pre></td></tr></table></figure></p>
<p>由执行结果我们可以看出来，此时 session 中没有包含任何属性，也就是说上面的那些对象都是存放在模型属性中，而不是存放在 session 属性中。那要如何才能存放在 session 属性中呢？这个时候我们先引入一个新的概念 @SessionAttributes ，它的用法会在讲完 @ModelAttribute 之后介绍，这里我们就先拿来用一下。我们在 MyController 类上加上 @SessionAttributes 属性标记哪些是需要存放到 session 中的。看下面的代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Controller</span></span><br><span class="line"><span class="annotation">@RequestMapping</span> ( <span class="string">"/myTest"</span> )</span><br><span class="line"><span class="annotation">@SessionAttributes</span> (value=&#123; <span class="string">"intValue"</span> , <span class="string">"stringValue"</span> &#125;, types=&#123;User. <span class="class"><span class="keyword">class</span> &#125;)</span><br><span class="line"><span class="title">public</span> <span class="title">class</span> <span class="title">MyController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@ModelAttribute</span> ( <span class="string">"hello"</span> )</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getModel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       System. out .println( <span class="string">"-------------Hello---------"</span> );</span><br><span class="line">       <span class="keyword">return</span> <span class="string">"world"</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@ModelAttribute</span> ( <span class="string">"intValue"</span> )</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getInteger</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       System. out .println( <span class="string">"-------------intValue---------------"</span> );</span><br><span class="line">       <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="annotation">@RequestMapping</span> ( <span class="string">"sayHello"</span> )</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">(Map&lt;String, Object&gt; map, @ModelAttribute ( <span class="string">"hello"</span> )</span> String hello, @<span class="title">ModelAttribute</span> <span class="params">( <span class="string">"intValue"</span> )</span> <span class="keyword">int</span> num, @<span class="title">ModelAttribute</span> <span class="params">( <span class="string">"user2"</span> )</span> User user, Writer writer, HttpServletRequest request) <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">       map.put( <span class="string">"stringValue"</span> , <span class="string">"String"</span> );</span><br><span class="line">       writer.write( <span class="string">"Hello "</span> + hello + <span class="string">" , Hello "</span> + user.getUsername() + num);</span><br><span class="line">       writer.write( <span class="string">"\r"</span> );</span><br><span class="line">       HttpSession session = request.getSession();</span><br><span class="line">       Enumeration enume = session.getAttributeNames();</span><br><span class="line">       <span class="keyword">while</span> (enume.hasMoreElements())</span><br><span class="line">           writer.write(enume.nextElement() + <span class="string">"\r"</span> );</span><br><span class="line">       System. out .println(session);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@ModelAttribute</span> ( <span class="string">"user2"</span> )</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       System. out .println( <span class="string">"---------getUser-------------"</span> );</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> User(<span class="number">3</span>, <span class="string">"user2"</span> );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在上面代码中我们指定了属性为 intValue 或 stringValue 或者类型为 User 的都会放到 Session中，利用上面的代码当我们访问 /myTest/sayHello.do 的时候，结果如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello world,Hello user210</span><br></pre></td></tr></table></figure></p>
<p>仍然没有打印出任何 session 属性，这是怎么回事呢？怎么定义了把模型中属性名为 intValue 的对象和类型为 User 的对象存到 session 中，而实际上没有加进去呢？难道我们错啦？我们当然没有错，只是在第一次访问 /myTest/sayHello.do 的时候 @SessionAttributes 定义了需要存放到 session 中的属性，而且这个模型中也有对应的属性，但是这个时候还没有加到 session 中，所以 session 中不会有任何属性，等处理器方法执行完成后 Spring 才会把模型中对应的属性添加到 session 中。所以当请求第二次的时候就会出现如下结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Hello world,Hello user210</span><br><span class="line">user2</span><br><span class="line">intValue</span><br><span class="line">stringValue</span><br></pre></td></tr></table></figure></p>
<p>当 @ModelAttribute 标记在处理器方法参数上的时候，表示该参数的值将从模型或者 Session 中取对应名称的属性值，该名称可以通过 @ModelAttribute(“attributeName”) 来指定，若未指定，则使用参数类型的类名称（首字母小写）作为属性名称。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>到此，SpringMVC的原理以及常用注解就介绍的差不多了，平时开发这些就够用了，如果你还想深入学习SpringMVC知识点，可以关注我个人公众号，里面资源贴有全套的视频教程。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://www.cnblogs.com/xdp-gacl/p/3495887.html" target="_blank" rel="external">Spring常用注解</a><br><a href="http://www.cnphp6.com/archives/59355" target="_blank" rel="external">@AUTOWIRED与@RESOURCE的区别</a><br><a href="http://www.cnblogs.com/xiepeixing/p/4243288.html" target="_blank" rel="external">SpringMVC Controller介绍及常用注解</a></p>
<hr>
<p>一直觉得自己写的不是技术，而是情怀，一篇篇文章是自己这一路走来的痕迹。靠专业技能的成功是最具可复制性的，希望我的这条路能让你少走弯路，希望我能帮你抹去知识的蒙尘，希望我能帮你理清知识的脉络，希望未来技术之巅上有你也有我。</p>
<hr>
<p> 博主弄了个java学习资源的公众号，学习资源超级多，视频，电子书，最新开发工具一个都不能少，已全部分享到百度云盘，求资源共享，打造一个学习方便，工作方便的java公众号，开源开源，有需求的可以关注~撒花<br> <img src="http://7xqch5.com1.z0.glb.clouddn.com/javaLearn.PNG" alt=""></p>
]]></content>
      
        <categories>
            
            <category> springMVC干货系列 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> springMVC </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java基础与提高干货系列——Java反射机制]]></title>
      <url>http://tengj.top/2016/04/28/javareflect/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>今天介绍下Java的反射机制，以前我们获取一个类的实例都是使用new一个实例出来。那样太low了，今天跟我一起来学习学习一种更加高大上的方式来实现。</p>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="Java反射机制定义"><a href="#Java反射机制定义" class="headerlink" title="Java反射机制定义"></a>Java反射机制定义</h2><p>Java反射机制是指在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性；这种动态获取的信息以及动态调用对象的方法的功能称为java语言的反射机制。<br>用一句话总结就是反射可以实现在运行时可以知道任意一个类的属性和方法。</p>
<h2 id="反射机制的优点与缺点"><a href="#反射机制的优点与缺点" class="headerlink" title="反射机制的优点与缺点"></a>反射机制的优点与缺点</h2><p>为什么要用反射机制？直接创建对象不就可以了吗，这就涉及到了动态与静态的概念</p>
<ul>
<li>静态编译：在编译时确定类型，绑定对象,即通过。</li>
<li><p>动态编译：运行时确定类型，绑定对象。动态编译最大限度发挥了java的灵活性，体现了多态的应用，有以降低类之间的藕合性。</p>
</li>
<li><p>优点<br>可以实现动态创建对象和编译，体现出很大的灵活性，特别是在J2EE的开发中它的灵活性就表现的十分明显。比如，一个大型的软件，不可能一次就把把它设计的很完美，当这个程序编译后，发布了，当发现需要更新某些功能时，我们不可能要用户把以前的卸载，再重新安装新的版本，假如这样的话，这个软件肯定是没有多少人用的。采用静态的话，需要把整个程序重新编译一次才可以实现功能的更新，而采用反射机制的话，它就可以不用卸载，只需要在运行时才动态的创建和编译，就可以实现该功能。</p>
</li>
<li>缺点<br>对性能有影响。使用反射基本上是一种解释操作，我们可以告诉JVM，我们希望做什么并且它满足我们的要求。这类操作总是慢于只直接执行相同的操作。</li>
</ul>
<h2 id="理解Class类和类类型"><a href="#理解Class类和类类型" class="headerlink" title="理解Class类和类类型"></a>理解Class类和类类型</h2><p>想要了解反射首先理解一下Class类，它是反射实现的基础。<br>类是java.lang.Class类的实例对象，而Class是所有类的类（There is a class named Class）<br>对于普通的对象，我们一般都会这样创建和表示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Code code1 = <span class="keyword">new</span> Code();</span><br></pre></td></tr></table></figure></p>
<p>上面说了，所有的类都是Class的对象，那么如何表示呢，可不可以通过如下方式呢：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class c = <span class="keyword">new</span> Class();</span><br></pre></td></tr></table></figure></p>
<p>但是我们查看Class的源码时，是这样写的：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span>  <span class="title">Class</span><span class="params">(ClassLoader loader)</span> </span>&#123; </span><br><span class="line">    classLoader = loader; </span><br><span class="line">&#125;</span><br><span class="line">``` </span><br><span class="line">可以看到构造器是私有的，只有JVM可以创建Class的对象，因此不可以像普通类一样<span class="keyword">new</span>一个Class对象，虽然我们不能<span class="keyword">new</span>一个Class对象，但是却可以通过已有的类得到一个Class对象，共有三种方式，如下：</span><br><span class="line">``` java</span><br><span class="line">Class c1 = Code.class;</span><br><span class="line">这说明任何一个类都有一个隐含的静态成员变量<span class="class"><span class="keyword">class</span>，这种方式是通过获取类的静态成员变量<span class="title">class</span>得到的</span><br><span class="line"><span class="title">Class</span> <span class="title">c2</span> </span>= code1.getClass();</span><br><span class="line">code1是Code的一个对象，这种方式是通过一个类的对象的getClass()方法获得的</span><br><span class="line">Class c3 = Class.forName(<span class="string">"com.trigl.reflect.Code"</span>);</span><br><span class="line">这种方法是Class类调用forName方法，通过一个类的全量限定名获得</span><br></pre></td></tr></table></figure></p>
<p>这里，c1、c2、c3都是Class的对象，他们是完全一样的，而且有个学名，叫做Code的类类型（class type）。<br>这里就让人奇怪了，前面不是说Code是Class的对象吗，而c1、c2、c3也是Class的对象，那么Code和c1、c2、c3不就一样了吗？为什么还叫Code什么类类型？这里不要纠结于它们是否相同，只要理解类类型是干什么的就好了，顾名思义，类类型就是类的类型，也就是描述一个类是什么，都有哪些东西，所以我们可以通过类类型知道一个类的属性和方法，并且可以调用一个类的属性和方法，这就是反射的基础。</p>
<p>举个简单例子代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">//第一种：Class c1 = Code.class;</span></span><br><span class="line">        Class class1=ReflectDemo.class;</span><br><span class="line">        System.out.println(class1.getName());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//第二种：Class c2 = code1.getClass();</span></span><br><span class="line">        ReflectDemo demo2= <span class="keyword">new</span> ReflectDemo();</span><br><span class="line">        Class c2 = demo2.getClass();</span><br><span class="line">        System.out.println(c2.getName());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//第三种：Class c3 = Class.forName("com.trigl.reflect.Code");</span></span><br><span class="line">        Class class3 = Class.forName(<span class="string">"com.tengj.reflect.ReflectDemo"</span>);</span><br><span class="line">        System.out.println(class3.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>执行结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">com.tengj.reflect.ReflectDemo</span><br><span class="line">com.tengj.reflect.ReflectDemo</span><br><span class="line">com.tengj.reflect.ReflectDemo</span><br></pre></td></tr></table></figure></p>
<h2 id="Java反射相关操作"><a href="#Java反射相关操作" class="headerlink" title="Java反射相关操作"></a>Java反射相关操作</h2><p>前面我们知道了怎么获取Class，那么我们可以通过这个Class干什么呢？<br>总结如下：</p>
<ul>
<li>获取成员方法Method</li>
<li>获取成员变量Field</li>
<li>获取构造函数Constructor</li>
</ul>
<p>下面来具体介绍</p>
<h3 id="获取成员方法信息"><a href="#获取成员方法信息" class="headerlink" title="获取成员方法信息"></a>获取成员方法信息</h3><p>单独获取某一个方法是通过Class类的以下方法获得的：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Method <span class="title">getDeclaredMethod</span><span class="params">(String name, Class&lt;?&gt;... parameterTypes)</span> <span class="comment">// 得到该类所有的方法，不包括父类的</span></span><br><span class="line"><span class="keyword">public</span> Method <span class="title">getMethod</span><span class="params">(String name, Class&lt;?&gt;... parameterTypes)</span> <span class="comment">// 得到该类所有的public方法，包括父类的</span></span></span><br></pre></td></tr></table></figure></p>
<p>两个参数分别是方法名和方法参数类的类类型列表。<br>例如类A有如下一个方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">(String name,<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我叫"</span>+name+<span class="string">",今年"</span>+age+<span class="string">"岁"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>现在知道A有一个对象a，那么就可以通过：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Class c = Class.forName(<span class="string">"com.tengj.reflect.Person"</span>);  <span class="comment">//先生成class</span></span><br><span class="line">Object o = c.newInstance();                           <span class="comment">//newInstance可以初始化一个实例</span></span><br><span class="line">Method method = c.getMethod(<span class="string">"fun"</span>, String.class, <span class="keyword">int</span>.class);<span class="comment">//获取方法</span></span><br><span class="line">method.invoke(o, <span class="string">"tengj"</span>, <span class="number">10</span>);                              <span class="comment">//通过invoke调用该方法，参数第一个为实例对象，后面为具体参数值</span></span><br></pre></td></tr></table></figure></p>
<p>完整代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String msg=<span class="string">"hello wrold"</span>;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Person</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">  System.out.println(name);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"fun"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">(String name,<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我叫"</span>+name+<span class="string">",今年"</span>+age+<span class="string">"岁"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class c = Class.forName(<span class="string">"com.tengj.reflect.Person"</span>);</span><br><span class="line">            Object o = c.newInstance();</span><br><span class="line">            Method method = c.getMethod(<span class="string">"fun"</span>, String.class, <span class="keyword">int</span>.class);</span><br><span class="line">            method.invoke(o, <span class="string">"tengj"</span>, <span class="number">10</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>执行结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">我叫tengj,今年<span class="number">10</span>岁</span><br></pre></td></tr></table></figure></p>
<p>怎样，是不是感觉很厉害，我们只要知道这个类的路径全称就能玩弄它于鼓掌之间。</p>
<p>有时候我们想获取类中所有成员方法的信息，要怎么办。可以通过以下几步来实现：<br>1.获取所有方法的数组：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class c = Class.forName(&#34;com.tengj.reflect.Person&#34;);&#10;Method[] methods = c.getDeclaredMethods(); // &#24471;&#21040;&#35813;&#31867;&#25152;&#26377;&#30340;&#26041;&#27861;&#65292;&#19981;&#21253;&#25324;&#29238;&#31867;&#30340;&#10;&#25110;&#32773;&#65306;&#10;Method[] methods = c.getMethods();// &#24471;&#21040;&#35813;&#31867;&#25152;&#26377;&#30340;public&#26041;&#27861;&#65292;&#21253;&#25324;&#29238;&#31867;&#30340;</span><br></pre></td></tr></table></figure></p>
<p>2.然后循环这个数组就得到每个方法了：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (Method method : methods)</span><br></pre></td></tr></table></figure></p>
<p>完整代码如下：<br>person类跟上面一样，这里以及后面就不贴出来了，只贴关键代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class c = Class.forName(<span class="string">"com.tengj.reflect.Person"</span>);</span><br><span class="line">            Method[] methods = c.getDeclaredMethods();</span><br><span class="line">            <span class="keyword">for</span>(Method m:methods)&#123;</span><br><span class="line">                String  methodName= m.getName();</span><br><span class="line">                System.out.println(methodName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>执行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getName&#10;setName&#10;setAge&#10;fun&#10;fun&#10;getAge</span><br></pre></td></tr></table></figure></p>
<p>这里如果把c.getDeclaredMethods();改成c.getMethods();执行结果如下，多了很多方法，以为把Object里面的方法也打印出来了，因为Object是所有类的父类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">getName</span><br><span class="line">setName</span><br><span class="line">getAge</span><br><span class="line">setAge</span><br><span class="line">fun</span><br><span class="line">fun</span><br><span class="line">wait</span><br><span class="line">wait</span><br><span class="line">wait</span><br><span class="line">equals</span><br><span class="line">toString</span><br><span class="line">hashCode</span><br><span class="line">getClass</span><br><span class="line">notify</span><br><span class="line">notifyAll</span><br></pre></td></tr></table></figure></p>
<h3 id="获取成员变量信息"><a href="#获取成员变量信息" class="headerlink" title="获取成员变量信息"></a>获取成员变量信息</h3><p>想一想成员变量中都包括什么：成员变量类型+成员变量名<br>类的成员变量也是一个对象，它是<code>java.lang.reflect.Field</code>的一个对象，所以我们通过<code>java.lang.reflect.Field</code>里面封装的方法来获取这些信息。</p>
<p>单独获取某个成员变量，通过Class类的以下方法实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Field <span class="title">getDeclaredField</span><span class="params">(String name)</span> <span class="comment">// 获得该类自身声明的所有变量，不包括其父类的变量</span></span><br><span class="line"><span class="keyword">public</span> Field <span class="title">getField</span><span class="params">(String name)</span> <span class="comment">// 获得该类自所有的public成员变量，包括其父类变量</span></span></span><br></pre></td></tr></table></figure></p>
<p>参数是成员变量的名字。<br>例如一个类A有如下成员变量：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> n;</span><br></pre></td></tr></table></figure></p>
<p>如果A有一个对象a，那么就可以这样得到其成员变量：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Class c = a.getClass();</span><br><span class="line">Field field = c.getDeclaredField(<span class="string">"n"</span>);</span><br></pre></td></tr></table></figure></p>
<p>完整代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class c = Class.forName(<span class="string">"com.tengj.reflect.Person"</span>);</span><br><span class="line">            <span class="comment">//获取成员变量</span></span><br><span class="line">            Field field = c.getDeclaredField(<span class="string">"msg"</span>); <span class="comment">//因为msg变量是private的，所以不能用getField方法</span></span><br><span class="line">            Object o = c.newInstance();</span><br><span class="line">            field.setAccessible(<span class="keyword">true</span>);<span class="comment">//设置是否允许访问，因为该变量是private的，所以要手动设置允许访问，如果msg是public的就不需要这行了。</span></span><br><span class="line">            Object msg = field.get(o);</span><br><span class="line">            System.out.println(msg);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>执行结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello wrold</span><br></pre></td></tr></table></figure></p>
<p>同样，如果想要获取所有成员变量的信息，可以通过以下几步<br>1.获取所有成员变量的数组：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Field[] fields = c.getDeclaredFields();</span><br></pre></td></tr></table></figure></p>
<p>2.遍历变量数组，获得某个成员变量field<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for (Field field : fields)</span><br></pre></td></tr></table></figure></p>
<p>完整代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class c = Class.forName(<span class="string">"com.tengj.reflect.Person"</span>);</span><br><span class="line">            Field[] fields = c.getDeclaredFields();</span><br><span class="line">            <span class="keyword">for</span>(Field field :fields)&#123;</span><br><span class="line">                System.out.println(field.getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>执行结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name</span><br><span class="line">age</span><br><span class="line">msg</span><br></pre></td></tr></table></figure></p>
<h3 id="获取构造函数"><a href="#获取构造函数" class="headerlink" title="获取构造函数"></a>获取构造函数</h3><p>最后再想一想构造函数中都包括什么：构造函数参数<br>同上，类的成构造函数也是一个对象，它是<code>java.lang.reflect.Constructor</code>的一个对象，所以我们通过<code>java.lang.reflect.Constructor</code>里面封装的方法来获取这些信息。</p>
<p>单独获取某个构造函数,通过Class类的以下方法实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Constructor&lt;T&gt; <span class="title">getDeclaredConstructor</span><span class="params">(Class&lt;?&gt;... parameterTypes)</span> <span class="comment">//  获得该类所有的构造器，不包括其父类的构造器</span></span><br><span class="line"><span class="keyword">public</span> Constructor&lt;T&gt; <span class="title">getConstructor</span><span class="params">(Class&lt;?&gt;... parameterTypes)</span> <span class="comment">// 获得该类所以public构造器，包括父类</span></span></span><br></pre></td></tr></table></figure></p>
<p>这个参数为构造函数参数类的类类型列表。<br>例如类A有如下一个构造函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public A(String a, int b) &#123;&#10;    // code body&#10;&#125;</span><br></pre></td></tr></table></figure></p>
<p>那么就可以通过：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Constructor constructor = a.getDeclaredConstructor(String.class, int.class);</span><br></pre></td></tr></table></figure></p>
<p>来获取这个构造函数。</p>
<p>完整代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class c = Class.forName(<span class="string">"com.tengj.reflect.Person"</span>);</span><br><span class="line">            <span class="comment">//获取构造函数</span></span><br><span class="line">            Constructor constructor = c.getDeclaredConstructor(String.class);</span><br><span class="line">            constructor.setAccessible(<span class="keyword">true</span>);<span class="comment">//设置是否允许访问，因为该构造器是private的，所以要手动设置允许访问，如果构造器是public的就不需要这行了。</span></span><br><span class="line">            constructor.newInstance(<span class="string">"tengj"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>执行结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tengj</span><br></pre></td></tr></table></figure></p>
<p>注意：Class的newInstance方法，只能创建只包含无参数的构造函数的类，如果某类只有带参数的构造函数，那么就要使用另外一种方式：fromClass.getDeclaredConstructor(String.class).newInstance(“tengj”);</p>
<p>获取所有的构造函数，可以通过以下步骤实现：<br>1.获取该类的所有构造函数，放在一个数组中：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Constructor[] constructors = c.getDeclaredConstructors();</span><br></pre></td></tr></table></figure></p>
<p>2.遍历构造函数数组，获得某个构造函数constructor:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (Constructor constructor : constructors)</span><br></pre></td></tr></table></figure></p>
<p>完整代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">            Constructor[] constructors = c.getDeclaredConstructors();</span><br><span class="line">            <span class="keyword">for</span>(Constructor constructor:constructors)&#123;</span><br><span class="line">                System.out.println(constructor);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>执行结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> com.tengj.reflect.Person()</span><br><span class="line"><span class="keyword">public</span> com.tengj.reflect.Person(java.lang.String)</span><br></pre></td></tr></table></figure></p>
<h2 id="通过反射了解集合泛型的本质"><a href="#通过反射了解集合泛型的本质" class="headerlink" title="通过反射了解集合泛型的本质"></a>通过反射了解集合泛型的本质</h2><p>首先下结论：</p>
<blockquote>
<p>Java中集合的泛型，是防止错误输入的，只在编译阶段有效，绕过编译到了运行期就无效了。</p>
</blockquote>
<p>下面通过一个实例来验证：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 集合泛型的本质</span><br><span class="line"> * <span class="doctag">@description</span></span><br><span class="line"> * <span class="doctag">@author</span> Trigl</span><br><span class="line"> * <span class="doctag">@date</span> 2016年4月2日上午2:54:11</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericEssence</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List list1 = <span class="keyword">new</span> ArrayList(); <span class="comment">// 没有泛型 </span></span><br><span class="line">        List&lt;String&gt; list2 = <span class="keyword">new</span> ArrayList&lt;String&gt;(); <span class="comment">// 有泛型</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span><br><span class="line">         * 1.首先观察正常添加元素方式，在编译器检查泛型，</span><br><span class="line">         * 这个时候如果list2添加int类型会报错</span><br><span class="line">         */</span></span><br><span class="line">        list2.add(<span class="string">"hello"</span>);</span><br><span class="line"><span class="comment">//      list2.add(20); // 报错！list2有泛型限制，只能添加String，添加int报错</span></span><br><span class="line">        System.out.println(<span class="string">"list2的长度是："</span> + list2.size()); <span class="comment">// 此时list2长度为1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span><br><span class="line">         * 2.然后通过反射添加元素方式，在运行期动态加载类，首先得到list1和list2</span><br><span class="line">         * 的类类型相同，然后再通过方法反射绕过编译器来调用add方法，看能否插入int</span><br><span class="line">         * 型的元素</span><br><span class="line">         */</span></span><br><span class="line">        Class c1 = list1.getClass();</span><br><span class="line">        Class c2 = list2.getClass();</span><br><span class="line">        System.out.println(c1 == c2); <span class="comment">// 结果：true，说明类类型完全相同</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 验证：我们可以通过方法的反射来给list2添加元素，这样可以绕过编译检查</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Method m = c2.getMethod(<span class="string">"add"</span>, Object.class); <span class="comment">// 通过方法反射得到add方法</span></span><br><span class="line">            m.invoke(list2, <span class="number">20</span>); <span class="comment">// 给list2添加一个int型的，上面显示在编译器是会报错的</span></span><br><span class="line">            System.out.println(<span class="string">"list2的长度是："</span> + list2.size()); <span class="comment">// 结果：2，说明list2长度增加了，并没有泛型检查</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span><br><span class="line">         * 综上可以看出，在编译器的时候，泛型会限制集合内元素类型保持一致，但是编译器结束进入</span><br><span class="line">         * 运行期以后，泛型就不再起作用了，即使是不同类型的元素也可以插入集合。</span><br><span class="line">         */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>执行结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list2的长度是：<span class="number">1</span></span><br><span class="line"><span class="keyword">true</span></span><br><span class="line">list2的长度是：<span class="number">2</span></span><br></pre></td></tr></table></figure></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>到此，Java反射机制入门的差不多了，我是复习SpringMVC里面IOC/DI的时候，是通过Java反射来实现的，希望这篇笔记也对你有用。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://www.cnblogs.com/hxsyl/archive/2013/03/23/2977593.html" target="_blank" rel="external">Java反射机制深入详解</a><br><a href="http://blog.csdn.net/trigl/article/details/51042403" target="_blank" rel="external">Java反射入门</a><br><a href="http://www.cnblogs.com/jqyp/archive/2012/03/29/2423112.html" target="_blank" rel="external">Java反射机制</a><br><a href="http://www.cnblogs.com/rollenholt/archive/2011/09/02/2163758.html" target="_blank" rel="external">java反射详解</a><br><a href="http://www.cnblogs.com/gulvzhe/archive/2012/01/27/2330001.html" target="_blank" rel="external">Java 反射机制浅析</a><br><a href="http://uule.iteye.com/blog/1423512" target="_blank" rel="external">反射机制的理解及其用途</a></p>
<h1 id="整理的思维导图"><a href="#整理的思维导图" class="headerlink" title="整理的思维导图"></a>整理的思维导图</h1><p>个人整理的Java反射机制的思维导图,导出的图片无法查看备注的一些信息，所以需要源文件的童鞋可以关注我个人主页上的公众号，回复<strong>反射机制</strong>即可获取源文件。<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/Javareflect.png" alt=""></p>
<hr>
<p>博主弄了个java学习资源的公众号，学习资源超级多，视频，电子书，最新开发工具一个都不能少，已全部分享到百度云盘，求资源共享，打造一个学习方便，工作方便的java公众号，开源开源，有需求的可以关注~撒花<br>  <img src="http://7xqch5.com1.z0.glb.clouddn.com/javaLearn.PNG" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Java基础与提高干货系列 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Java多线程干货系列—（一）Java多线程基础]]></title>
      <url>http://tengj.top/2016/04/24/thread1/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>多线程并发编程是Java编程中重要的一块内容，也是面试重点覆盖区域，所以学好多线程并发编程对我们来说极其重要，下面跟我一起开启本次的学习之旅吧。</p>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="线程与进程"><a href="#线程与进程" class="headerlink" title="线程与进程"></a>线程与进程</h2><p>1 线程：进程中负责程序执行的执行单元<br>线程本身依靠程序进行运行<br>线程是程序中的顺序控制流，只能使用分配给程序的资源和环境</p>
<p>2 进程：执行中的程序<br>一个进程至少包含一个线程</p>
<p>3 单线程：程序中只存在一个线程，实际上主方法就是一个主线程</p>
<p>4 多线程：在一个程序中运行多个任务<br>目的是更好地使用CPU资源</p>
<h2 id="线程的实现"><a href="#线程的实现" class="headerlink" title="线程的实现"></a>线程的实现</h2><h3 id="继承Thread类"><a href="#继承Thread类" class="headerlink" title="继承Thread类"></a>继承<code>Thread</code>类</h3><p>在<code>java.lang</code>包中定义, 继承Thread类必须重写<code>run()</code>方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyThread</span><span class="params">()</span></span>&#123;</span><br><span class="line">        num++;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"主动创建的第"</span>+num+<span class="string">"个线程"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>创建好了自己的线程类之后，就可以创建线程对象了，然后通过start()方法去启动线程。注意，不是调用run()方法启动线程，run方法中只是定义需要执行的任务，如果调用run方法，即相当于在主线程中执行run方法，跟普通的方法调用没有任何区别，此时并不会创建一个新的线程来执行定义的任务。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line">        MyThread thread = <span class="keyword">new</span> MyThread();</span><br><span class="line">        thread.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyThread</span><span class="params">()</span></span>&#123;</span><br><span class="line">        num++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"主动创建的第"</span>+num+<span class="string">"个线程"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在上面代码中，通过调用start()方法，就会创建一个新的线程了。为了分清start()方法调用和run()方法调用的区别，请看下面一个例子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"主线程ID:"</span>+Thread.currentThread().getId());</span><br><span class="line">        MyThread thread1 = <span class="keyword">new</span> MyThread(<span class="string">"thread1"</span>);</span><br><span class="line">        thread1.start();</span><br><span class="line">        MyThread thread2 = <span class="keyword">new</span> MyThread(<span class="string">"thread2"</span>);</span><br><span class="line">        thread2.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyThread</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"name:"</span>+name+<span class="string">" 子线程ID:"</span>+Thread.currentThread().getId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>运行结果：<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/thread1_1.jpg" alt=""></p>
<p>从输出结果可以得出以下结论：</p>
<p>1）thread1和thread2的线程ID不同，thread2和主线程ID相同，说明通过run方法调用并不会创建新的线程，而是在主线程中直接运行run方法，跟普通的方法调用没有任何区别；</p>
<p>2）虽然thread1的start方法调用在thread2的run方法前面调用，但是先输出的是thread2的run方法调用的相关信息，说明新线程创建的过程不会阻塞主线程的后续执行。</p>
<h3 id="实现Runnable接口"><a href="#实现Runnable接口" class="headerlink" title="实现Runnable接口"></a>实现<code>Runnable</code>接口</h3><p>在Java中创建线程除了继承Thread类之外，还可以通过实现Runnable接口来实现类似的功能。实现Runnable接口必须重写其run方法。<br>下面是一个例子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"主线程ID："</span>+Thread.currentThread().getId());</span><br><span class="line">        MyRunnable runnable = <span class="keyword">new</span> MyRunnable();</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(runnable);</span><br><span class="line">        thread.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyRunnable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"子线程ID："</span>+Thread.currentThread().getId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Runnable的中文意思是“任务”，顾名思义，通过实现Runnable接口，我们定义了一个子任务，然后将子任务交由Thread去执行。注意，这种方式必须将Runnable作为Thread类的参数，然后通过Thread的start方法来创建一个新线程来执行该子任务。如果调用Runnable的run方法的话，是不会创建新线程的，这根普通的方法调用没有任何区别。<br>事实上，查看Thread类的实现源代码会发现Thread类是实现了Runnable接口的。<br>在Java中，这2种方式都可以用来创建线程去执行子任务，具体选择哪一种方式要看自己的需求。直接继承Thread类的话，可能比实现Runnable接口看起来更加简洁，但是由于Java只允许单继承，所以如果自定义类需要继承其他类，则只能选择实现Runnable接口。</p>
<h3 id="使用ExecutorService、Callable、Future实现有返回结果的多线程"><a href="#使用ExecutorService、Callable、Future实现有返回结果的多线程" class="headerlink" title="使用ExecutorService、Callable、Future实现有返回结果的多线程"></a>使用ExecutorService、Callable、Future实现有返回结果的多线程</h3><p>多线程后续会学到，这里暂时先知道一下有这种方法即可。<br>ExecutorService、Callable、Future这个对象实际上都是属于Executor框架中的功能类。想要详细了解Executor框架的可以访问<a href="http://www.javaeye.com/topic/366591" target="_blank" rel="external">http://www.javaeye.com/topic/366591</a> ，这里面对该框架做了很详细的解释。返回结果的线程是在JDK1.5中引入的新特征，确实很实用，有了这种特征我就不需要再为了得到返回值而大费周折了，而且即便实现了也可能漏洞百出。<br>可返回值的任务必须实现Callable接口，类似的，无返回值的任务必须Runnable接口。执行Callable任务后，可以获取一个Future的对象，在该对象上调用get就可以获取到Callable任务返回的Object了，再结合线程池接口ExecutorService就可以实现传说中有返回结果的多线程了。下面提供了一个完整的有返回结果的多线程测试例子，在JDK1.5下验证过没问题可以直接使用。代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line">* 有返回值的线程 </span><br><span class="line">*/</span>  </span><br><span class="line"><span class="annotation">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException,  </span><br><span class="line">    InterruptedException </span>&#123;  </span><br><span class="line">   System.out.println(<span class="string">"----程序开始运行----"</span>);  </span><br><span class="line">   Date date1 = <span class="keyword">new</span> Date();  </span><br><span class="line">  </span><br><span class="line">   <span class="keyword">int</span> taskSize = <span class="number">5</span>;  </span><br><span class="line">   <span class="comment">// 创建一个线程池  </span></span><br><span class="line">   ExecutorService pool = Executors.newFixedThreadPool(taskSize);  </span><br><span class="line">   <span class="comment">// 创建多个有返回值的任务  </span></span><br><span class="line">   List&lt;Future&gt; list = <span class="keyword">new</span> ArrayList&lt;Future&gt;();  </span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; taskSize; i++) &#123;  </span><br><span class="line">    Callable c = <span class="keyword">new</span> MyCallable(i + <span class="string">" "</span>);  </span><br><span class="line">    <span class="comment">// 执行任务并获取Future对象  </span></span><br><span class="line">    Future f = pool.submit(c);  </span><br><span class="line">    <span class="comment">// System.out.println("&gt;&gt;&gt;" + f.get().toString());  </span></span><br><span class="line">    list.add(f);  </span><br><span class="line">   &#125;  </span><br><span class="line">   <span class="comment">// 关闭线程池  </span></span><br><span class="line">   pool.shutdown();  </span><br><span class="line">  </span><br><span class="line">   <span class="comment">// 获取所有并发任务的运行结果  </span></span><br><span class="line">   <span class="keyword">for</span> (Future f : list) &#123;  </span><br><span class="line">    <span class="comment">// 从Future对象上获取任务的返回值，并输出到控制台  </span></span><br><span class="line">    System.out.println(<span class="string">"&gt;&gt;&gt;"</span> + f.get().toString());  </span><br><span class="line">   &#125;  </span><br><span class="line">  </span><br><span class="line">   Date date2 = <span class="keyword">new</span> Date();  </span><br><span class="line">   System.out.println(<span class="string">"----程序结束运行----，程序运行时间【"</span>  </span><br><span class="line">     + (date2.getTime() - date1.getTime()) + <span class="string">"毫秒】"</span>);  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCallable</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Object</span>&gt; </span>&#123;  </span><br><span class="line"><span class="keyword">private</span> String taskNum;  </span><br><span class="line">  </span><br><span class="line">MyCallable(String taskNum) &#123;  </span><br><span class="line">   <span class="keyword">this</span>.taskNum = taskNum;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;  </span><br><span class="line">   System.out.println(<span class="string">"&gt;&gt;&gt;"</span> + taskNum + <span class="string">"任务启动"</span>);  </span><br><span class="line">   Date dateTmp1 = <span class="keyword">new</span> Date();  </span><br><span class="line">   Thread.sleep(<span class="number">1000</span>);  </span><br><span class="line">   Date dateTmp2 = <span class="keyword">new</span> Date();  </span><br><span class="line">   <span class="keyword">long</span> time = dateTmp2.getTime() - dateTmp1.getTime();  </span><br><span class="line">   System.out.println(<span class="string">"&gt;&gt;&gt;"</span> + taskNum + <span class="string">"任务终止"</span>);  </span><br><span class="line">   <span class="keyword">return</span> taskNum + <span class="string">"任务返回运行结果,当前任务时间【"</span> + time + <span class="string">"毫秒】"</span>;  </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>代码说明：<br>上述代码中Executors类，提供了一系列工厂方法用于创先线程池，返回的线程池都实现了ExecutorService接口。<br>public static ExecutorService newFixedThreadPool(int nThreads)<br>创建固定数目线程的线程池。</p>
<p>public static ExecutorService newCachedThreadPool()<br>创建一个可缓存的线程池，调用execute 将重用以前构造的线程（如果线程可用）。如果现有线程没有可用的，则创建一个新线程并添加到池中。终止并从缓存中移除那些已有 60 秒钟未被使用的线程。</p>
<p>public static ExecutorService newSingleThreadExecutor()<br>创建一个单线程化的Executor。</p>
<p>public static ScheduledExecutorService newScheduledThreadPool(int corePoolSize)<br>创建一个支持定时及周期性的任务执行的线程池，多数情况下可用来替代Timer类。</p>
<p>ExecutoreService提供了submit()方法，传递一个Callable，或Runnable，返回Future。如果Executor后台线程池还没有完成Callable的计算，这调用返回Future对象的get()方法，会阻塞直到计算完成。</p>
<h2 id="线程的状态"><a href="#线程的状态" class="headerlink" title="线程的状态"></a>线程的状态</h2><p>在正式学习Thread类中的具体方法之前，我们先来了解一下线程有哪些状态，这个将会有助于后面对Thread类中的方法的理解。</p>
<ul>
<li>创建（new）状态: 准备好了一个多线程的对象</li>
<li>就绪（runnable）状态: 调用了<code>start()</code>方法, 等待CPU进行调度</li>
<li>运行（running）状态: 执行<code>run()</code>方法</li>
<li>阻塞（blocked）状态: 暂时停止执行, 可能将资源交给其它线程使用</li>
<li>终止（dead）状态: 线程销毁</li>
</ul>
<p>当需要新起一个线程来执行某个子任务时，就创建了一个线程。但是线程创建之后，不会立即进入就绪状态，因为线程的运行需要一些条件（比如内存资源，在前面的JVM内存区域划分一篇博文中知道程序计数器、Java栈、本地方法栈都是线程私有的，所以需要为线程分配一定的内存空间），只有线程运行需要的所有条件满足了，才进入就绪状态。</p>
<p>当线程进入就绪状态后，不代表立刻就能获取CPU执行时间，也许此时CPU正在执行其他的事情，因此它要等待。当得到CPU执行时间之后，线程便真正进入运行状态。</p>
<p>线程在运行状态过程中，可能有多个原因导致当前线程不继续运行下去，比如用户主动让线程睡眠（睡眠一定的时间之后再重新执行）、用户主动让线程等待，或者被同步块给阻塞，此时就对应着多个状态：time waiting（睡眠或等待一定的事件）、waiting（等待被唤醒）、blocked（阻塞）。</p>
<p>当由于突然中断或者子任务执行完毕，线程就会被消亡。</p>
<p>下面这副图描述了线程从创建到消亡之间的状态：<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/thread1_2.jpg" alt=""></p>
<p>在有些教程上将blocked、waiting、time waiting统称为阻塞状态，这个也是可以的，只不过这里我想将线程的状态和Java中的方法调用联系起来，所以将waiting和time waiting两个状态分离出来。</p>
<p>注:sleep和wait的区别:</p>
<blockquote>
<ul>
<li><code>sleep</code>是<code>Thread</code>类的方法,<code>wait</code>是<code>Object</code>类中定义的方法.</li>
<li><code>Thread.sleep</code>不会导致锁行为的改变, 如果当前线程是拥有锁的, 那么<code>Thread.sleep</code>不会让线程释放锁.</li>
<li><code>Thread.sleep</code>和<code>Object.wait</code>都会暂停当前的线程. OS会将执行时间分配给其它线程. 区别是, 调用<code>wait</code>后, 需要别的线程执行<code>notify/notifyAll</code>才能够重新获得CPU执行时间.</li>
</ul>
</blockquote>
<h2 id="上下文切换"><a href="#上下文切换" class="headerlink" title="上下文切换"></a>上下文切换</h2><p>对于单核CPU来说（对于多核CPU，此处就理解为一个核），CPU在一个时刻只能运行一个线程，当在运行一个线程的过程中转去运行另外一个线程，这个叫做线程上下文切换（对于进程也是类似）。</p>
<p>由于可能当前线程的任务并没有执行完毕，所以在切换时需要保存线程的运行状态，以便下次重新切换回来时能够继续切换之前的状态运行。举个简单的例子：比如一个线程A正在读取一个文件的内容，正读到文件的一半，此时需要暂停线程A，转去执行线程B，当再次切换回来执行线程A的时候，我们不希望线程A又从文件的开头来读取。</p>
<p>因此需要记录线程A的运行状态，那么会记录哪些数据呢？因为下次恢复时需要知道在这之前当前线程已经执行到哪条指令了，所以需要记录程序计数器的值，另外比如说线程正在进行某个计算的时候被挂起了，那么下次继续执行的时候需要知道之前挂起时变量的值时多少，因此需要记录CPU寄存器的状态。所以一般来说，线程上下文切换过程中会记录程序计数器、CPU寄存器状态等数据。</p>
<p>说简单点的：对于线程的上下文切换实际上就是 <strong>存储和恢复CPU状态的过程，它使得线程执行能够从中断点恢复执行</strong>。</p>
<p>虽然多线程可以使得任务执行的效率得到提升，但是由于在线程切换时同样会带来一定的开销代价，并且多个线程会导致系统资源占用的增加，所以在进行多线程编程时要注意这些因素。</p>
<h2 id="线程的常用方法"><a href="#线程的常用方法" class="headerlink" title="线程的常用方法"></a>线程的常用方法</h2><table>
<thead>
<tr>
<th>编号</th>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td><code>public void start()</code></td>
<td>使该线程开始执行；Java 虚拟机调用该线程的 run 方法。</td>
</tr>
<tr>
<td>2</td>
<td><code>public void run()</code></td>
<td>如果该线程是使用独立的 Runnable 运行对象构造的，则调用该 Runnable 对象的 run 方法；否则，该方法不执行任何操作并返回。</td>
</tr>
<tr>
<td>3</td>
<td><code>public final void setName(String name)</code></td>
<td>改变线程名称，使之与参数 name 相同。</td>
</tr>
<tr>
<td>4</td>
<td><code>public final void setPriority(int priority)</code></td>
<td>更改线程的优先级。</td>
</tr>
<tr>
<td>5</td>
<td><code>public final void setDaemon(boolean on)</code></td>
<td>将该线程标记为守护线程或用户线程。</td>
</tr>
<tr>
<td>6</td>
<td><code>public final void join(long millisec)</code></td>
<td>等待该线程终止的时间最长为 millis 毫秒。</td>
</tr>
<tr>
<td>7</td>
<td><code>public void interrupt()</code></td>
<td>中断线程。</td>
</tr>
<tr>
<td>8</td>
<td><code>public final boolean isAlive()</code></td>
<td>测试线程是否处于活动状态。</td>
</tr>
<tr>
<td>9</td>
<td><code>public static void yield()</code></td>
<td>暂停当前正在执行的线程对象，并执行其他线程。</td>
</tr>
<tr>
<td>10</td>
<td><code>public static void sleep(long millisec)</code></td>
<td>在指定的毫秒数内让当前正在执行的线程休眠（暂停执行），此操作受到系统计时器和调度程序精度和准确性的影响。</td>
</tr>
<tr>
<td>11</td>
<td><code>public static Thread currentThread()</code></td>
<td>返回对当前正在执行的线程对象的引用。</td>
</tr>
</tbody>
</table>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/thread1_3.jpg" alt=""></p>
<h3 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h3><h3 id="currentThread-方法"><a href="#currentThread-方法" class="headerlink" title="currentThread()方法"></a>currentThread()方法</h3><p>currentThread()方法可以返回代码段正在被哪个线程调用的信息。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class Run1&#123;</span><br><span class="line">    public static void main(String[] args)&#123;                 </span><br><span class="line">    System.out.println(Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line">### sleep()方法</span><br><span class="line">方法sleep()的作用是在指定的毫秒数内让当前“正在执行的线程”休眠（暂停执行）。这个“正在执行的线程”是指this.currentThread()返回的线程。</span><br><span class="line"></span><br><span class="line">sleep方法有两个重载版本：</span><br><span class="line"> ```java</span><br><span class="line">sleep(long millis)     //参数为毫秒</span><br><span class="line">sleep(long millis,int nanoseconds)    //第一参数为毫秒，第二个参数为纳秒</span><br></pre></td></tr></table></figure></p>
<p>sleep相当于让线程睡眠，交出CPU，让CPU去执行其他的任务。<br>但是有一点要非常注意，sleep方法不会释放锁，也就是说如果当前线程持有对某个对象的锁，则即使调用sleep方法，其他线程也无法访问这个对象。看下面这个例子就清楚了：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">private</span> Object object = <span class="keyword">new</span> Object();</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException  </span>&#123;</span><br><span class="line">        Test test = <span class="keyword">new</span> Test();</span><br><span class="line">        MyThread thread1 = test.new MyThread();</span><br><span class="line">        MyThread thread2 = test.new MyThread();</span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">    &#125; </span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">        <span class="annotation">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (object) &#123;</span><br><span class="line">                i++;</span><br><span class="line">                System.out.println(<span class="string">"i:"</span>+i);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">"线程"</span>+Thread.currentThread().getName()+<span class="string">"进入睡眠状态"</span>);</span><br><span class="line">                    Thread.currentThread().sleep(<span class="number">10000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">"线程"</span>+Thread.currentThread().getName()+<span class="string">"睡眠结束"</span>);</span><br><span class="line">                i++;</span><br><span class="line">                System.out.println(<span class="string">"i:"</span>+i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>输出结果：<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/thread1_4.jpg" alt=""><br>从上面输出结果可以看出，当Thread-0进入睡眠状态之后，Thread-1并没有去执行具体的任务。只有当Thread-0执行完之后，此时Thread-0释放了对象锁，Thread-1才开始执行。</p>
<p>注意，如果调用了sleep方法，必须捕获InterruptedException异常或者将该异常向上层抛出。当线程睡眠时间满后，不一定会立即得到执行，因为此时可能CPU正在执行其他的任务。所以说调用sleep方法相当于让线程进入阻塞状态。</p>
<h3 id="yield-方法"><a href="#yield-方法" class="headerlink" title="yield()方法"></a>yield()方法</h3><p>调用yield方法会让当前线程交出CPU权限，让CPU去执行其他的线程。它跟sleep方法类似，同样不会释放锁。但是yield不能控制具体的交出CPU的时间，另外，yield方法只能让拥有相同优先级的线程有获取CPU执行时间的机会。</p>
<p>注意，调用yield方法并不会让线程进入阻塞状态，而是让线程重回就绪状态，它只需要等待重新获取CPU执行时间，这一点是和sleep方法不一样的。<br>代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span>  <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> beginTime=System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">50000000</span>;i++)&#123;</span><br><span class="line">            count=count+(i+<span class="number">1</span>);</span><br><span class="line">            <span class="comment">//Thread.yield();</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> endTime=System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"用时："</span>+(endTime-beginTime)+<span class="string">" 毫秒！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Run</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyThread t= <span class="keyword">new</span> MyThread();</span><br><span class="line">        t.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>执行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#29992;&#26102;&#65306;3 &#27627;&#31186;&#65281;</span><br></pre></td></tr></table></figure></p>
<p>如果将  <code>//Thread.yield();</code>的注释去掉，执行结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#29992;&#26102;&#65306;16080 &#27627;&#31186;&#65281;</span><br></pre></td></tr></table></figure></p>
<h3 id="对象方法"><a href="#对象方法" class="headerlink" title="对象方法"></a>对象方法</h3><h4 id="start-方法"><a href="#start-方法" class="headerlink" title="start()方法"></a>start()方法</h4><p>start()用来启动一个线程，当调用start方法后，系统才会开启一个新的线程来执行用户定义的子任务，在这个过程中，会为相应的线程分配需要的资源。  </p>
<h4 id="run-方法"><a href="#run-方法" class="headerlink" title="run()方法"></a>run()方法</h4><p>run()方法是不需要用户来调用的，当通过start方法启动一个线程之后，当线程获得了CPU执行时间，便进入run方法体去执行具体的任务。注意，继承Thread类必须重写run方法，在run方法中定义具体要执行的任务。  </p>
<h4 id="getId"><a href="#getId" class="headerlink" title="getId()"></a>getId()</h4><p>getId()的作用是取得线程的唯一标识<br>代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread t= Thread.currentThread();</span><br><span class="line">        System.out.println(t.getName()+<span class="string">" "</span>+t.getId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>输出：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">main 1</span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line">#### isAlive()方法  </span><br><span class="line"></span><br><span class="line">方法isAlive()的功能是判断当前线程是否处于活动状态</span><br><span class="line">代码：</span><br><span class="line">```java</span><br><span class="line">public class MyThread  extends Thread&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        System.out.println("run="+this.isAlive());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">public class RunTest &#123;</span><br><span class="line">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line">        MyThread myThread=new MyThread();</span><br><span class="line">        System.out.println("begin =="+myThread.isAlive());</span><br><span class="line">        myThread.start();</span><br><span class="line">        System.out.println("end =="+myThread.isAlive());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>程序运行结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">begin ==<span class="keyword">false</span></span><br><span class="line">run=<span class="keyword">true</span></span><br><span class="line">end ==<span class="keyword">false</span></span><br></pre></td></tr></table></figure></p>
<p>方法isAlive()的作用是测试线程是否偶处于活动状态。什么是活动状态呢？活动状态就是线程已经启动且尚未终止。线程处于正在运行或准备开始运行的状态，就认为线程是“存活”的。<br>有个需要注意的地方<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">"end =="</span>+myThread.isAlive());</span><br></pre></td></tr></table></figure></p>
<p>虽然上面的实例中打印的值是true,但此值是不确定的。打印true值是因为myThread线程还未执行完毕，所以输出true。如果代码改成下面这样，加了个sleep休眠：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        MyThread myThread=<span class="keyword">new</span> MyThread();</span><br><span class="line">        System.out.println(<span class="string">"begin =="</span>+myThread.isAlive());</span><br><span class="line">        myThread.start();</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        System.out.println(<span class="string">"end =="</span>+myThread.isAlive());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>则上述代码运行的结果输出为false,因为mythread对象已经在1秒之内执行完毕。  </p>
<h4 id="join-方法"><a href="#join-方法" class="headerlink" title="join()方法"></a>join()方法</h4><p>在很多情况下，主线程创建并启动了线程，如果子线程中药进行大量耗时运算，主线程往往将早于子线程结束之前结束。这时，如果主线程想等待子线程执行完成之后再结束，比如子线程处理一个数据，主线程要取得这个数据中的值，就要用到join()方法了。方法join()的作用是等待线程对象销毁。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Thread4</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Thread4</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            System.out.println(getName() + <span class="string">"  "</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// 启动子进程</span></span><br><span class="line">        <span class="keyword">new</span> Thread4(<span class="string">"new thread"</span>).start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">5</span>) &#123;</span><br><span class="line">                Thread4 th = <span class="keyword">new</span> Thread4(<span class="string">"joined thread"</span>);</span><br><span class="line">                th.start();</span><br><span class="line">                th.join();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"  "</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>执行结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">main  <span class="number">0</span></span><br><span class="line">main  <span class="number">1</span></span><br><span class="line">main  <span class="number">2</span></span><br><span class="line">main  <span class="number">3</span></span><br><span class="line">main  <span class="number">4</span></span><br><span class="line"><span class="keyword">new</span> thread  <span class="number">0</span></span><br><span class="line"><span class="keyword">new</span> thread  <span class="number">1</span></span><br><span class="line"><span class="keyword">new</span> thread  <span class="number">2</span></span><br><span class="line"><span class="keyword">new</span> thread  <span class="number">3</span></span><br><span class="line"><span class="keyword">new</span> thread  <span class="number">4</span></span><br><span class="line">joined thread  <span class="number">0</span></span><br><span class="line">joined thread  <span class="number">1</span></span><br><span class="line">joined thread  <span class="number">2</span></span><br><span class="line">joined thread  <span class="number">3</span></span><br><span class="line">joined thread  <span class="number">4</span></span><br><span class="line">main  <span class="number">5</span></span><br><span class="line">main  <span class="number">6</span></span><br><span class="line">main  <span class="number">7</span></span><br><span class="line">main  <span class="number">8</span></span><br><span class="line">main  <span class="number">9</span></span><br></pre></td></tr></table></figure></p>
<p>由上可以看出main主线程等待joined thread线程先执行完了才结束的。如果把th.join()这行注释掉，运行结果如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">main  <span class="number">0</span></span><br><span class="line">main  <span class="number">1</span></span><br><span class="line">main  <span class="number">2</span></span><br><span class="line">main  <span class="number">3</span></span><br><span class="line">main  <span class="number">4</span></span><br><span class="line">main  <span class="number">5</span></span><br><span class="line">main  <span class="number">6</span></span><br><span class="line">main  <span class="number">7</span></span><br><span class="line">main  <span class="number">8</span></span><br><span class="line">main  <span class="number">9</span></span><br><span class="line"><span class="keyword">new</span> thread  <span class="number">0</span></span><br><span class="line"><span class="keyword">new</span> thread  <span class="number">1</span></span><br><span class="line"><span class="keyword">new</span> thread  <span class="number">2</span></span><br><span class="line"><span class="keyword">new</span> thread  <span class="number">3</span></span><br><span class="line"><span class="keyword">new</span> thread  <span class="number">4</span></span><br><span class="line">joined thread  <span class="number">0</span></span><br><span class="line">joined thread  <span class="number">1</span></span><br><span class="line">joined thread  <span class="number">2</span></span><br><span class="line">joined thread  <span class="number">3</span></span><br><span class="line">joined thread  <span class="number">4</span></span><br></pre></td></tr></table></figure></p>
<h4 id="getName和setName"><a href="#getName和setName" class="headerlink" title="getName和setName"></a>getName和setName</h4><p>用来得到或者设置线程名称。</p>
<h4 id="getPriority和setPriority"><a href="#getPriority和setPriority" class="headerlink" title="getPriority和setPriority"></a>getPriority和setPriority</h4><p>用来获取和设置线程优先级。</p>
<h4 id="setDaemon和isDaemon"><a href="#setDaemon和isDaemon" class="headerlink" title="setDaemon和isDaemon"></a>setDaemon和isDaemon</h4><p>用来设置线程是否成为守护线程和判断线程是否是守护线程。</p>
<p>守护线程和用户线程的区别在于：守护线程依赖于创建它的线程，而用户线程则不依赖。举个简单的例子：如果在main线程中创建了一个守护线程，当main方法运行完毕之后，守护线程也会随着消亡。而用户线程则不会，用户线程会一直运行直到其运行完毕。在JVM中，像垃圾收集器线程就是守护线程。</p>
<p><strong>在上面已经说到了Thread类中的大部分方法，那么Thread类中的方法调用到底会引起线程状态发生怎样的变化呢？下面一幅图就是在上面的图上进行改进而来的：</strong></p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/thread1_5.jpg" alt=""></p>
<h2 id="停止线程"><a href="#停止线程" class="headerlink" title="停止线程"></a>停止线程</h2><p>停止线程是在多线程开发时很重要的技术点，掌握此技术可以对线程的停止进行有效的处理。<br>停止一个线程可以使用Thread.stop()方法，但最好不用它。该方法是不安全的，已被弃用。<br>在Java中有以下3种方法可以终止正在运行的线程：</p>
<ul>
<li>使用退出标志，使线程正常退出，也就是当run方法完成后线程终止</li>
<li>使用stop方法强行终止线程，但是不推荐使用这个方法，因为stop和suspend及resume一样，都是作废过期的方法，使用他们可能产生不可预料的结果。</li>
<li>使用interrupt方法中断线程，但这个不会终止一个正在运行的线程，还需要加入一个判断才可以完成线程的停止。</li>
</ul>
<h2 id="暂停线程"><a href="#暂停线程" class="headerlink" title="暂停线程"></a>暂停线程</h2><p>interrupt()方法</p>
<h2 id="线程的优先级"><a href="#线程的优先级" class="headerlink" title="线程的优先级"></a>线程的优先级</h2><p>在操作系统中，线程可以划分优先级，优先级较高的线程得到的CPU资源较多，也就是CPU优先执行优先级较高的线程对象中的任务。<br>设置线程优先级有助于帮“线程规划器”确定在下一次选择哪一个线程来优先执行。<br>设置线程的优先级使用setPriority()方法，此方法在JDK的源码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setPriority</span><span class="params">(<span class="keyword">int</span> newPriority)</span> </span>&#123;</span><br><span class="line">        ThreadGroup g;</span><br><span class="line">        checkAccess();</span><br><span class="line">        <span class="keyword">if</span> (newPriority &gt; MAX_PRIORITY || newPriority &lt; MIN_PRIORITY) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>((g = getThreadGroup()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (newPriority &gt; g.getMaxPriority()) &#123;</span><br><span class="line">                newPriority = g.getMaxPriority();</span><br><span class="line">            &#125;</span><br><span class="line">            setPriority0(priority = newPriority);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>在Java中，线程的优先级分为1~10这10个等级，如果小于1或大于10，则JDK抛出异常throw new IllegalArgumentException()。<br>JDK中使用3个常量来预置定义优先级的值，代码如下：<br>public final static int MIN_PRIORITY = 1;<br>public final static int NORM_PRIORITY = 5;<br>public final static int MAX_PRIORITY = 10;</p>
<p>线程优先级特性：</p>
<ul>
<li>继承性<br>比如A线程启动B线程，则B线程的优先级与A是一样的。</li>
<li>规则性<br>高优先级的线程总是大部分先执行完，但不代表高优先级线程全部先执行完。</li>
<li>随机性<br>优先级较高的线程不一定每一次都先执行完。</li>
</ul>
<h2 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h2><p>在Java线程中有两种线程，一种是User Thread（用户线程），另一种是Daemon Thread(守护线程)。<br>Daemon的作用是为其他线程的运行提供服务，比如说GC线程。其实User Thread线程和Daemon Thread守护线程本质上来说去没啥区别的，唯一的区别之处就在虚拟机的离开：如果User Thread全部撤离，那么Daemon Thread也就没啥线程好服务的了，所以虚拟机也就退出了。</p>
<p>守护线程并非虚拟机内部可以提供，用户也可以自行的设定守护线程，方法：public final void setDaemon(boolean on) ；但是有几点需要注意：</p>
<ul>
<li><p>thread.setDaemon(true)必须在thread.start()之前设置，否则会跑出一个IllegalThreadStateException异常。你不能把正在运行的常规线程设置为守护线程。  （备注：这点与守护进程有着明显的区别，守护进程是创建后，让进程摆脱原会话的控制+让进程摆脱原进程组的控制+让进程摆脱原控制终端的控制；所以说寄托于虚拟机的语言机制跟系统级语言有着本质上面的区别）</p>
</li>
<li><p>在Daemon线程中产生的新线程也是Daemon的。  （这一点又是有着本质的区别了：守护进程fork()出来的子进程不再是守护进程，尽管它把父进程的进程相关信息复制过去了，但是子进程的进程的父进程不是init进程，所谓的守护进程本质上说就是“父进程挂掉，init收养，然后文件0,1,2都是/dev/null，当前目录到/”）</p>
</li>
<li><p>不是所有的应用都可以分配给Daemon线程来进行服务，比如读写操作或者计算逻辑。因为在Daemon Thread还没来的及进行操作时，虚拟机可能已经退出了。</p>
</li>
</ul>
<h3 id="同步与死锁"><a href="#同步与死锁" class="headerlink" title="同步与死锁"></a>同步与死锁</h3><ol>
<li><p>同步代码块<br>在代码块上加上”synchronized”关键字，则此代码块就称为同步代码块</p>
</li>
<li><p>同步代码块格式</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(同步对象)&#123;</span><br><span class="line">    需要同步的代码块;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>同步方法<br>除了代码块可以同步，方法也是可以同步的</p>
</li>
<li>方法同步格式<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span> <span class="keyword">void</span> 方法名称()&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>synchronized后续会单独来学习。(●’◡’●)</p>
<h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><p><strong>线程和进程有什么区别？</strong><br>答：一个进程是一个独立(self contained)的运行环境，它可以被看作一个程序或者一个应用。而线程是在进程中执行的一个任务。线程是进程的子集，一个进程可以有很多线程，每条线程并行执行不同的任务。不同的进程使用不同的内存空间，而所有的线程共享一片相同的内存空间。别把它和栈内存搞混，每个线程都拥有单独的栈内存用来存储本地数据。</p>
<p><strong>如何在Java中实现线程？</strong><br>答：<br>创建线程有两种方式：<br>一、继承 Thread 类，扩展线程。<br>二、实现 Runnable 接口。</p>
<p><strong>启动一个线程是调用run()还是start()方法？</strong><br>答：启动一个线程是调用start()方法，使线程所代表的虚拟处理机处于可运行状态，这意味着它可以由JVM 调度并执行，这并不意味着线程就会立即运行。run()方法是线程启动后要进行回调（callback）的方法。</p>
<p><strong>Thread类的sleep()方法和对象的wait()方法都可以让线程暂停执行，它们有什么区别?</strong><br>答：sleep()方法（休眠）是线程类（Thread）的静态方法，调用此方法会让当前线程暂停执行指定的时间，将执行机会（CPU）让给其他线程，但是对象的锁依然保持，因此休眠时间结束后会自动恢复（线程回到就绪状态，请参考第66题中的线程状态转换图）。wait()是Object类的方法，调用对象的wait()方法导致当前线程放弃对象的锁（线程暂停执行），进入对象的等待池（wait pool），只有调用对象的notify()方法（或notifyAll()方法）时才能唤醒等待池中的线程进入等锁池（lock pool），如果线程重新获得对象的锁就可以进入就绪状态。</p>
<p><strong>线程的sleep()方法和yield()方法有什么区别？</strong><br>答：<br>① sleep()方法给其他线程运行机会时不考虑线程的优先级，因此会给低优先级的线程以运行的机会；yield()方法只会给相同优先级或更高优先级的线程以运行的机会；<br>② 线程执行sleep()方法后转入阻塞（blocked）状态，而执行yield()方法后转入就绪（ready）状态；<br>③ sleep()方法声明抛出InterruptedException，而yield()方法没有声明任何异常；<br>④ sleep()方法比yield()方法（跟操作系统CPU调度相关）具有更好的可移植性。</p>
<p><strong>请说出与线程同步以及线程调度相关的方法。</strong><br>答： </p>
<ul>
<li>wait()：使一个线程处于等待（阻塞）状态，并且释放所持有的对象的锁； </li>
<li>sleep()：使一个正在运行的线程处于睡眠状态，是一个静态方法，调用此方法要处理InterruptedException异常； </li>
<li>notify()：唤醒一个处于等待状态的线程，当然在调用此方法的时候，并不能确切的唤醒某一个等待状态的线程，而是由JVM确定唤醒哪个线程，而且与优先级无关； </li>
<li>notityAll()：唤醒所有处于等待状态的线程，该方法并不是将对象的锁给所有线程，而是让它们竞争，只有获得锁的线程才能进入就绪状态；</li>
</ul>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>以上就是多线程的一些基础概念，可能总结的不够仔细，多多包涵。后续会针对一些比较重要的知识点单独列出来总结。学好多线程是拿高薪的基础，小伙伴一起加油吧！</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>该文为本人学习的笔记，方便以后自己跳槽前复习。参考网上各大帖子，取其精华整合自己的理解而成。还有，关注我个人主页的公众号，里面电子书资源有《Java多线程编程核心技术》以及《JAVA并发编程实践》高清版，需要的小伙伴自己取。</p>
<p>《Java多线程编程核心技术》<br>《JAVA并发编程实践》<br><a href="http://www.cnblogs.com/dolphin0520/p/3920357.html" target="_blank" rel="external">Java并发编程：Thread类的使用</a><br><a href="http://blog.csdn.net/jackfrued/article/details/44499227" target="_blank" rel="external">关于Java并发编程的总结和思考</a><br><a href="http://blog.csdn.net/aboy123/article/details/38307539" target="_blank" rel="external">JAVA多线程实现的三种方式</a></p>
<h1 id="整理的思维导图"><a href="#整理的思维导图" class="headerlink" title="整理的思维导图"></a>整理的思维导图</h1><p>个人整理的多线程基础的思维导图,导出的图片无法查看备注的一些信息，所以需要源文件的童鞋可以关注我个人主页上的公众号，回复<strong>多线程基础</strong>即可获取源文件。<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/thread1.png" alt=""></p>
<hr>
<p> 博主弄了个java学习资源的公众号，学习资源超级多，视频，电子书，最新开发工具一个都不能少，已全部分享到百度云盘，求资源共享，打造一个学习方便，工作方便的java公众号，开源开源，有需求的可以关注~撒花<br> <img src="http://7xqch5.com1.z0.glb.clouddn.com/javaLearn.PNG" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Java多线程 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[设计模式干货系列：（七）适配器模式【学习难度：★★☆☆☆，使用频率：★★★★☆】]]></title>
      <url>http://tengj.top/2016/04/17/sjms7adapter/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>今天介绍适配器模式，举个生活中的例子，我们笔记本用到的充电器其实就是个适配器，笔记本电脑的工作电压是20V，而我国的家庭用电是220V，如何让20V的笔记本电脑能够在220V的电压下工作？就是靠这个充电器搞定的。</p>
<p>在软件开发中，有时也存在类似这种不兼容的情况，我们也可以像引入一个电源适配器一样引入一个称之为适配器的角色来协调这些存在不兼容的结构，这种设计方案即为适配器模式。</p>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="适配器模式概念"><a href="#适配器模式概念" class="headerlink" title="适配器模式概念"></a>适配器模式概念</h2><p>适配器模式(Adapter Pattern)：将一个接口转换成客户希望的另一个接口，使接口不兼容的那些类可以一起工作，其别名为包装器(Wrapper)。适配器模式既可以作为类结构型模式，也可以作为对象结构型模式。</p>
<h2 id="适配器模式结构图"><a href="#适配器模式结构图" class="headerlink" title="适配器模式结构图"></a>适配器模式结构图</h2><p>适配器模式有类适配器模式和对象的适配器模式两种不同的形式。如下图所示，左边是的类的适配器模式（继承），右边是对象的适配器模式（引用）。<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/sjms7_1.png" alt=""></p>
<h3 id="类的适配器模式"><a href="#类的适配器模式" class="headerlink" title="类的适配器模式"></a>类的适配器模式</h3><p>类的适配器模式把被适配的类的API转换成目标类的API，其静态结构图如下所示。<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/sjms7_2.png" alt=""><br>在上图中可以看出，Adaptee类并没有simpleOperation2()方法，而客户端则期待这个方法。为使客户端能够使用Adaptee类，提供一个中间环节，即类Adapter，把Adaptee的API与Target类的API衔接起来。Adapter与Adaptee是继承关系，这决定了这个适配器模式是类的。</p>
<p>模式所涉及的角色有：</p>
<ul>
<li>目标（Target）角色：这就是所期待得到的接口。注意，由于这里讨论的是类适配器模式，因此目标不可以是类。</li>
<li>源（Adaptee）角色：现有需要配置的接口。</li>
<li>适配器（Adapter）角色：适配器类是本模式的核心。适配器把源接口转换成目标接口。显然，这一叫色不可以是接口，而必须是具体类。</li>
</ul>
<h3 id="对象的适配器模式"><a href="#对象的适配器模式" class="headerlink" title="对象的适配器模式"></a>对象的适配器模式</h3><p>与类的适配器模式一样，对象的适配器模式把被适配的类的API转换成目标类的API，与类的适配器模式不同的是，对象的适配器模式不是使用继承关系连接到Adaptee类，而是使用委派关系连接到Adaptee类。对象的适配器模式的静态结构如下图所示。<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/sjms7_3.png" alt=""><br>从上图中可以看出，Adaptee类并没有simpleOperation2()方法，而客户端则期待这个方法。为使客户端能够使用Adaptee类，需要提供一个包装（Wrapper）类Adapter。这个包装类包装了一个Adaptee的实例，从而此包装类能够把Adaptee的API与Target类的API衔接起来。Adapter与Adaptee是委派关系，这决定了这个适配器模式是对象的。<br>从上图可以看出，模式所涉及的角色有：</p>
<ul>
<li>目标（Target）角色：这就是所期待的接口，目标可以是具体的或抽象的类。</li>
<li>源（Adaptee）角色：现有需要适配的接口。</li>
<li>适配器（Adapter）角色：适配器类是本模式的核心。适配器把源接口转换成目标接口，显然，这一角色必须是具体类。</li>
</ul>
<h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><h3 id="类的适配器模式代码"><a href="#类的适配器模式代码" class="headerlink" title="类的适配器模式代码"></a>类的适配器模式代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Target</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 这是源类也有的方法simpleOperation1</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">simpleOperation1</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 这是源类没有的方法simpleOperation2</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">simpleOperation2</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面给出的是目标角色的源代码，这个角色是以一个Java接口的形式实现的。可以看出，这个接口声明了两个方法：simpleOperation1()和simpleOperation2()。而源角色Adatpee是一个具体类，它有一个simpleOperation1()方法，但是没有simpleOperation2()方法，如下面代码清单所示。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Adaptee</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 源类含有方法simpleOperation1</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">simpleOperation1</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>适配器角色Adapter扩展了Adaptee,同时又实现了目标接口。由于Adaptee没有提供simpleOperation2()方法，而目标接口又要求这个方法，因此适配器角色Adatper实现了这个方法，如下面代码清单所示。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Adapter</span> <span class="keyword">extends</span> <span class="title">Adaptee</span> <span class="keyword">implements</span> <span class="title">Target</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 由于源类没有方法simpleOperation2</span><br><span class="line">     * 因此适配器类补充上这个方法</span><br><span class="line">     */</span></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">simpleOperation2</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>类的适配器模式的效果</strong>：</p>
<ul>
<li>使用一个具体类把源（Adaptee）适配到目标（Target）中。这样一来，如果源以及源的子类都使用此类适配，就行不通了。</li>
<li>由于适配器类是源的子类，因此可以适配器类中之换掉（Override）源的一些方法。</li>
<li>由于只引进了一个适配器类，因此只有一个路线到目标类，使问题得到简化。</li>
</ul>
<h3 id="对象的适配器模式代码"><a href="#对象的适配器模式代码" class="headerlink" title="对象的适配器模式代码"></a>对象的适配器模式代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Target</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 这是源类也有的方法simpleOperation1</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">simpleOperation1</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 这是源类没有的方法simpleOperation2</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">simpleOperation2</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面给出的是目标角色的源代码，这个角色是以一个Java接口的形式实现的。可以看出，这个接口声明了两个方法：simpleOperation1()和simpleOperation2()。而源角色Adapatee是一个具体类，它有一个simpleOperation1()方法，但是没有simpleOperation2()方法，如下面带入清单所示。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Adaptee</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 源类含有方法simpleOperation1</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">simpleOperation1</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>适配器类的源代码如下面代码清单所示。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Adapter</span> <span class="keyword">implements</span> <span class="title">Target</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Adaptee adaptee;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Adapter</span><span class="params">(Adaptee adaptee)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.adaptee = adaptee;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 源类有方法simpleOperation1</span><br><span class="line">     * 因此适配器类直接委派即可</span><br><span class="line">     */</span></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">simpleOperation1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        adaptee.simpleOperation1();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 源类没有方法simpleOperation2</span><br><span class="line">     * 因此适配器类补充上这个方法</span><br><span class="line">     */</span></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">simpleOperation2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//write you code here</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>对象的适配器模式的效果</strong>：</p>
<ul>
<li>一个适配器可以把多种不同的源适配到同一个目标。换言之，同一个适配器可以把源类和它的子类都适配到目标接口。</li>
<li>与类的适配器模式相比，要想置换源类的方法就不容易。如果一定要置换掉源类的一个或多个方法，就只好先做一个源类的子类，将源类的方法置换掉，然后再把源类的子类当作真正的源进行适配。</li>
<li>虽然想要置换源类的方法不容易，但是要想增加一些新的方法则方便得很，而且新增加的方法可同时适用于所有的源。</li>
</ul>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>适配器模式将现有接口转化为客户类所期望的接口，实现了对现有类的复用，它是一种使用频率非常高的设计模式，在软件开发中得以广泛应用，在Spring等开源框架、驱动程序设计（如JDBC中的数据库驱动程序）中也使用了适配器模式。<br><strong> 1. 主要优点</strong><br>无论是对象适配器模式还是类适配器模式都具有如下优点：</p>
<ul>
<li><strong>将目标类和适配者类解耦</strong>，通过引入一个适配器类来重用现有的适配者类，无须修改原有结构。</li>
<li><strong>增加了类的透明性和复用性</strong>，将具体的业务实现过程封装在适配者类中，对于客户端类而言是透明的，而且提高了适配者的复用性，同一个适配者类可以在多个不同的系统中复用。</li>
<li><strong>灵活性和扩展性都非常好</strong>，通过使用配置文件，可以很方便地更换适配器，也可以在不修改原有代码的基础上增加新的适配器类，完全符合“开闭原则”。</li>
</ul>
<p>具体来说，类适配器模式还有如下优点：</p>
<ul>
<li>由于适配器类是适配者类的子类，因此<strong>可以在适配器类中置换一些适配者的方法</strong>，使得适配器的灵活性更强。</li>
</ul>
<p>对象适配器模式还有如下优点：</p>
<ul>
<li>一个对象适配器<strong>可以把多个不同的适配者适配到同一个目标</strong>；</li>
<li><strong>可以适配一个适配者的子类</strong>，由于适配器和适配者之间是关联关系，根据“里氏代换原则”，适配者的子类也可通过该适配器进行适配。</li>
</ul>
<p><strong> 2. 主要缺点</strong><br><strong>类适配器模式</strong>的缺点如下：</p>
<ul>
<li>对于Java、C#等不支持多重类继承的语言，一次最多只能适配一个适配者类，<strong>不能同时适配多个适配者</strong>；</li>
<li><strong>适配者类不能为最终类</strong>，如在Java中不能为final类，C#中不能为sealed类；</li>
<li>在Java、C#等语言中，<strong>类适配器模式中的目标抽象类只能为接口，不能为类</strong>，其使用有一定的局限性。</li>
</ul>
<p><strong>对象适配器模式</strong>的缺点如下：</p>
<ul>
<li>与类适配器模式相比，<strong>要在适配器中置换适配者类的某些方法比较麻烦</strong>。如果一定要置换掉适配者类的一个或多个方法，可以先做一个适配者类的子类，将适配者类的方法置换掉，然后再把适配者类的子类当做真正的适配者进行适配，实现过程较为复杂。</li>
</ul>
<p><strong> 3. 适用场景</strong><br>在以下情况下可以考虑使用适配器模式：</p>
<ul>
<li>系统需要使用一些现有的类，而这些类的接口（如方法名）不符合系统的需要，甚至没有这些类的源代码。</li>
<li>想创建一个可以重复使用的类，用于与一些彼此之间没有太大关联的一些类，包括一些可能在将来引进的类一起工作。</li>
<li>（对对象的适配器模式而言）在设计里，需要改变多个已有的子类的接口，如果使用类的适配器模式，就要针对每一个子类做一个适配器类，而这不太实际。</li>
</ul>
<h1 id="整理的适配器模式思维导图"><a href="#整理的适配器模式思维导图" class="headerlink" title="整理的适配器模式思维导图"></a>整理的适配器模式思维导图</h1><p>用思维导图画了份总结，懒得看文章的也可以直接看图片，另外需要源文件的童鞋可以关注我个人主页上的公众号，回复<strong>适配器模式</strong>即可获取源文件网盘地址。<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/adpater.png" alt=""></p>
<hr>
<p>博主弄了个java学习资源的公众号，学习资源超级多，视频，电子书，最新开发工具一个都不能少，已全部分享到百度云盘，求资源共享，打造一个学习方便，工作方便的java公众号，开源开源，有需求的可以关注~撒花<br>  <img src="http://7xqch5.com1.z0.glb.clouddn.com/javaLearn.PNG" alt=""></p>
]]></content>
      
        <categories>
            
            <category> 设计模式 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Java集合干货系列-（五）HashSet源码解析]]></title>
      <url>http://tengj.top/2016/04/16/javajh5hashset/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>今天来介绍下HashSet。前面，我们已经系统的对List和Map进行了学习。接下来，我们开始可以学习Set。相信经过Map的了解之后，学习Set会容易很多。毕竟，Set的实现类都是基于Map来实现的(HashSet是通过HashMap实现的)。<br>构造图如下:<br>蓝色线条：继承<br>绿色线条：接口实现<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/jh5_1.png" alt=""></p>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>对于HashSet而言，它是基于HashMap来实现的，底层采用HashMap来保存元素。所以如果对HashMap比较熟悉，那么HashSet是so  easy!!</p>
<h2 id="HashSet简介"><a href="#HashSet简介" class="headerlink" title="HashSet简介"></a>HashSet简介</h2><h3 id="HashSet定义"><a href="#HashSet定义" class="headerlink" title="HashSet定义"></a>HashSet定义</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashSet</span>&lt;<span class="title">E</span>&gt;</span><br><span class="line">     <span class="keyword">extends</span> <span class="title">AbstractSet</span>&lt;<span class="title">E</span>&gt;</span><br><span class="line">     <span class="keyword">implements</span> <span class="title">Set</span>&lt;<span class="title">E</span>&gt;, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br></pre></td></tr></table></figure>
<p>HashSet 是一个<strong>没有重复元素的集合</strong>。<br>它是由HashMap实现的，<strong>不保证元素的顺序</strong>，而且<strong>HashSet允许使用 null 元素</strong>。<br>HashSet是<strong>非同步的</strong>。如果多个线程同时访问一个哈希 set，而其中至少一个线程修改了该 set，那么它必须 保持外部同步。这通常是通过对自然封装该 set 的对象执行同步操作来完成的。如果不存在这样的对象，则应该使用 Collections.synchronizedSet 方法来“包装” set。最好在创建时完成这一操作，以防止对该 set 进行意外的不同步访问：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set s = Collections.synchronizedSet(<span class="keyword">new</span> HashSet(...));</span><br></pre></td></tr></table></figure></p>
<p>HashSet通过iterator()返回的<strong>迭代器是fail-fast的。</strong></p>
<h3 id="HashSet属性"><a href="#HashSet属性" class="headerlink" title="HashSet属性"></a>HashSet属性</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 底层使用HashMap来保存HashSet的元素</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> HashMap&lt;E,Object&gt; map;</span><br><span class="line">    <span class="comment">// Dummy value to associate with an Object in the backing Map</span></span><br><span class="line">    <span class="comment">// 由于Set只使用到了HashMap的key，所以此处定义一个静态的常量Object类，来充当HashMap的value</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object PRESENT = <span class="keyword">new</span> Object();</span><br></pre></td></tr></table></figure>
<p>看到这里就明白了，和我们前面说的一样，HashSet是用HashMap来保存数据，而主要使用到的就是HashMap的key。</p>
<p>看到<strong>private</strong> <strong>static</strong> <strong>final</strong> Object <em>PRESENT</em> = <strong>new</strong> Object();不知道你有没有一点疑问呢。这里使用一个静态的常量Object类来充当HashMap的value，既然这里map的value是没有意义的，为什么不直接使用null值来充当value呢？比如写成这样子<strong>private</strong> <strong>final</strong> Object <em>PRESENT</em> = <strong>null</strong>;我们都知道的是，Java首先将变量PRESENT分配在栈空间，而将new出来的Object分配到堆空间，这里的new Object()是占用堆内存的（一个空的Object对象占用8byte），而null值我们知道，是不会在堆空间分配内存的。那么想一想这里为什么不使用null值。想到什么吗，看一个异常类<strong>java.lang.NullPointerException</strong>， 噢买尬，这绝对是Java程序员的一个噩梦，这是所有Java程序猿都会遇到的一个异常，你看到这个异常你以为很好解决，但是有些时候也不是那么容易解决，Java号称没有指针，但是处处碰到NullPointerException。所以啊，为了从根源上避免NullPointerException的出现，浪费8个byte又怎么样，在下面的代码中我再也不会写这样的代码啦if (xxx == null) { … } else {….}，好爽。</p>
<h3 id="HashSet构造函数"><a href="#HashSet构造函数" class="headerlink" title="HashSet构造函数"></a>HashSet构造函数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line">     * 使用HashMap的默认容量大小16和默认加载因子0.75初始化map，构造一个HashSet</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HashSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        map = <span class="keyword">new</span> HashMap&lt;E,Object&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 构造一个指定Collection参数的HashSet，这里不仅仅是Set，只要实现Collection接口的容器都可以</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HashSet</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">        map = <span class="keyword">new</span> HashMap&lt;E,Object&gt;(Math. max((<span class="keyword">int</span>) (c.size()/.<span class="number">75f</span>) + <span class="number">1</span>, <span class="number">16</span>));</span><br><span class="line">       <span class="comment">// 使用Collection实现的Iterator迭代器，将集合c的元素一个个加入HashSet中</span></span><br><span class="line">       addAll(c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 使用指定的初始容量大小和加载因子初始化map，构造一个HashSet</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HashSet</span><span class="params">( <span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</span><br><span class="line">        map = <span class="keyword">new</span> HashMap&lt;E,Object&gt;(initialCapacity, loadFactor);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 使用指定的初始容量大小和默认的加载因子0.75初始化map，构造一个HashSet</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HashSet</span><span class="params">( <span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">        map = <span class="keyword">new</span> HashMap&lt;E,Object&gt;(initialCapacity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 不对外公开的一个构造方法（默认default修饰），底层构造的是LinkedHashMap，dummy只是一个标示参数，无具体意义</span><br><span class="line">     */</span></span><br><span class="line">    HashSet( <span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor, <span class="keyword">boolean</span> dummy) &#123;</span><br><span class="line">        map = <span class="keyword">new</span> LinkedHashMap&lt;E,Object&gt;(initialCapacity, loadFactor);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从构造方法可以很轻松的看出，HashSet的底层是一个HashMap，理解了HashMap后，这里没什么可说的。只有最后一个构造方法有写区别，这里构造的是LinkedHashMap，该方法不对外公开，实际上是提供给LinkedHashSet使用的，而第三个参数dummy是无意义的，只是为了区分其他构造方法。</p>
<h3 id="API方法摘要"><a href="#API方法摘要" class="headerlink" title="API方法摘要"></a>API方法摘要</h3><p><img src="http://7xqch5.com1.z0.glb.clouddn.com/jh5_2.png" alt=""></p>
<h2 id="HashSet源码解析-基于JDK1-6-0-45"><a href="#HashSet源码解析-基于JDK1-6-0-45" class="headerlink" title="HashSet源码解析(基于JDK1.6.0_45)"></a>HashSet源码解析(基于JDK1.6.0_45)</h2><h3 id="增加和删除"><a href="#增加和删除" class="headerlink" title="增加和删除"></a>增加和删除</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line">     * 利用HashMap的put方法实现add方法</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> map .put(e, PRESENT)== <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 利用HashMap的remove方法实现remove方法</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> map .remove(o)==PRESENT;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 添加一个集合到HashSet中，该方法在AbstractCollection中</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> modified = <span class="keyword">false</span>;</span><br><span class="line">       <span class="comment">// 取得集合c迭代器Iterator</span></span><br><span class="line">       Iterator&lt;? extends E&gt; e = c.iterator();</span><br><span class="line">       <span class="comment">// 遍历迭代器</span></span><br><span class="line">        <span class="keyword">while</span> (e.hasNext()) &#123;</span><br><span class="line">           <span class="comment">// 将集合c的每个元素加入到HashSet中</span></span><br><span class="line">           <span class="keyword">if</span> (add(e.next()))</span><br><span class="line">              modified = <span class="keyword">true</span>;</span><br><span class="line">       &#125;</span><br><span class="line">        <span class="keyword">return</span> modified;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 删除指定集合c中的所有元素，该方法在AbstractSet中</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">removeAll</span><span class="params">(Collection&lt;?&gt; c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> modified = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断当前HashSet元素个数和指定集合c的元素个数，目的是减少遍历次数</span></span><br><span class="line">        <span class="keyword">if</span> (size() &gt; c.size()) &#123;</span><br><span class="line">            <span class="comment">// 如果当前HashSet元素多，则遍历集合c，将集合c中的元素一个个删除</span></span><br><span class="line">            <span class="keyword">for</span> (Iterator&lt;?&gt; i = c.iterator(); i.hasNext(); )</span><br><span class="line">                modified |= remove(i.next());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果集合c元素多，则遍历当前HashSet，将集合c中包含的元素一个个删除</span></span><br><span class="line">            <span class="keyword">for</span> (Iterator&lt;?&gt; i = iterator(); i.hasNext(); ) &#123;</span><br><span class="line">                <span class="keyword">if</span> (c.contains(i.next())) &#123;</span><br><span class="line">                    i.remove();</span><br><span class="line">                    modified = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> modified;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="是否包含"><a href="#是否包含" class="headerlink" title="是否包含"></a>是否包含</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line">     * 利用HashMap的containsKey方法实现contains方法</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> map .containsKey(o);</span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 检查是否包含指定集合中所有元素，该方法在AbstractCollection中</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsAll</span><span class="params">(Collection&lt;?&gt; c)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// 取得集合c的迭代器Iterator</span></span><br><span class="line">       Iterator&lt;?&gt; e = c.iterator();</span><br><span class="line">       <span class="comment">// 遍历迭代器，只要集合c中有一个元素不属于当前HashSet，则返回false</span></span><br><span class="line">        <span class="keyword">while</span> (e.hasNext())</span><br><span class="line">           <span class="keyword">if</span> (!contains(e.next()))</span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong><strong>由于HashMap基于hash表实现，hash表实现的容器最重要的一点就是可以快速存取，那么HashSet对于contains方法，利用HashMap的containsKey方法，效率是非常之快的。在我看来，这个方法也是HashSet最核心的卖点方法之一。</strong></strong></p>
<h3 id="容量检查"><a href="#容量检查" class="headerlink" title="容量检查"></a>容量检查</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line">     * Returns the number of elements in this set (its cardinality).</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@return</span> the number of elements in this set (its cardinality)</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> map .size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Returns &lt;tt&gt;true&lt;/tt&gt; if this set contains no elements.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@return</span> &lt;tt&gt; true&lt;/tt&gt; if this set contains no elements</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> map .isEmpty();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="HashSet遍历方式"><a href="#HashSet遍历方式" class="headerlink" title="HashSet遍历方式"></a>HashSet遍历方式</h3><h4 id="通过Iterator遍历HashSet"><a href="#通过Iterator遍历HashSet" class="headerlink" title="通过Iterator遍历HashSet"></a>通过Iterator遍历HashSet</h4><p>第一步：<strong>根据iterator()获取HashSet的迭代器。</strong><br>第二步：<strong>遍历迭代器获取各个元素</strong>。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设set是HashSet对象</span></span><br><span class="line"><span class="keyword">for</span>(Iterator iterator = set.iterator();</span><br><span class="line">       iterator.hasNext(); ) &#123; </span><br><span class="line">    iterator.next();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="通过for-each遍历HashSet"><a href="#通过for-each遍历HashSet" class="headerlink" title="通过for-each遍历HashSet"></a>通过for-each遍历HashSet</h4><p>第一步：<strong>根据toArray()获取HashSet的元素集合对应的数组。</strong><br>第二步：<strong>遍历数组，获取各个元素。</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设set是HashSet对象，并且set中元素是String类型</span></span><br><span class="line">String[] arr = (String[])set.toArray(<span class="keyword">new</span> String[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">for</span> (String str:arr)</span><br><span class="line">    System.out.printf(<span class="string">"for each : %s\n"</span>, str);</span><br></pre></td></tr></table></figure></p>
<h3 id="HashSet示例"><a href="#HashSet示例" class="headerlink" title="HashSet示例"></a>HashSet示例</h3><p>下面我们通过实例学习如何使用HashSet<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span><br><span class="line"> * @desc HashSet常用API的使用。</span><br><span class="line"> *</span><br><span class="line"> * @author skywang</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashSetTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// HashSet常用API</span></span><br><span class="line">        testHashSetAPIs() ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span><br><span class="line">     * HashSet除了iterator()和add()之外的其它常用API</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testHashSetAPIs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 新建HashSet</span></span><br><span class="line">        HashSet set = <span class="keyword">new</span> HashSet();</span><br><span class="line">        <span class="comment">// 将元素添加到Set中</span></span><br><span class="line">        set.add(<span class="string">"a"</span>);</span><br><span class="line">        set.add(<span class="string">"b"</span>);</span><br><span class="line">        set.add(<span class="string">"c"</span>);</span><br><span class="line">        set.add(<span class="string">"d"</span>);</span><br><span class="line">        set.add(<span class="string">"e"</span>);</span><br><span class="line">        <span class="comment">// 打印HashSet的实际大小</span></span><br><span class="line">        System.out.printf(<span class="string">"size : %d\n"</span>, set.size());</span><br><span class="line">        <span class="comment">// 判断HashSet是否包含某个值</span></span><br><span class="line">        System.out.printf(<span class="string">"HashSet contains a :%s\n"</span>, set.contains(<span class="string">"a"</span>));</span><br><span class="line">        System.out.printf(<span class="string">"HashSet contains g :%s\n"</span>, set.contains(<span class="string">"g"</span>));</span><br><span class="line">        <span class="comment">// 删除HashSet中的“e”</span></span><br><span class="line">        set.remove(<span class="string">"e"</span>);</span><br><span class="line">        <span class="comment">// 将Set转换为数组</span></span><br><span class="line">        String[] arr = (String[])set.toArray(<span class="keyword">new</span> String[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">for</span> (String str:arr)</span><br><span class="line">            System.out.printf(<span class="string">"for each : %s\n"</span>, str);</span><br><span class="line">        <span class="comment">// 新建一个包含b、c、f的HashSet</span></span><br><span class="line">        HashSet otherset = <span class="keyword">new</span> HashSet();</span><br><span class="line">        otherset.add(<span class="string">"b"</span>);</span><br><span class="line">        otherset.add(<span class="string">"c"</span>);</span><br><span class="line">        otherset.add(<span class="string">"f"</span>);</span><br><span class="line">        <span class="comment">// 克隆一个removeset，内容和set一模一样</span></span><br><span class="line">        HashSet removeset = (HashSet)set.clone();</span><br><span class="line">        <span class="comment">// 删除“removeset中，属于otherSet的元素”</span></span><br><span class="line">        removeset.removeAll(otherset);</span><br><span class="line">        <span class="comment">// 打印removeset</span></span><br><span class="line">        System.out.printf(<span class="string">"removeset : %s\n"</span>, removeset);</span><br><span class="line">        <span class="comment">// 克隆一个retainset，内容和set一模一样</span></span><br><span class="line">        HashSet retainset = (HashSet)set.clone();</span><br><span class="line">        <span class="comment">// 保留“retainset中，属于otherSet的元素”</span></span><br><span class="line">        retainset.retainAll(otherset);</span><br><span class="line">        <span class="comment">// 打印retainset</span></span><br><span class="line">        System.out.printf(<span class="string">"retainset : %s\n"</span>, retainset);</span><br><span class="line">        <span class="comment">// 遍历HashSet</span></span><br><span class="line">        <span class="keyword">for</span>(Iterator iterator = set.iterator();iterator.hasNext();) </span><br><span class="line">            System.out.printf(<span class="string">"iterator : %s\n"</span>, iterator.next());</span><br><span class="line">        <span class="comment">// 清空HashSet</span></span><br><span class="line">        set.clear();</span><br><span class="line">        <span class="comment">// 输出HashSet是否为空</span></span><br><span class="line">        System.out.printf(<span class="string">"%s\n"</span>, set.isEmpty()?<span class="string">"set is empty"</span>:<span class="string">"set is not empty"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>运行结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">size : <span class="number">5</span></span><br><span class="line">HashSet contains a :<span class="keyword">true</span></span><br><span class="line">HashSet contains g :<span class="keyword">false</span></span><br><span class="line"><span class="keyword">for</span> each : d</span><br><span class="line"><span class="keyword">for</span> each : b</span><br><span class="line"><span class="keyword">for</span> each : c</span><br><span class="line"><span class="keyword">for</span> each : a</span><br><span class="line">removeset : [d, a]</span><br><span class="line">retainset : [b, c]</span><br><span class="line">iterator : d</span><br><span class="line">iterator : b</span><br><span class="line">iterator : c</span><br><span class="line">iterator : a</span><br><span class="line">set is empty</span><br></pre></td></tr></table></figure></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="HashSet和HashMap、Hashtable的区别"><a href="#HashSet和HashMap、Hashtable的区别" class="headerlink" title="HashSet和HashMap、Hashtable的区别"></a>HashSet和HashMap、Hashtable的区别</h2><p><img src="http://7xqch5.com1.z0.glb.clouddn.com/jh5_3.png" alt=""></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>该文为本人学习的笔记，方便以后自己跳槽前复习。参考网上各大帖子，取其精华整合自己的理解而成。集合框架源码面试经常会问，所以解读源码十分必要,希望对你有用。<br><a href="http://www.cnblogs.com/chenssy/p/3621851.html" target="_blank" rel="external">java提高篇（二四）—–HashSet</a><br><a href="http://www.cnblogs.com/skywang12345/p/3311252.html" target="_blank" rel="external">Java 集合系列16之 HashSet详细介绍(源码解析)和使用示例</a><br><a href="http://www.cnblogs.com/tstd/p/5064032.html" target="_blank" rel="external">给jdk写注释系列之jdk1.6容器(6)-HashSet源码解析&amp;Map迭代器</a></p>
<h1 id="整理的集合框架思维导图"><a href="#整理的集合框架思维导图" class="headerlink" title="整理的集合框架思维导图"></a>整理的集合框架思维导图</h1><p>个人整理的Java集合框架思维导图，动态维护。导出的图片无法查看备注的一些信息，所以需要源文件的童鞋可以关注我个人主页上的公众号，回复<strong>Java集合框架</strong>即可获取源文件。<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/jhswdt.png" alt=""></p>
<hr>
<p>博主弄了个java学习资源的公众号，学习资源超级多，视频，电子书，最新开发工具一个都不能少，已全部分享到百度云盘，求资源共享，打造一个学习方便，工作方便的java公众号，开源开源，有需求的可以关注~撒花<br>  <img src="http://7xqch5.com1.z0.glb.clouddn.com/javaLearn.PNG" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Java集合干货系列 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Java集合干货系列-（四）TreeMap源码解析]]></title>
      <url>http://tengj.top/2016/04/16/javajh4treemap/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>今天来介绍下TreeMap,TreeMap是基于红黑树结构实现的一种Map，要分析TreeMap的实现首先就要对红黑树有所了解。<br>构造图如下:<br>蓝色线条：继承<br>绿色线条：接口实现<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/jh4_1.png" alt=""></p>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>TreeMap底层是基于<strong>红黑树（Red-Black tree）实现</strong>，所以在学习TreeMap之前我们先来了解下红黑树。<br>红黑树又称红-黑二叉树，它首先是一颗二叉树，它具体二叉树所有的特性。同时红黑树更是一颗自平衡的排序二叉树。<br>我们知道一颗基本的二叉树他们都需要满足一个基本性质–即树中的任何节点的值大于它的左子节点，且小于它的右子节点。按照这个基本性质使得树的检索效率大大提高。我们知道在生成二叉树的过程是非常容易失衡的，最坏的情况就是一边倒（只有右/左子树），这样势必会导致二叉树的检索效率大大降低（O(n)），所以为了维持二叉树的平衡，大牛们提出了各种实现的算法，如：<a href="http://baike.baidu.com/view/414610.htm" target="_blank" rel="external">AVL</a>，<a href="http://baike.baidu.com/view/2957252.htm" target="_blank" rel="external">SBT</a>，<a href="http://baike.baidu.com/view/1118088.htm" target="_blank" rel="external">伸展树</a>，<a href="http://baike.baidu.com/view/956602.htm" target="_blank" rel="external">TREAP</a> ，<a href="http://baike.baidu.com/view/133754.htm?fr=aladdin#1_1" target="_blank" rel="external">红黑树</a>等等。</p>
<p>平衡二叉树必须具备如下特性：它是一棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树。也就是说该二叉树的任何一个等等子节点，其左右子树的高度都相近。<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/jh4_2.png" alt=""><br>红黑树顾名思义就是节点是红色或者黑色的平衡二叉树，它通过颜色的约束来维持着二叉树的平衡。对于一棵有效的红黑树二叉树而言我们必须增加如下规则：</p>
<ol>
<li>每个节点都只能是红色或者黑色</li>
<li>根节点是黑色</li>
<li>每个叶节点（NIL节点，空节点）是黑色的。</li>
<li>如果一个结点是红的，则它两个子节点都是黑的。也就是说在一条路径上不能出现相邻的两个红色结点。</li>
<li>从任一节点到其每个叶子的所有路径都包含相同数目的黑色节点。</li>
</ol>
<p>红黑树示意图如下：<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/jh4_3.png" alt=""></p>
<p>上面的规则前4条都好理解，第5条规则到底是什么情况，下面简单解释下，比如图中红8到1左边的叶子节点的路径包含两个黑色节点，到6下面的叶子节点的路径也包含两个黑色节点。</p>
<p>但是在在添加或删除节点后，红黑树就发生了变化，可能不再满足上面的5个特性，为了保持红黑树的以上特性，就有了三个动作：左旋、右旋、着色。</p>
<p>下面来看下什么是红黑树的左旋和右旋：<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/jh4_4.jpg" alt=""></p>
<p><strong>对x进行左旋，意味着”将x变成一个左节点”</strong>。<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/jh4_5.jpg" alt=""></p>
<p><strong>对y进行右旋，意味着”将y变成一个右节点”。</strong><br>  如果还是没看明白，下面找了两张左旋和右旋的动态图<br>  <img src="http://7xqch5.com1.z0.glb.clouddn.com/jh4_6.gif" alt=""><br>  <img src="http://7xqch5.com1.z0.glb.clouddn.com/jh4_7.gif" alt=""><br> ok，对二叉树、红黑树的概念有所了解后，我们来看下红黑树的两个主要逻辑添加和删除，看看TreeMap是怎么实现的。</p>
<h2 id="TreeMap简介"><a href="#TreeMap简介" class="headerlink" title="TreeMap简介"></a>TreeMap简介</h2><h3 id="TreeMap定义"><a href="#TreeMap定义" class="headerlink" title="TreeMap定义"></a>TreeMap定义</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span><br><span class="line">    <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span><br><span class="line">    <span class="keyword">implements</span> <span class="title">NavigableMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br></pre></td></tr></table></figure>
<p>TreeMap 是一个<strong>有序的key-value集合</strong>，它是通过<code>红黑树</code>实现的。<br>TreeMap <strong>继承于AbstractMap</strong>，所以它是一个Map，即一个key-value集合。<br>TreeMap 实现了NavigableMap接口，意味着它<strong>支持一系列的导航方法。</strong>比如返回有序的key集合。<br>TreeMap 实现了Cloneable接口，意味着<strong>它能被克隆</strong>。<br>TreeMap 实现了java.io.Serializable接口，意味着<strong>它支持序列化</strong>。</p>
<p>TreeMap基于<strong>红黑树（Red-Black tree）实现</strong>。该映射根据<strong>其键的自然顺序进行排序</strong>，或者根据<strong>创建映射时提供的 Comparator 进行排序</strong>，具体取决于使用的构造方法。<br>TreeMap的基本操作 containsKey、get、put 和 remove 的时间复杂度是 log(n) 。<br>另外，TreeMap是<strong>非同步</strong>的。 它的iterator 方法返回的<strong>迭代器是fail-fast</strong>的。</p>
<h3 id="TreeMap属性"><a href="#TreeMap属性" class="headerlink" title="TreeMap属性"></a>TreeMap属性</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 比较器</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Comparator&lt;? <span class="keyword">super</span> K&gt; comparator;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 红黑树根节点</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> Entry&lt;K,V&gt; root = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 集合元素数量</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// "fail-fast"集合修改记录</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">int</span> modCount = <span class="number">0</span>;</span><br></pre></td></tr></table></figure>
<p>TreeMap的本质是R-B Tree(红黑树)，它包含几个重要的成员变量： root, size, comparator。</p>
<ul>
<li>root 是红黑数的根节点。它是Entry类型，Entry是红黑数的节点，它包含了红黑数的6个基本组成成分：key(键)、value(值)、left(左孩子)、right(右孩子)、parent(父节点)、color(颜色)。Entry节点根据key进行排序，Entry节点包含的内容为value。 </li>
<li>红黑数排序时，根据Entry中的key进行排序；Entry中的key比较大小是根据比较器comparator来进行判断的。</li>
<li>size是红黑数中节点的个数。</li>
</ul>
<p>Entry是树的节点类，我们来看一下Entry的定义：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">       K key;</span><br><span class="line">        V value;</span><br><span class="line">        <span class="comment">// 左孩子节点</span></span><br><span class="line">        Entry&lt;K,V&gt; left = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 右孩子节点</span></span><br><span class="line">        Entry&lt;K,V&gt; right = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 父节点</span></span><br><span class="line">        Entry&lt;K,V&gt; parent;</span><br><span class="line">        <span class="comment">// 红黑树用来表示节点颜色的属性，默认为黑色</span></span><br><span class="line">        <span class="keyword">boolean</span> color = BLACK;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span><br><span class="line">         * 用key，value和父节点构造一个Entry，默认为黑色</span><br><span class="line">         */</span></span><br><span class="line">        Entry(K key, V value, Entry&lt;K,V&gt; parent) &#123;</span><br><span class="line">            <span class="keyword">this</span>.key = key;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">            <span class="keyword">this</span>.parent = parent;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> K <span class="title">getKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> key ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> V <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> value ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> V <span class="title">setValue</span><span class="params">(V value)</span> </span>&#123;</span><br><span class="line">            V oldValue = <span class="keyword">this</span>.value ;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Map.Entry))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;)o;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> valEquals( key,e.getKey()) &amp;&amp; valEquals( value,e.getValue());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> keyHash = (key ==<span class="keyword">null</span> ? <span class="number">0</span> : key.hashCode());</span><br><span class="line">            <span class="keyword">int</span> valueHash = (value ==<span class="keyword">null</span> ? <span class="number">0</span> : value.hashCode());</span><br><span class="line">            <span class="keyword">return</span> keyHash ^ valueHash;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> key + <span class="string">"="</span> + value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>Entry类理解起来比较简单（因为我们前面看过很多的Entry类了），主要是定义了树的孩子和父亲节点引用，和红黑颜色属性，并对equals和hashCode进行重写，以利于比较是否相等。</p>
<h3 id="HashMap构造函数"><a href="#HashMap构造函数" class="headerlink" title="HashMap构造函数"></a>HashMap构造函数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line">     * 默认构造方法，comparator为空，代表使用key的自然顺序来维持TreeMap的顺序，这里要求key必须实现Comparable接口</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TreeMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        comparator = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 用指定的比较器构造一个TreeMap</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TreeMap</span><span class="params">(Comparator&lt;? <span class="keyword">super</span> K&gt; comparator)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.comparator = comparator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 构造一个指定map的TreeMap，同样比较器comparator为空，使用key的自然顺序排序</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TreeMap</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>&#123;</span><br><span class="line">        comparator = <span class="keyword">null</span>;</span><br><span class="line">        putAll(m);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 构造一个指定SortedMap的TreeMap，根据SortedMap的比较器来来维持TreeMap的顺序</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TreeMap</span><span class="params">(SortedMap&lt;K, ? extends V&gt; m)</span> </span>&#123;</span><br><span class="line">        comparator = m.comparator();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            buildFromSorted(m.size(), m.entrySet().iterator(), <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (java.io.IOException cannotHappen) &#123;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException cannotHappen) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>从构造方法中可以看出，要创建一个红黑树实现的TreeMap必须要有一个用于比较大小的比较器，因为只有能够比较大小才能实现红黑树的左孩子&lt;树根&lt;右孩子的特点。</p>
<h3 id="API方法摘要"><a href="#API方法摘要" class="headerlink" title="API方法摘要"></a>API方法摘要</h3><p><img src="http://7xqch5.com1.z0.glb.clouddn.com/jh4_8.png" alt=""><br><img src="http://7xqch5.com1.z0.glb.clouddn.com/jh4_9.png" alt=""></p>
<h2 id="TreeMap源码解析-基于JDK1-6-0-45"><a href="#TreeMap源码解析-基于JDK1-6-0-45" class="headerlink" title="TreeMap源码解析(基于JDK1.6.0_45)"></a>TreeMap源码解析(基于JDK1.6.0_45)</h2><h3 id="红黑树的添加原理及TreeMap的put实现"><a href="#红黑树的添加原理及TreeMap的put实现" class="headerlink" title="红黑树的添加原理及TreeMap的put实现"></a>红黑树的添加原理及TreeMap的put实现</h3><p>将一个节点添加到红黑树中，通常需要下面几个步骤：</p>
<ol>
<li>将红黑树当成一颗二叉查找树，将节点插入.<br>这一步比较简单，就上开始我们自己写的二叉查找树的操作一样，至于为什么可以这样插入，是因为红黑树本身就是一个二叉查找树。</li>
<li>将新插入的节点设置为红色<br>有没有疑问，为什么新插入的节点一定要是红色的，因为新插入节点为红色，不会违背红黑规则第（5）条，少违背一条就少处理一种情况。</li>
<li>通过旋转和着色，使它恢复平衡，重新变成一颗符合规则的红黑树。<br>要想知道怎么样进行左旋和右旋，首先就要知道为什么要进行左旋和右旋。</li>
</ol>
<p>我们来对比下红黑树的规则和新插入节点后的情况，看下新插入节点会违背哪些规则。</p>
<blockquote>
<p>（1）节点是红色或黑色。<br>这一点肯定是不会违背的了。<br>（2）根节点是黑色。<br>这一点也不会违背了，如果是根节点，只需将根节点插入就好了，因为默认是黑色。<br>（3）每个叶节点（NIL节点，空节点）是黑色的。<br>这一点也不会违背的，我们插入的是非空的节点，不会影响空节点。<br>（4）每个红色节点的两个子节点都是黑色。(从每个叶子到根的所有路径上不能有两个连续的红色节点)<br><strong>这一点是有可能违背的，我们将新插入的节点都设置成红色，如果其父节点也是红色的话，那就产生冲突了</strong>。<br>（5）从任一节点到其每个叶子的所有路径都包含相同数目的黑色节点。<br>这一点也不会违背，因为我们将新插入的节点都设置成红色。</p>
</blockquote>
<p>了解了红黑树左旋和右旋操作，以及新插入节点主要是可能会违背红黑树的规则（4）后，我们来分析下，添加新节点的过程有哪几种情况：</p>
<p>（1）新插入节点为根节点。这种情况直接将新插入节点设置为根节点即可，无需进行后续的旋转和着色处理。</p>
<p>（2）新插入节点的父节点是黑色。这种情况直接将新节点插入即可，不会违背规则（4）。</p>
<p>（3）新插入节点的父节点是红色。这种情况会违背规则（4），而这种情况又分为了以下几种，下面进行图解：<br>①新插入节点N的父节点P和叔叔节点U都是红色。方法是：<strong>将祖父节点G设置为红色，父节点P和叔叔节点U设置为黑色</strong>，这时候就看似平衡了。<strong>但是</strong>，如果祖父节点G的父节点也是红色，这时候又违背规则（4）了，怎么办，方法是：将GPUN这一组看成一个新的节点，按照前面的方案递归；<strong>又但是</strong>根节点为红就违反规则（2）了，怎么办，方法是直接将根节点设置为黑色（两个连续黑色是没问题的）。<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/jh4_10.png" alt=""></p>
<p>②新插入节点N的父节点P是红色，叔叔节点U是黑色或者缺少，且新节点N是P的右孩子。方法是：<strong>左旋父节点P</strong>。左旋后N和P角色互换，但是P和N还是连续的两个红色节点，还没有平衡，怎么办，看第三种情况。<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/jh4_11.png" alt=""></p>
<p>③新插入节点N的父节点P是红色，叔叔节点U是黑色或者缺少，且新节点N是P的左孩子。方法是：<strong>右旋祖父节点G，然后将P设置为黑色，G设置为红色，达到平衡</strong>。此时父节点P是黑色，所有不用担心P的父节点是红色。<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/jh4_12.png" alt=""><br><strong>当然上面说的三种情况都是基于一个前提：新插入节点N的父节点P是祖父节点G的左孩子</strong>，如果P是G的右孩子又是什么情况呢？其实情况和上面是相似的，只需要调整左旋还是右旋，这里就不细讲了。</p>
<p>上面分析了这么多，到底TreeMap是怎么实现的呢，我们来看下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 根节点</span></span><br><span class="line">        Entry&lt;K,V&gt; t = root;</span><br><span class="line">        <span class="comment">// 如果根节点为空，则直接创建一个根节点，返回</span></span><br><span class="line">        <span class="keyword">if</span> (t == <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="comment">// TBD:</span></span><br><span class="line">           <span class="comment">// 5045147: (coll) Adding null to an empty TreeSet should</span></span><br><span class="line">           <span class="comment">// throw NullPointerException</span></span><br><span class="line">           <span class="comment">//</span></span><br><span class="line">           <span class="comment">// compare(key, key); // type check</span></span><br><span class="line">            root = <span class="keyword">new</span> Entry&lt;K,V&gt;(key, value, <span class="keyword">null</span>);</span><br><span class="line">            size = <span class="number">1</span>;</span><br><span class="line">            modCount++;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 记录比较结果</span></span><br><span class="line">        <span class="keyword">int</span> cmp;</span><br><span class="line">        Entry&lt;K,V&gt; parent;</span><br><span class="line">        <span class="comment">// split comparator and comparable paths</span></span><br><span class="line">        <span class="comment">// 当前使用的比较器</span></span><br><span class="line">        Comparator&lt;? <span class="keyword">super</span> K&gt; cpr = comparator ;</span><br><span class="line">        <span class="comment">// 如果比较器不为空，就是用指定的比较器来维护TreeMap的元素顺序</span></span><br><span class="line">        <span class="keyword">if</span> (cpr != <span class="keyword">null</span>) &#123;</span><br><span class="line">             <span class="comment">// do while循环，查找key要插入的位置（也就是新节点的父节点是谁）</span></span><br><span class="line">            do &#123;</span><br><span class="line">                <span class="comment">// 记录上次循环的节点t</span></span><br><span class="line">                parent = t;</span><br><span class="line">                <span class="comment">// 比较当前节点的key和新插入的key的大小</span></span><br><span class="line">                cmp = cpr.compare(key, t. key);</span><br><span class="line">                 <span class="comment">// 新插入的key小的话，则以当前节点的左孩子节点为新的比较节点</span></span><br><span class="line">                <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>)</span><br><span class="line">                    t = t. left;</span><br><span class="line">                <span class="comment">// 新插入的key大的话，则以当前节点的右孩子节点为新的比较节点</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>)</span><br><span class="line">                    t = t. right;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">              <span class="comment">// 如果当前节点的key和新插入的key想的的话，则覆盖map的value，返回</span></span><br><span class="line">                    <span class="keyword">return</span> t.setValue(value);</span><br><span class="line">            <span class="comment">// 只有当t为null，也就是没有要比较节点的时候，代表已经找到新节点要插入的位置</span></span><br><span class="line">            &#125; <span class="keyword">while</span> (t != <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果比较器为空，则使用key作为比较器进行比较</span></span><br><span class="line">            <span class="comment">// 这里要求key不能为空，并且必须实现Comparable接口</span></span><br><span class="line">            <span class="keyword">if</span> (key == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">            Comparable&lt;? <span class="keyword">super</span> K&gt; k = (Comparable&lt;? <span class="keyword">super</span> K&gt;) key;</span><br><span class="line">            <span class="comment">// 和上面一样，喜欢查找新节点要插入的位置</span></span><br><span class="line">            do &#123;</span><br><span class="line">                parent = t;</span><br><span class="line">                cmp = k.compareTo(t. key);</span><br><span class="line">                <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>)</span><br><span class="line">                    t = t. left;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>)</span><br><span class="line">                    t = t. right;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="keyword">return</span> t.setValue(value);</span><br><span class="line">            &#125; <span class="keyword">while</span> (t != <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 找到新节点的父节点后，创建节点对象</span></span><br><span class="line">        Entry&lt;K,V&gt; e = <span class="keyword">new</span> Entry&lt;K,V&gt;(key, value, parent);</span><br><span class="line">        <span class="comment">// 如果新节点key的值小于父节点key的值，则插在父节点的左侧</span></span><br><span class="line">        <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>)</span><br><span class="line">            parent. left = e;</span><br><span class="line">        <span class="comment">// 如果新节点key的值大于父节点key的值，则插在父节点的右侧</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            parent. right = e;</span><br><span class="line">        <span class="comment">// 插入新的节点后，为了保持红黑树平衡，对红黑树进行调整</span></span><br><span class="line">        fixAfterInsertion(e);</span><br><span class="line">        <span class="comment">// map元素个数+1</span></span><br><span class="line">        size++;</span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 新增节点后对红黑树的调整方法 */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">fixAfterInsertion</span><span class="params">(Entry&lt;K,V&gt; x)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 将新插入节点的颜色设置为红色</span></span><br><span class="line">        x. color = RED;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// while循环，保证新插入节点x不是根节点或者新插入节点x的父节点不是红色（这两种情况不需要调整）</span></span><br><span class="line">        <span class="keyword">while</span> (x != <span class="keyword">null</span> &amp;&amp; x != root &amp;&amp; x. parent.color == RED) &#123;</span><br><span class="line">            <span class="comment">// 如果新插入节点x的父节点是祖父节点的左孩子</span></span><br><span class="line">            <span class="keyword">if</span> (parentOf(x) == leftOf(parentOf (parentOf(x)))) &#123;</span><br><span class="line">                <span class="comment">// 取得新插入节点x的叔叔节点</span></span><br><span class="line">                Entry&lt;K,V&gt; y = rightOf(parentOf (parentOf(x)));</span><br><span class="line">                <span class="comment">// 如果新插入x的父节点是红色-------------------①</span></span><br><span class="line">                <span class="keyword">if</span> (colorOf(y) == RED) &#123;</span><br><span class="line">                    <span class="comment">// 将x的父节点设置为黑色</span></span><br><span class="line">                    setColor(parentOf (x), BLACK);</span><br><span class="line">                    <span class="comment">// 将x的叔叔节点设置为黑色</span></span><br><span class="line">                    setColor(y, BLACK);</span><br><span class="line">                    <span class="comment">// 将x的祖父节点设置为红色</span></span><br><span class="line">                    setColor(parentOf (parentOf(x)), RED);</span><br><span class="line">                    <span class="comment">// 将x指向祖父节点，如果x的祖父节点的父节点是红色，按照上面的步奏继续循环</span></span><br><span class="line">                    x = parentOf(parentOf (x));</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 如果新插入x的叔叔节点是黑色或缺少，且x的父节点是祖父节点的右孩子-------------------②</span></span><br><span class="line">                    <span class="keyword">if</span> (x == rightOf( parentOf(x))) &#123;</span><br><span class="line">                        <span class="comment">// 左旋父节点</span></span><br><span class="line">                        x = parentOf(x);</span><br><span class="line">                        rotateLeft(x);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 如果新插入x的叔叔节点是黑色或缺少，且x的父节点是祖父节点的左孩子-------------------③</span></span><br><span class="line">                    <span class="comment">// 将x的父节点设置为黑色</span></span><br><span class="line">                    setColor(parentOf (x), BLACK);</span><br><span class="line">                    <span class="comment">// 将x的祖父节点设置为红色</span></span><br><span class="line">                    setColor(parentOf (parentOf(x)), RED);</span><br><span class="line">                    <span class="comment">// 右旋x的祖父节点</span></span><br><span class="line">                    rotateRight( parentOf(parentOf (x)));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// 如果新插入节点x的父节点是祖父节点的右孩子，下面的步奏和上面的相似，只不过左旋右旋的区分，不在细讲</span></span><br><span class="line">                Entry&lt;K,V&gt; y = leftOf(parentOf (parentOf(x)));</span><br><span class="line">                <span class="keyword">if</span> (colorOf(y) == RED) &#123;</span><br><span class="line">                    setColor(parentOf (x), BLACK);</span><br><span class="line">                    setColor(y, BLACK);</span><br><span class="line">                    setColor(parentOf (parentOf(x)), RED);</span><br><span class="line">                    x = parentOf(parentOf (x));</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (x == leftOf( parentOf(x))) &#123;</span><br><span class="line">                        x = parentOf(x);</span><br><span class="line">                        rotateRight(x);</span><br><span class="line">                    &#125;</span><br><span class="line">                    setColor(parentOf (x), BLACK);</span><br><span class="line">                    setColor(parentOf (parentOf(x)), RED);</span><br><span class="line">                    rotateLeft( parentOf(parentOf (x)));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 最后将根节点设置为黑色，不管当前是不是红色，反正根节点必须是黑色</span></span><br><span class="line">        root.color = BLACK;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 对红黑树的节点(x)进行左旋转</span><br><span class="line">     *</span><br><span class="line">     * 左旋示意图(对节点x进行左旋)：</span><br><span class="line">     *      px                              px</span><br><span class="line">     *     /                               /</span><br><span class="line">     *    x                               y               </span><br><span class="line">     *   /  \      --(左旋)--           / \                </span><br><span class="line">     *  lx   y                          x  ry    </span><br><span class="line">     *     /   \                       /  \</span><br><span class="line">     *    ly   ry                     lx  ly </span><br><span class="line">     *</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rotateLeft</span><span class="params">(Entry&lt;K,V&gt; p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (p != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 取得要选择节点p的右孩子</span></span><br><span class="line">            Entry&lt;K,V&gt; r = p. right;</span><br><span class="line">            <span class="comment">// "p"和"r的左孩子"的相互指向...</span></span><br><span class="line">            <span class="comment">// 将"r的左孩子"设为"p的右孩子"</span></span><br><span class="line">            p. right = r.left ;</span><br><span class="line">            <span class="comment">// 如果r的左孩子非空，将"p"设为"r的左孩子的父亲"</span></span><br><span class="line">            <span class="keyword">if</span> (r.left != <span class="keyword">null</span>)</span><br><span class="line">                r. left.parent = p;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// "p的父亲"和"r"的相互指向...</span></span><br><span class="line">            <span class="comment">// 将"p的父亲"设为"y的父亲"</span></span><br><span class="line">            r. parent = p.parent ;</span><br><span class="line">            <span class="comment">// 如果"p的父亲"是空节点，则将r设为根节点</span></span><br><span class="line">            <span class="keyword">if</span> (p.parent == <span class="keyword">null</span>)</span><br><span class="line">                root = r;</span><br><span class="line">            <span class="comment">// 如果p是它父节点的左孩子，则将r设为"p的父节点的左孩子"</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (p.parent. left == p)</span><br><span class="line">                p. parent.left = r;</span><br><span class="line">            <span class="keyword">else</span>             </span><br><span class="line">                <span class="comment">// 如果p是它父节点的左孩子，则将r设为"p的父节点的左孩子"</span></span><br><span class="line">                p. parent.right = r;</span><br><span class="line">            <span class="comment">// "p"和"r"的相互指向...</span></span><br><span class="line">            <span class="comment">// 将"p"设为"r的左孩子"</span></span><br><span class="line">            r. left = p;</span><br><span class="line">            <span class="comment">// 将"p的父节点"设为"r"</span></span><br><span class="line">            p. parent = r;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 对红黑树的节点进行右旋转</span><br><span class="line">     *</span><br><span class="line">     * 右旋示意图(对节点y进行右旋)：</span><br><span class="line">     *            py                               py</span><br><span class="line">     *           /                                /</span><br><span class="line">     *          y                                x                 </span><br><span class="line">     *         /  \      --(右旋)--            /  \                     </span><br><span class="line">     *        x   ry                           lx   y </span><br><span class="line">     *       / \                                   / \                   </span><br><span class="line">     *      lx  rx                                rx  ry</span><br><span class="line">     *</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rotateRight</span><span class="params">(Entry&lt;K,V&gt; p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (p != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 取得要选择节点p的左孩子</span></span><br><span class="line">            Entry&lt;K,V&gt; l = p. left;           </span><br><span class="line">            <span class="comment">// 将"l的右孩子"设为"p的左孩子"</span></span><br><span class="line">            p. left = l.right ;</span><br><span class="line">            <span class="comment">// 如果"l的右孩子"不为空的话，将"p"设为"l的右孩子的父亲"</span></span><br><span class="line">            <span class="keyword">if</span> (l.right != <span class="keyword">null</span>) l. right.parent = p;</span><br><span class="line">            <span class="comment">// 将"p的父亲"设为"l的父亲"</span></span><br><span class="line">            l. parent = p.parent ;</span><br><span class="line">            <span class="comment">// 如果"p的父亲"是空节点，则将l设为根节点</span></span><br><span class="line">            <span class="keyword">if</span> (p.parent == <span class="keyword">null</span>)</span><br><span class="line">                root = l;      </span><br><span class="line">            <span class="comment">// 如果p是它父节点的右孩子，则将l设为"p的父节点的右孩子"</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (p.parent. right == p)</span><br><span class="line">                p. parent.right = l;</span><br><span class="line">            <span class="comment">//如果p是它父节点的左孩子，将l设为"p的父节点的左孩子"</span></span><br><span class="line">            <span class="keyword">else</span> p.parent .left = l;</span><br><span class="line">            <span class="comment">// 将"p"设为"l的右孩子"</span></span><br><span class="line">            l. right = p;</span><br><span class="line">            <span class="comment">// 将"l"设为"p父节点"</span></span><br><span class="line">            p. parent = l;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>单纯的看代码和注释，绝对会发出，cha这是什么乱七八糟的，任谁也看不懂，所以一定要结合上面的图解，不懂了就看看图，然后动手画一下。</p>
<h3 id="红黑树的删除原理及TreeMap的remove实现"><a href="#红黑树的删除原理及TreeMap的remove实现" class="headerlink" title="红黑树的删除原理及TreeMap的remove实现"></a>红黑树的删除原理及TreeMap的remove实现</h3><p>相比添加，红黑树的删除显得更加复杂了。看下红黑树的删除需要哪几个步奏：</p>
<ul>
<li>将红黑树当成一颗二叉查找树，将节点删除。</li>
<li>通过旋转和着色，使它恢复平衡，重新变成一颗符合规则的红黑树。</li>
</ul>
<p>删除节点的关键是：</p>
<ul>
<li>如果删除的是红色节点，不会违背红黑树的规则。</li>
<li>如果删除的是黑色节点，那么这个路径上就少了一个黑色节点，则违背了红黑树的规则。</li>
</ul>
<p>来看下红黑树删除节点会有哪几种情况：<br>（1）被删除的节点没有孩子节点，即叶子节点。可直接删除。<br>（2）被删除的节点只有一个孩子节点，那么直接删除该节点，然后用它的孩子节点顶替它的位置。<br>（3）被删除的节点有两个孩子节点。这种情况二叉树的删除有一个技巧，就是查找到要删除的节点X，接着我们找到它左子树的最大元素M，或者它右子树的最小元素M，交换X和M的值，然后删除节点M。此时M就最多只有一个子节点N(若是左子树则没有右子节点，若是右子树则没有左子节点 )，若M没有孩子则进入(1)的情况，否则进入(2)的情况。<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/jh4_13.jpg" alt=""><br>如上图，我们假定节点X是要删除的节点，而节点M是找到X右子树的最小元素，所以节点M是X的替代节点，也就是说M是真正要删除的节点。上面我们分析了此时的M只会有一个子节点N，当删除节点M后，N将替代M作为M节点的父节点的子节点。删除的节点M是黑色（删除红色不影响上面分析了），此时如果N是红色，只需将N设置为黑色，就会重新达到平衡，不会出现该路径上少了一个黑色节点的情况；但是如果N是红色，情况则比较复杂，需要对红黑树进行调整，而这种情况又分为了以下几种，下面进行图解：<br>①N的兄弟节点B是红色。方法是：<strong>交换P和B的颜色，左旋父节点P</strong>。此时并未完成平衡，左子树仍然少了一个黑色节点，进入情况③。（B为红色，P必然为黑色）<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/jh4_14.jpg" alt=""></p>
<p>②N的父节点P是黑色，且兄弟节点B和它的两个孩子节点也都是黑色。方法是：<strong>将N的兄弟节点B改为红色</strong>，这样从P出发到叶子节点的路径都包含了相同的黑色节点，<strong>但是</strong>，对于节点P这个子树，P的父节点G到P的叶子节点路径上的黑色节点就少了一个，<strong>此时需要将P整体看做一个节点，继续调整</strong>。<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/jh4_15.jpg" alt=""><br>③N的父节点P为红色，兄弟节点B和它的两个孩子节点也都是黑色。<strong>此时只需要交换P和B的颜色，将P改为黑色，B改为红色，则可到达平衡</strong>。这相当于既然节点N路径少了一个黑色节点，那么B路径也少一个黑色节点，这两个路径达到平衡，为了防止P路径少一个黑色节点，将P节点置黑，则达到最终平衡。<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/jh4_16.jpg" alt=""><br>④N的兄弟节点B是黑色，B的左孩子节点BL是红色，B的右孩子节点BR是黑色，P为任意颜色。方法是：交换B和BL的颜色，右旋节点B。此时N子树路径并没有增加黑色节点，也就是没有达到平衡，此时进入下一种情况⑤。<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/jh4_17.jpg" alt=""><br><img src="http://7xqch5.com1.z0.glb.clouddn.com/jh4_18.jpg" alt=""><br>⑤N的兄弟节点B是黑色，B的右孩子节点BR是红色，B的左孩子节点BL任意颜色，P任意颜色。方法是：BR变为黑色，P变为黑色，B变为P的颜色；左旋节点B。首先给N路径增加一个黑色节点P，P原位置上的颜色不变；S路径少了一个黑色节点，于是将BR改为黑色，最终达到了平衡。<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/jh4_19.jpg" alt=""></p>
<p>上面对红黑树删除的原理和删除过程中遇到的情况进行了分析说明，我们得到的结论是红黑树的删除遇到的主要问题就是被删除路径上的黑色节点减少，于是需要进行一系列旋转和着色，<strong>当然上面的情况是基于M是X右子树的最小元素，而M如果是X左子树的最大元素和上面的情况是相似的</strong>，我们具体看下TreeMap的代码是怎么实现的：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">remove</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 根据key查找到对应的节点对象</span></span><br><span class="line">        Entry&lt;K,V&gt; p = getEntry(key);</span><br><span class="line">        <span class="keyword">if</span> (p == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 记录key对应的value，供返回使用</span></span><br><span class="line">        V oldValue = p. value;</span><br><span class="line">        <span class="comment">// 删除节点</span></span><br><span class="line">        deleteEntry(p);</span><br><span class="line">        <span class="keyword">return</span> oldValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     </span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">deleteEntry</span><span class="params">(Entry&lt;K,V&gt; p)</span> </span>&#123;</span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="comment">// map容器的元素个数减一</span></span><br><span class="line">        size--;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// If strictly internal, copy successor's element to p and then make p</span></span><br><span class="line">        <span class="comment">// point to successor.</span></span><br><span class="line">        <span class="comment">// 如果被删除的节点p的左孩子和右孩子都不为空，则查找其替代节点-----------这里表示要删除的节点有两个孩子（3）</span></span><br><span class="line">        <span class="keyword">if</span> (p.left != <span class="keyword">null</span> &amp;&amp; p. right != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 查找p的替代节点</span></span><br><span class="line">            Entry&lt;K,V&gt; s = successor (p);</span><br><span class="line">            p. key = s.key ;</span><br><span class="line">            p. value = s.value ;</span><br><span class="line">            <span class="comment">// 将p指向替代节点，※※※※※※从此之后的p不再是原先要删除的节点p，而是替代者p（就是图解里面讲到的M） ※※※※※※</span></span><br><span class="line">            p = s;</span><br><span class="line">        &#125; <span class="comment">// p has 2 children</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Start fixup at replacement node, if it exists.</span></span><br><span class="line">        <span class="comment">// replacement为替代节点p的继承者（就是图解里面讲到的N），p的左孩子存在则用p的左孩子替代，否则用p的右孩子</span></span><br><span class="line">        Entry&lt;K,V&gt; replacement = (p. left != <span class="keyword">null</span> ? p.left : p. right);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> (replacement != <span class="keyword">null</span>) &#123; <span class="comment">// 如果上面的if有两个孩子不通过--------------这里表示要删除的节点只有一个孩子（2）</span></span><br><span class="line">            <span class="comment">// Link replacement to parent</span></span><br><span class="line">            <span class="comment">// 将p的父节点拷贝给替代节点</span></span><br><span class="line">            replacement. parent = p.parent ;</span><br><span class="line">            <span class="comment">// 如果替代节点p的父节点为空，也就是p为跟节点，则将replacement设置为根节点</span></span><br><span class="line">            <span class="keyword">if</span> (p.parent == <span class="keyword">null</span>)</span><br><span class="line">                root = replacement;</span><br><span class="line">            <span class="comment">// 如果替代节点p是其父节点的左孩子，则将replacement设置为其父节点的左孩子</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (p == p.parent. left)</span><br><span class="line">                p. parent.left   = replacement;</span><br><span class="line">            <span class="comment">// 如果替代节点p是其父节点的左孩子，则将replacement设置为其父节点的右孩子</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                p. parent.right = replacement;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Null out links so they are OK to use by fixAfterDeletion.</span></span><br><span class="line">            <span class="comment">// 将替代节点p的left、right、parent的指针都指向空，即解除前后引用关系（相当于将p从树种摘除），使得gc可以回收</span></span><br><span class="line">            p. left = p.right = p.parent = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Fix replacement</span></span><br><span class="line">            <span class="comment">// 如果替代节点p的颜色是黑色，则需要调整红黑树以保持其平衡</span></span><br><span class="line">            <span class="keyword">if</span> (p.color == BLACK)</span><br><span class="line">                fixAfterDeletion(replacement);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p.parent == <span class="keyword">null</span>) &#123; <span class="comment">// return if we are the only node.</span></span><br><span class="line">            <span class="comment">// 如果要替代节点p没有父节点，代表p为根节点，直接删除即可</span></span><br><span class="line">            root = <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">//  No children. Use self as phantom replacement and unlink.</span></span><br><span class="line">            <span class="comment">// 判断进入这里说明替代节点p没有孩子--------------这里表示没有孩子则直接删除（1）</span></span><br><span class="line">            <span class="comment">// 如果p的颜色是黑色，则调整红黑树</span></span><br><span class="line">            <span class="keyword">if</span> (p.color == BLACK)</span><br><span class="line">                fixAfterDeletion(p);</span><br><span class="line">            <span class="comment">// 下面删除替代节点p</span></span><br><span class="line">            <span class="keyword">if</span> (p.parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 解除p的父节点对p的引用</span></span><br><span class="line">                <span class="keyword">if</span> (p == p.parent .left)</span><br><span class="line">                    p. parent.left = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (p == p.parent. right)</span><br><span class="line">                    p. parent.right = <span class="keyword">null</span>;</span><br><span class="line">                <span class="comment">// 解除p对p父节点的引用</span></span><br><span class="line">                p. parent = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 查找要删除节点的替代节点</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">static</span> &lt;K,V&gt; TreeMap.Entry&lt;K,V&gt; successor(Entry&lt;K,V&gt; t) &#123;</span><br><span class="line">        <span class="keyword">if</span> (t == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 查找右子树的最左孩子</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (t.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Entry&lt;K,V&gt; p = t. right;</span><br><span class="line">            <span class="keyword">while</span> (p.left != <span class="keyword">null</span>)</span><br><span class="line">                p = p. left;</span><br><span class="line">            <span class="keyword">return</span> p;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 查找左子树的最右孩子</span></span><br><span class="line">            Entry&lt;K,V&gt; p = t. parent;</span><br><span class="line">            Entry&lt;K,V&gt; ch = t;</span><br><span class="line">            <span class="keyword">while</span> (p != <span class="keyword">null</span> &amp;&amp; ch == p. right) &#123;</span><br><span class="line">                ch = p;</span><br><span class="line">                p = p. parent;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** From CLR */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">fixAfterDeletion</span><span class="params">(Entry&lt;K,V&gt; x)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// while循环，保证要删除节点x不是跟节点，并且是黑色（根节点和红色不需要调整）</span></span><br><span class="line">        <span class="keyword">while</span> (x != root &amp;&amp; colorOf (x) == BLACK) &#123;</span><br><span class="line">            <span class="comment">// 如果要删除节点x是其父亲的左孩子</span></span><br><span class="line">            <span class="keyword">if</span> (x == leftOf( parentOf(x))) &#123;</span><br><span class="line">                <span class="comment">// 取出要删除节点x的兄弟节点</span></span><br><span class="line">                Entry&lt;K,V&gt; sib = rightOf(parentOf (x));</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 如果删除节点x的兄弟节点是红色---------------------------①</span></span><br><span class="line">                <span class="keyword">if</span> (colorOf(sib) == RED) &#123;</span><br><span class="line">                    <span class="comment">// 将x的兄弟节点颜色设置为黑色</span></span><br><span class="line">                    setColor(sib, BLACK);</span><br><span class="line">                    <span class="comment">// 将x的父节点颜色设置为红色</span></span><br><span class="line">                    setColor(parentOf (x), RED);</span><br><span class="line">                    <span class="comment">// 左旋x的父节点</span></span><br><span class="line">                    rotateLeft( parentOf(x));</span><br><span class="line">                    <span class="comment">// 将sib重新指向旋转后x的兄弟节点 ，进入else的步奏③</span></span><br><span class="line">                    sib = rightOf(parentOf (x));</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 如果x的兄弟节点的两个孩子都是黑色-------------------------③</span></span><br><span class="line">                <span class="keyword">if</span> (colorOf(leftOf(sib))  == BLACK &amp;&amp;</span><br><span class="line">                    colorOf(rightOf (sib)) == BLACK) &#123;</span><br><span class="line">                    <span class="comment">// 将兄弟节点的颜色设置为红色</span></span><br><span class="line">                    setColor(sib, RED);</span><br><span class="line">                    <span class="comment">// 将x的父节点指向x，如果x的父节点是黑色，需要将x的父节点整天看做一个节点继续调整-------------------------②</span></span><br><span class="line">                    x = parentOf(x);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 如果x的兄弟节点右孩子是黑色，左孩子是红色-------------------------④</span></span><br><span class="line">                    <span class="keyword">if</span> (colorOf(rightOf(sib)) == BLACK) &#123;</span><br><span class="line">                        <span class="comment">// 将x的兄弟节点的左孩子设置为黑色</span></span><br><span class="line">                        setColor(leftOf (sib), BLACK);</span><br><span class="line">                        <span class="comment">// 将x的兄弟节点设置为红色</span></span><br><span class="line">                        setColor(sib, RED);</span><br><span class="line">                        <span class="comment">// 右旋x的兄弟节点</span></span><br><span class="line">                        rotateRight(sib);</span><br><span class="line">                        <span class="comment">// 将sib重新指向旋转后x的兄弟节点，进入步奏⑤</span></span><br><span class="line">                        sib = rightOf(parentOf (x));</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 如果x的兄弟节点右孩子是红色-------------------------⑤</span></span><br><span class="line">                    setColor(sib, colorOf (parentOf(x)));</span><br><span class="line">                    <span class="comment">// 将x的父节点设置为黑色</span></span><br><span class="line">                    setColor(parentOf (x), BLACK);</span><br><span class="line">                    <span class="comment">// 将x的兄弟节点的右孩子设置为黑色</span></span><br><span class="line">                    setColor(rightOf (sib), BLACK);</span><br><span class="line">                    <span class="comment">// 左旋x的父节点</span></span><br><span class="line">                    rotateLeft( parentOf(x));</span><br><span class="line">                    <span class="comment">// 达到平衡，将x指向root，退出循环</span></span><br><span class="line">                    x = root;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// symmetric // 如果要删除节点x是其父亲的右孩子，和上面情况一样，这里不再细讲</span></span><br><span class="line">                Entry&lt;K,V&gt; sib = leftOf(parentOf (x));</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (colorOf(sib) == RED) &#123;</span><br><span class="line">                    setColor(sib, BLACK);</span><br><span class="line">                    setColor(parentOf (x), RED);</span><br><span class="line">                    rotateRight( parentOf(x));</span><br><span class="line">                    sib = leftOf(parentOf (x));</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (colorOf(rightOf(sib)) == BLACK &amp;&amp;</span><br><span class="line">                    colorOf(leftOf (sib)) == BLACK) &#123;</span><br><span class="line">                    setColor(sib, RED);</span><br><span class="line">                    x = parentOf(x);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (colorOf(leftOf(sib)) == BLACK) &#123;</span><br><span class="line">                        setColor(rightOf (sib), BLACK);</span><br><span class="line">                        setColor(sib, RED);</span><br><span class="line">                        rotateLeft(sib);</span><br><span class="line">                        sib = leftOf(parentOf (x));</span><br><span class="line">                    &#125;</span><br><span class="line">                    setColor(sib, colorOf (parentOf(x)));</span><br><span class="line">                    setColor(parentOf (x), BLACK);</span><br><span class="line">                    setColor(leftOf (sib), BLACK);</span><br><span class="line">                    rotateRight( parentOf(x));</span><br><span class="line">                    x = root;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        setColor(x, BLACK);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>删除相对来说更加复杂，还是那句话一定要对照着图解看代码，否则是读不懂的，别问我是怎么看懂得，我n天不看再看代码也不知道123了。<br>终于看完了红黑树的增加和删除，下面来看个稍微简单的查询：</p>
<h3 id="红黑树的查询"><a href="#红黑树的查询" class="headerlink" title="红黑树的查询"></a>红黑树的查询</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        Entry&lt;K,V&gt; p = getEntry(key);</span><br><span class="line">        <span class="keyword">return</span> (p==<span class="keyword">null</span> ? <span class="keyword">null</span> : p. value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> Entry&lt;K,V&gt; getEntry(Object key) &#123;</span><br><span class="line">        <span class="comment">// Offload comparator-based version for sake of performance</span></span><br><span class="line">        <span class="keyword">if</span> (comparator != <span class="keyword">null</span>)</span><br><span class="line">            <span class="comment">// 如果比较器为空，只是用key作为比较器查询</span></span><br><span class="line">            <span class="keyword">return</span> getEntryUsingComparator(key);</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">       Comparable&lt;? <span class="keyword">super</span> K&gt; k = (Comparable&lt;? <span class="keyword">super</span> K&gt;) key;</span><br><span class="line">        <span class="comment">// 取得root节点</span></span><br><span class="line">        Entry&lt;K,V&gt; p = root;</span><br><span class="line">        <span class="comment">// 从root节点开始查找，根据比较器判断是在左子树还是右子树</span></span><br><span class="line">        <span class="keyword">while</span> (p != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> cmp = k.compareTo(p.key );</span><br><span class="line">            <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>)</span><br><span class="line">                p = p. left;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>)</span><br><span class="line">                p = p. right;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> p;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> Entry&lt;K,V&gt; getEntryUsingComparator(Object key) &#123;</span><br><span class="line">       K k = (K) key;</span><br><span class="line">        Comparator&lt;? <span class="keyword">super</span> K&gt; cpr = comparator ;</span><br><span class="line">        <span class="keyword">if</span> (cpr != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Entry&lt;K,V&gt; p = root;</span><br><span class="line">            <span class="keyword">while</span> (p != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> cmp = cpr.compare(k, p.key );</span><br><span class="line">                <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>)</span><br><span class="line">                    p = p. left;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>)</span><br><span class="line">                    p = p. right;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="keyword">return</span> p;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="TreeMap遍历方式"><a href="#TreeMap遍历方式" class="headerlink" title="TreeMap遍历方式"></a>TreeMap遍历方式</h3><h4 id="遍历TreeMap的键值对"><a href="#遍历TreeMap的键值对" class="headerlink" title="遍历TreeMap的键值对"></a>遍历TreeMap的键值对</h4><p>第一步：根据entrySet()获取TreeMap的“键值对”的Set集合。<br>第二步：通过Iterator迭代器遍历“第一步”得到的集合。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设map是TreeMap对象</span></span><br><span class="line"><span class="comment">// map中的key是String类型，value是Integer类型</span></span><br><span class="line">Integer integ = <span class="keyword">null</span>;</span><br><span class="line">Iterator iter = map.entrySet().iterator();</span><br><span class="line"><span class="keyword">while</span>(iter.hasNext()) &#123;</span><br><span class="line">    Map.Entry entry = (Map.Entry)iter.next();</span><br><span class="line">    <span class="comment">// 获取key</span></span><br><span class="line">    key = (String)entry.getKey();</span><br><span class="line">        <span class="comment">// 获取value</span></span><br><span class="line">    integ = (Integer)entry.getValue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="遍历TreeMap的键"><a href="#遍历TreeMap的键" class="headerlink" title="遍历TreeMap的键"></a>遍历TreeMap的键</h4><p>第一步：根据keySet()获取TreeMap的“键”的Set集合。<br>第二步：通过Iterator迭代器遍历“第一步”得到的集合。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设map是TreeMap对象</span></span><br><span class="line"><span class="comment">// map中的key是String类型，value是Integer类型</span></span><br><span class="line">String key = <span class="keyword">null</span>;</span><br><span class="line">Integer integ = <span class="keyword">null</span>;</span><br><span class="line">Iterator iter = map.keySet().iterator();</span><br><span class="line"><span class="keyword">while</span> (iter.hasNext()) &#123;</span><br><span class="line">        <span class="comment">// 获取key</span></span><br><span class="line">    key = (String)iter.next();</span><br><span class="line">        <span class="comment">// 根据key，获取value</span></span><br><span class="line">    integ = (Integer)map.get(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="遍历TreeMap的值"><a href="#遍历TreeMap的值" class="headerlink" title="遍历TreeMap的值"></a>遍历TreeMap的值</h4><p>第一步：根据value()获取TreeMap的“值”的集合。<br>第二步：通过Iterator迭代器遍历“第一步”得到的集合。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设map是TreeMap对象</span></span><br><span class="line"><span class="comment">// map中的key是String类型，value是Integer类型</span></span><br><span class="line">Integer value = <span class="keyword">null</span>;</span><br><span class="line">Collection c = map.values();</span><br><span class="line">Iterator iter= c.iterator();</span><br><span class="line"><span class="keyword">while</span> (iter.hasNext()) &#123;</span><br><span class="line">    value = (Integer)iter.next();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="TreeMap示例"><a href="#TreeMap示例" class="headerlink" title="TreeMap示例"></a>TreeMap示例</h3><p>下面通过实例来学习如何使用TreeMap<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * <span class="doctag">@desc</span> TreeMap测试程序 </span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@author</span> skywang</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeMapTest</span>  </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 测试常用的API</span></span><br><span class="line">        testTreeMapOridinaryAPIs();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 测试TreeMap的导航函数</span></span><br><span class="line">        <span class="comment">//testNavigableMapAPIs();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 测试TreeMap的子Map函数</span></span><br><span class="line">        <span class="comment">//testSubMapAPIs();</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 测试常用的API</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testTreeMapOridinaryAPIs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 初始化随机种子</span></span><br><span class="line">        Random r = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="comment">// 新建TreeMap</span></span><br><span class="line">        TreeMap tmap = <span class="keyword">new</span> TreeMap();</span><br><span class="line">        <span class="comment">// 添加操作</span></span><br><span class="line">        tmap.put(<span class="string">"one"</span>, r.nextInt(<span class="number">10</span>));</span><br><span class="line">        tmap.put(<span class="string">"two"</span>, r.nextInt(<span class="number">10</span>));</span><br><span class="line">        tmap.put(<span class="string">"three"</span>, r.nextInt(<span class="number">10</span>));</span><br><span class="line"></span><br><span class="line">        System.out.printf(<span class="string">"\n ---- testTreeMapOridinaryAPIs ----\n"</span>);</span><br><span class="line">        <span class="comment">// 打印出TreeMap</span></span><br><span class="line">        System.out.printf(<span class="string">"%s\n"</span>,tmap );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过Iterator遍历key-value</span></span><br><span class="line">        Iterator iter = tmap.entrySet().iterator();</span><br><span class="line">        <span class="keyword">while</span>(iter.hasNext()) &#123;</span><br><span class="line">            Map.Entry entry = (Map.Entry)iter.next();</span><br><span class="line">            System.out.printf(<span class="string">"next : %s - %s\n"</span>, entry.getKey(), entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// TreeMap的键值对个数        </span></span><br><span class="line">        System.out.printf(<span class="string">"size: %s\n"</span>, tmap.size());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// containsKey(Object key) :是否包含键key</span></span><br><span class="line">        System.out.printf(<span class="string">"contains key two : %s\n"</span>,tmap.containsKey(<span class="string">"two"</span>));</span><br><span class="line">        System.out.printf(<span class="string">"contains key five : %s\n"</span>,tmap.containsKey(<span class="string">"five"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// containsValue(Object value) :是否包含值value</span></span><br><span class="line">        System.out.printf(<span class="string">"contains value 0 : %s\n"</span>,tmap.containsValue(<span class="keyword">new</span> Integer(<span class="number">0</span>)));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// remove(Object key) ： 删除键key对应的键值对</span></span><br><span class="line">        tmap.remove(<span class="string">"three"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.printf(<span class="string">"tmap:%s\n"</span>,tmap );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// clear() ： 清空TreeMap</span></span><br><span class="line">        tmap.clear();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// isEmpty() : TreeMap是否为空</span></span><br><span class="line">        System.out.printf(<span class="string">"%s\n"</span>, (tmap.isEmpty()?<span class="string">"tmap is empty"</span>:<span class="string">"tmap is not empty"</span>) );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 测试TreeMap的子Map函数</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testSubMapAPIs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 新建TreeMap</span></span><br><span class="line">        TreeMap tmap = <span class="keyword">new</span> TreeMap();</span><br><span class="line">        <span class="comment">// 添加“键值对”</span></span><br><span class="line">        tmap.put(<span class="string">"a"</span>, <span class="number">101</span>);</span><br><span class="line">        tmap.put(<span class="string">"b"</span>, <span class="number">102</span>);</span><br><span class="line">        tmap.put(<span class="string">"c"</span>, <span class="number">103</span>);</span><br><span class="line">        tmap.put(<span class="string">"d"</span>, <span class="number">104</span>);</span><br><span class="line">        tmap.put(<span class="string">"e"</span>, <span class="number">105</span>);</span><br><span class="line"></span><br><span class="line">        System.out.printf(<span class="string">"\n ---- testSubMapAPIs ----\n"</span>);</span><br><span class="line">        <span class="comment">// 打印出TreeMap</span></span><br><span class="line">        System.out.printf(<span class="string">"tmap:\n\t%s\n"</span>, tmap);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 测试 headMap(K toKey)</span></span><br><span class="line">        System.out.printf(<span class="string">"tmap.headMap(\"c\"):\n\t%s\n"</span>, tmap.headMap(<span class="string">"c"</span>));</span><br><span class="line">        <span class="comment">// 测试 headMap(K toKey, boolean inclusive) </span></span><br><span class="line">        System.out.printf(<span class="string">"tmap.headMap(\"c\", true):\n\t%s\n"</span>, tmap.headMap(<span class="string">"c"</span>, <span class="keyword">true</span>));</span><br><span class="line">        System.out.printf(<span class="string">"tmap.headMap(\"c\", false):\n\t%s\n"</span>, tmap.headMap(<span class="string">"c"</span>, <span class="keyword">false</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 测试 tailMap(K fromKey)</span></span><br><span class="line">        System.out.printf(<span class="string">"tmap.tailMap(\"c\"):\n\t%s\n"</span>, tmap.tailMap(<span class="string">"c"</span>));</span><br><span class="line">        <span class="comment">// 测试 tailMap(K fromKey, boolean inclusive)</span></span><br><span class="line">        System.out.printf(<span class="string">"tmap.tailMap(\"c\", true):\n\t%s\n"</span>, tmap.tailMap(<span class="string">"c"</span>, <span class="keyword">true</span>));</span><br><span class="line">        System.out.printf(<span class="string">"tmap.tailMap(\"c\", false):\n\t%s\n"</span>, tmap.tailMap(<span class="string">"c"</span>, <span class="keyword">false</span>));</span><br><span class="line">   </span><br><span class="line">        <span class="comment">// 测试 subMap(K fromKey, K toKey)</span></span><br><span class="line">        System.out.printf(<span class="string">"tmap.subMap(\"a\", \"c\"):\n\t%s\n"</span>, tmap.subMap(<span class="string">"a"</span>, <span class="string">"c"</span>));</span><br><span class="line">        <span class="comment">// 测试 </span></span><br><span class="line">        System.out.printf(<span class="string">"tmap.subMap(\"a\", true, \"c\", true):\n\t%s\n"</span>, </span><br><span class="line">                tmap.subMap(<span class="string">"a"</span>, <span class="keyword">true</span>, <span class="string">"c"</span>, <span class="keyword">true</span>));</span><br><span class="line">        System.out.printf(<span class="string">"tmap.subMap(\"a\", true, \"c\", false):\n\t%s\n"</span>, </span><br><span class="line">                tmap.subMap(<span class="string">"a"</span>, <span class="keyword">true</span>, <span class="string">"c"</span>, <span class="keyword">false</span>));</span><br><span class="line">        System.out.printf(<span class="string">"tmap.subMap(\"a\", false, \"c\", true):\n\t%s\n"</span>, </span><br><span class="line">                tmap.subMap(<span class="string">"a"</span>, <span class="keyword">false</span>, <span class="string">"c"</span>, <span class="keyword">true</span>));</span><br><span class="line">        System.out.printf(<span class="string">"tmap.subMap(\"a\", false, \"c\", false):\n\t%s\n"</span>, </span><br><span class="line">                tmap.subMap(<span class="string">"a"</span>, <span class="keyword">false</span>, <span class="string">"c"</span>, <span class="keyword">false</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 测试 navigableKeySet()</span></span><br><span class="line">        System.out.printf(<span class="string">"tmap.navigableKeySet():\n\t%s\n"</span>, tmap.navigableKeySet());</span><br><span class="line">        <span class="comment">// 测试 descendingKeySet()</span></span><br><span class="line">        System.out.printf(<span class="string">"tmap.descendingKeySet():\n\t%s\n"</span>, tmap.descendingKeySet());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 测试TreeMap的导航函数</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testNavigableMapAPIs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 新建TreeMap</span></span><br><span class="line">        NavigableMap nav = <span class="keyword">new</span> TreeMap();</span><br><span class="line">        <span class="comment">// 添加“键值对”</span></span><br><span class="line">        nav.put(<span class="string">"aaa"</span>, <span class="number">111</span>);</span><br><span class="line">        nav.put(<span class="string">"bbb"</span>, <span class="number">222</span>);</span><br><span class="line">        nav.put(<span class="string">"eee"</span>, <span class="number">333</span>);</span><br><span class="line">        nav.put(<span class="string">"ccc"</span>, <span class="number">555</span>);</span><br><span class="line">        nav.put(<span class="string">"ddd"</span>, <span class="number">444</span>);</span><br><span class="line"></span><br><span class="line">        System.out.printf(<span class="string">"\n ---- testNavigableMapAPIs ----\n"</span>);</span><br><span class="line">        <span class="comment">// 打印出TreeMap</span></span><br><span class="line">        System.out.printf(<span class="string">"Whole list:%s%n"</span>, nav);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取第一个key、第一个Entry</span></span><br><span class="line">        System.out.printf(<span class="string">"First key: %s\tFirst entry: %s%n"</span>,nav.firstKey(), nav.firstEntry());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取最后一个key、最后一个Entry</span></span><br><span class="line">        System.out.printf(<span class="string">"Last key: %s\tLast entry: %s%n"</span>,nav.lastKey(), nav.lastEntry());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取“小于/等于bbb”的最大键值对</span></span><br><span class="line">        System.out.printf(<span class="string">"Key floor before bbb: %s%n"</span>,nav.floorKey(<span class="string">"bbb"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取“小于bbb”的最大键值对</span></span><br><span class="line">        System.out.printf(<span class="string">"Key lower before bbb: %s%n"</span>, nav.lowerKey(<span class="string">"bbb"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取“大于/等于bbb”的最小键值对</span></span><br><span class="line">        System.out.printf(<span class="string">"Key ceiling after ccc: %s%n"</span>,nav.ceilingKey(<span class="string">"ccc"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取“大于bbb”的最小键值对</span></span><br><span class="line">        System.out.printf(<span class="string">"Key higher after ccc: %s%n\n"</span>,nav.higherKey(<span class="string">"ccc"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>运行结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;one=<span class="number">8</span>, three=<span class="number">4</span>, two=<span class="number">2</span>&#125;</span><br><span class="line">next : one - <span class="number">8</span></span><br><span class="line">next : three - <span class="number">4</span></span><br><span class="line">next : two - <span class="number">2</span></span><br><span class="line">size: <span class="number">3</span></span><br><span class="line">contains key two : <span class="keyword">true</span></span><br><span class="line">contains key five : <span class="keyword">false</span></span><br><span class="line">contains value <span class="number">0</span> : <span class="keyword">false</span></span><br><span class="line">tmap:&#123;one=<span class="number">8</span>, two=<span class="number">2</span>&#125;</span><br><span class="line">tmap is empty</span><br></pre></td></tr></table></figure></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>到此TreeMap就分析完了，其实大部分时间都在整理红黑树，在数据结构中树是比较难懂的一个，其算法也比较复杂，对于树的理解一定要多看图画图，要明白这么做是为了解决什么问题，这么做又有什么好处，当然看一遍看不懂就要多看几遍了。什么你问我平时工作中会用到树吗？那真的要看你做的什么性质的工作，如果是web、客户端开发，调用api就可以了对吧，如果是从事底层开发，比如文件系统，存储系统，缓存等工作必须是需要的。当然就算用不到，理解了也是有益无害的。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>该文为本人学习的笔记，方便以后自己跳槽前复习。参考网上各大帖子，取其精华整合自己的理解而成。集合框架源码面试经常会问，所以解读源码十分必要,希望对你有用。<br><a href="http://www.cnblogs.com/chenssy/p/3746600.html" target="_blank" rel="external">Java提高篇（二七）—–TreeMap</a><br><a href="http://www.cnblogs.com/skywang12345/p/3310928.html" target="_blank" rel="external">Java 集合系列12之 TreeMap详细介绍(源码解析)和使用示例</a><br><a href="http://www.cnblogs.com/tstd/p/5081237.html" target="_blank" rel="external">给jdk写注释系列之jdk1.6容器(7)-TreeMap源码解析</a><br><a href="http://www.tuicool.com/articles/J3iMf2R" target="_blank" rel="external">红黑树(五)之 Java的实现 - 如果天空不死</a></p>
<h1 id="整理的集合框架思维导图"><a href="#整理的集合框架思维导图" class="headerlink" title="整理的集合框架思维导图"></a>整理的集合框架思维导图</h1><p>个人整理的Java集合框架思维导图，动态维护。导出的图片无法查看备注的一些信息，所以需要源文件的童鞋可以关注我个人主页上的公众号，回复<strong>Java集合框架</strong>即可获取源文件。<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/jhswdt.png" alt=""></p>
<hr>
<p>博主弄了个java学习资源的公众号，学习资源超级多，视频，电子书，最新开发工具一个都不能少，已全部分享到百度云盘，求资源共享，打造一个学习方便，工作方便的java公众号，开源开源，有需求的可以关注~撒花<br>  <img src="http://7xqch5.com1.z0.glb.clouddn.com/javaLearn.PNG" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Java集合干货系列 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Java集合干货系列-（三）HashMap源码解析]]></title>
      <url>http://tengj.top/2016/04/15/javajh3hashmap/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>今天来介绍下HashMap，之前的List，讲了ArrayList、LinkedList，就前两者而言，反映的是两种思想：</p>
<ul>
<li>ArrayList以数组形式实现，顺序插入、查找快，插入、删除较慢</li>
<li>LinkedList以链表形式实现，顺序插入、查找较慢，插入、删除方便</li>
</ul>
<p>那么是否有一种数据结构能够结合上面两种的优点呢？有，答案就是HashMap。它是基于哈希表的 Map 接口的实现，以key-value的形式存在。<br>构造图如下:<br>蓝色线条：继承<br>绿色线条：接口实现<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/jh3_1.png" alt=""></p>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>要理解HashMap， 就必须要知道了解其底层的实现， 而底层实现里最重要的就是它的数据结构了，<strong>HashMap实际上是一个“链表散列”的数据结构，即数组和链表的结合体</strong>。</p>
<p>在分析要理解HashMap源码前有必要对hashcode进行说明。<br>以下是关于HashCode的官方文档定义：</p>
<blockquote>
<p>hashcode方法返回该对象的哈希码值。支持该方法是为哈希表提供一些优点，例如，java.util.Hashtable 提供的哈希表。<br>hashCode 的常规协定是：<br>在 Java 应用程序执行期间，在同一对象上多次调用 hashCode 方法时，必须一致地返回相同的整数，前提是对象上 equals 比较中所用的信息没有被修改。从某一应用程序的一次执行到同一应用程序的另一次执行，该整数无需保持一致。   </p>
<p>如果根据 equals(Object) 方法，两个对象是相等的，那么在两个对象中的每个对象上调用 hashCode 方法都必须生成相同的整数结果。   </p>
<p>以下情况不 是必需的：如果根据 equals(java.lang.Object) 方法，两个对象不相等，那么在两个对象中的任一对象上调用 hashCode 方法必定会生成不同的整数结果。但是，程序员应该知道，为不相等的对象生成不同整数结果可以提高哈希表的性能。   </p>
<p>实际上，由 Object 类定义的 hashCode 方法确实会针对不同的对象返回不同的整数。（这一般是通过将该对象的内部地址转换成一个整数来实现的，但是 JavaTM 编程语言不需要这种实现技巧。）   </p>
<p>当equals方法被重写时，通常有必要重写 hashCode 方法，以维护 hashCode 方法的常规协定，该协定声明相等对象必须具有相等的哈希码。</p>
</blockquote>
<p>以上这段官方文档的定义，我们可以抽出成以下几个关键点：</p>
<ol>
<li><p>hashCode的存在主要是用于查找的快捷性，如Hashtable，HashMap等，hashCode是用来在散列存储结构中确定对象的存储地址的；</p>
</li>
<li><p>如果两个对象相同，就是适用于equals(java.lang.Object) 方法，那么这两个对象的hashCode一定要相同；</p>
</li>
<li><p>如果对象的equals方法被重写，那么对象的hashCode也尽量重写，并且产生hashCode使用的对象，一定要和equals方法中使用的一致，否则就会违反上面提到的第2点；</p>
</li>
<li><p>两个对象的hashCode相同，并不一定表示两个对象就相同，也就是不一定适用于equals(java.lang.Object) 方法，只能够说明这两个对象在散列存储结构中，如Hashtable，他们<strong>“存放在同一个篮子里”</strong>。</p>
</li>
</ol>
<p>再归纳一下就是hashCode是用于查找使用的，而equals是用于比较两个对象的是否相等的。以下这段话是从别人帖子回复拷贝过来的：</p>
<blockquote>
<p>1.hashcode是用来查找的，如果你学过数据结构就应该知道，在查找和排序这一章有<br>例如内存中有这样的位置<br>0  1  2  3  4  5  6  7<br>而我有个类，这个类有个字段叫ID,我要把这个类存放在以上8个位置之一，如果不用hashcode而任意存放，那么当查找时就需要到这八个位置里挨个去找，或者用二分法一类的算法。<br>但如果用hashcode那就会使效率提高很多。<br>我们这个类中有个字段叫ID,那么我们就定义我们的hashcode为ID％8，然后把我们的类存放在取得得余数那个位置。比如我们的ID为9，9除8的余数为1，那么我们就把该类存在1这个位置，如果ID是13，求得的余数是5，那么我们就把该类放在5这个位置。这样，以后在查找该类时就可以通过ID除 8求余数直接找到存放的位置了。  </p>
<p>2.但是如果两个类有相同的hashcode怎么办那（我们假设上面的类的ID不是唯一的），例如9除以8和17除以8的余数都是1，那么这是不是合法的，回答是：可以这样。那么如何判断呢？在这个时候就需要定义 equals了。<br>也就是说，我们先通过 hashcode来判断两个类是否存放某个桶里，但这个桶里可能有很多类，那么我们就需要再通过 equals 来在这个桶里找到我们要的类。<br>那么。重写了equals()，为什么还要重写hashCode()呢？<br>想想，你要在一个桶里找东西，你必须先要找到这个桶啊，你不通过重写hashcode()来找到桶，光重写equals()有什么用啊  </p>
</blockquote>
<h2 id="HashMap简介"><a href="#HashMap简介" class="headerlink" title="HashMap简介"></a>HashMap简介</h2><h3 id="HashMap定义"><a href="#HashMap定义" class="headerlink" title="HashMap定义"></a>HashMap定义</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span><br><span class="line">    <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span><br><span class="line">    <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;, <span class="title">Cloneable</span>, <span class="title">Serializable</span></span></span><br></pre></td></tr></table></figure>
<p>HashMap 是一个散列表，它存储的内容是键值对(key-value)映射。<br>HashMap继承于AbstractMap，实现了Map、Cloneable、java.io.Serializable接口。<br>HashMap 的实现不是同步的，这意味着它不是线程安全的。它的key、value都可以为null。此外，HashMap中的映射不是有序的。</p>
<h3 id="HashMap属性"><a href="#HashMap属性" class="headerlink" title="HashMap属性"></a>HashMap属性</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认初始容量为16，必须为2的n次幂</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最大容量为2的30次方</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 默认加载因子为0.75f</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="number">0.75f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Entry数组，长度必须为2的n次幂</span></span><br><span class="line">    <span class="keyword">transient</span> Entry[] table;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 已存储元素的数量</span></span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">int</span> size ;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 下次扩容的临界值，size&gt;=threshold就会扩容，threshold等于capacity*load factor</span></span><br><span class="line">    <span class="keyword">int</span> threshold;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加载因子</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">float</span> loadFactor ;</span><br></pre></td></tr></table></figure>
<p>HashMap是通过”拉链法”实现的哈希表。它包括几个重要的成员变量：table, size, threshold, loadFactor, modCount。</p>
<ul>
<li>table是一个Entry[]数组类型，而Entry实际上就是一个单向链表。哈希表的”key-value键值对”都是存储在Entry数组中的。 </li>
<li>size是HashMap的大小，它是HashMap保存的键值对的数量。 </li>
<li>threshold是HashMap的阈值，用于判断是否需要调整HashMap的容量。threshold的值=”容量*加载因子”，当HashMap中存储数据的数量达到threshold时，就需要将HashMap的容量加倍。</li>
<li>loadFactor就是加载因子。 </li>
<li>modCount是用来实现fail-fast机制的。</li>
</ul>
<p>可以看出HashMap底层是用Entry数组存储数据，同时定义了初始容量，最大容量，加载因子等参数，至于为什么容量必须是2的幂，加载因子又是什么，下面再说，先来看一下Entry的定义。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> K key ; </span><br><span class="line">        V value;</span><br><span class="line">        Entry&lt;K,V&gt; next; <span class="comment">// 指向下一个节点</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> hash;</span><br><span class="line"></span><br><span class="line">        Entry( <span class="keyword">int</span> h, K k, V v, Entry&lt;K,V&gt; n) &#123;</span><br><span class="line">            value = v;</span><br><span class="line">            next = n;</span><br><span class="line">            key = k;</span><br><span class="line">            hash = h;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> K <span class="title">getKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> key ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> value ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">setValue</span><span class="params">(V newValue)</span> </span>&#123;</span><br><span class="line">           V oldValue = value;</span><br><span class="line">            value = newValue;</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Map.Entry))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            Map.Entry e = (Map.Entry)o;</span><br><span class="line">            Object k1 = getKey();</span><br><span class="line">            Object k2 = e.getKey();</span><br><span class="line">            <span class="keyword">if</span> (k1 == k2 || (k1 != <span class="keyword">null</span> &amp;&amp; k1.equals(k2))) &#123;</span><br><span class="line">                Object v1 = getValue();</span><br><span class="line">                Object v2 = e.getValue();</span><br><span class="line">                <span class="keyword">if</span> (v1 == v2 || (v1 != <span class="keyword">null</span> &amp;&amp; v1.equals(v2)))</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (key ==<span class="keyword">null</span>   ? <span class="number">0</span> : key.hashCode()) ^</span><br><span class="line">                   ( value==<span class="keyword">null</span> ? <span class="number">0</span> : value.hashCode());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> getKey() + <span class="string">"="</span> + getValue();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 当向HashMap中添加元素的时候调用这个方法，这里没有实现是供子类回调用</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">recordAccess</span><span class="params">(HashMap&lt;K,V&gt; m)</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 当从HashMap中删除元素的时候调动这个方法 ，这里没有实现是供子类回调用</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">recordRemoval</span><span class="params">(HashMap&lt;K,V&gt; m)</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Entry是HashMap的内部类，它继承了Map中的Entry接口，它定义了键(key)，值(value)，和下一个节点的引用(next)，以及hash值。很明确的可以看出Entry是什么结构，它是单线链表的一个节点。<strong>也就是说HashMap的底层结构是一个数组，而数组的元素是一个单向链表。</strong><br><img src="http://7xqch5.com1.z0.glb.clouddn.com/jh3_2.jpg" alt=""></p>
<p>为什么会有这样的设计？之前介绍的List中查询时需要遍历所有的数组，为了解决这个问题HashMap采用hash算法将key散列为一个int值，这个int值对应到数组的下标，再做查询操作的时候，拿到key的散列值，根据数组下标就能直接找到存储在数组的元素。但是由于hash可能会出现相同的散列值，为了解决冲突，<strong>HashMap采用将相同的散列值存储到一个链表中，也就是说在一个链表中的元素他们的散列值绝对是相同的</strong>。找到数组下标取出链表，再遍历链表是不是比遍历整个数组效率好的多呢？</p>
<p>我们来看一下HashMap的具体实现。</p>
<h3 id="HashMap构造函数"><a href="#HashMap构造函数" class="headerlink" title="HashMap构造函数"></a>HashMap构造函数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line">     * 构造一个指定初始容量和加载因子的HashMap</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">( <span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 初始容量和加载因子合法校验</span></span><br><span class="line">        <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException( <span class="string">"Illegal initial capacity: "</span> +</span><br><span class="line">                                               initialCapacity);</span><br><span class="line">        <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class="line">            initialCapacity = MAXIMUM_CAPACITY;</span><br><span class="line">        <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException( <span class="string">"Illegal load factor: "</span> +</span><br><span class="line">                                               loadFactor);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Find a power of 2 &gt;= initialCapacity</span></span><br><span class="line">        <span class="comment">// 确保容量为2的n次幂，是capacity为大于initialCapacity的最小的2的n次幂</span></span><br><span class="line">        <span class="keyword">int</span> capacity = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (capacity &lt; initialCapacity)</span><br><span class="line">            capacity &lt;&lt;= <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 赋值加载因子</span></span><br><span class="line">        <span class="keyword">this</span>.loadFactor = loadFactor;</span><br><span class="line">        <span class="comment">// 赋值扩容临界值</span></span><br><span class="line">        threshold = (<span class="keyword">int</span>)(capacity * loadFactor);</span><br><span class="line">        <span class="comment">// 初始化hash表</span></span><br><span class="line">        table = <span class="keyword">new</span> Entry[capacity];</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 构造一个指定初始容量的HashMap</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">( <span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 构造一个使用默认初始容量(16)和默认加载因子(0.75)的HashMap</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR;</span><br><span class="line">        threshold = (<span class="keyword">int</span>)(DEFAULT_INITIAL_CAPACITY * DEFAULT_LOAD_FACTOR);</span><br><span class="line">        table = <span class="keyword">new</span> Entry[DEFAULT_INITIAL_CAPACITY];</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 构造一个指定map的HashMap，所创建HashMap使用默认加载因子(0.75)和足以容纳指定map的初始容量。</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 确保最小初始容量为16，并保证可以容纳指定map</span></span><br><span class="line">        <span class="keyword">this</span>(Math.max(( <span class="keyword">int</span>) (m.size() / DEFAULT_LOAD_FACTOR) + <span class="number">1</span>,</span><br><span class="line">                      DEFAULT_INITIAL_CAPACITY ), DEFAULT_LOAD_FACTOR);</span><br><span class="line">        putAllForCreate(m);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> HashMap提供了三个构造函数：</p>
<ul>
<li>HashMap()：构造一个具有默认初始容量 (16) 和默认加载因子 (0.75) 的空 HashMap。</li>
<li>HashMap(int initialCapacity)：构造一个带指定初始容量和默认加载因子 (0.75) 的空 HashMap。</li>
<li>HashMap(int initialCapacity, float loadFactor)：构造一个带指定初始容量和加载因子的空 HashMap。</li>
<li>public  HashMap(Map&lt;?  extends K,  ?  extends V&gt; m)：包含“子Map”的构造函数</li>
</ul>
<p>在这里提到了两个参数：初始容量，加载因子。这两个参数是影响HashMap性能的重要参数，其中容量表示哈希表中桶的数量，初始容量是创建哈希表时的容量，加载因子是哈希表在其容量自动增加之前可以达到多满的一种尺度，它衡量的是一个散列表的空间的使用程度，负载因子越大表示散列表的装填程度越高，反之愈小。对于使用链表法的散列表来说，查找一个元素的平均时间是O(1+a)，因此如果负载因子越大，对空间的利用更充分，然而后果是查找效率的降低；如果负载因子太小，那么散列表的数据将过于稀疏，对空间造成严重浪费。系统默认负载因子为0.75，一般情况下我们是无需修改的。</p>
<h3 id="API方法摘要"><a href="#API方法摘要" class="headerlink" title="API方法摘要"></a>API方法摘要</h3><p><img src="http://7xqch5.com1.z0.glb.clouddn.com/jh3_3.png" alt=""></p>
<h2 id="HashMap源码解析-基于JDK1-6-0-45"><a href="#HashMap源码解析-基于JDK1-6-0-45" class="headerlink" title="HashMap源码解析(基于JDK1.6.0_45)"></a>HashMap源码解析(基于JDK1.6.0_45)</h2><h3 id="put方法"><a href="#put方法" class="headerlink" title="put方法"></a>put方法</h3><p>HashMap会对null值key进行特殊处理，总是放到table[0]位置<br>put过程是先计算hash然后通过hash与table.length取摸计算index值，然后将key放到table[index]位置，当table[index]已存在其它元素时，会在table[index]位置形成一个链表，将新添加的元素放在table[index]，原来的元素通过Entry的next进行链接，这样以链表形式解决hash冲突问题，当元素数量达到临界值(capactiy<em>factor)时，则进行扩容，是table数组长度变为table.length</em>2<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> putForNullKey(value); <span class="comment">//处理null值</span></span><br><span class="line">        <span class="keyword">int</span> hash = hash(key.hashCode());<span class="comment">//计算hash</span></span><br><span class="line">        <span class="keyword">int</span> i = indexFor(hash, table.length);<span class="comment">//计算在数组中的存储位置</span></span><br><span class="line">    <span class="comment">//遍历table[i]位置的链表，查找相同的key，若找到则使用新的value替换掉原来的oldValue并返回oldValue</span></span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[i]; e != <span class="keyword">null</span>; e = e.next) &#123;</span><br><span class="line">            Object k;</span><br><span class="line">            <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123;</span><br><span class="line">                V oldValue = e.value;</span><br><span class="line">                e.value = value;</span><br><span class="line">                e.recordAccess(<span class="keyword">this</span>);</span><br><span class="line">                <span class="keyword">return</span> oldValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//若没有在table[i]位置找到相同的key，则添加key到table[i]位置，新的元素总是在table[i]位置的第一个元素，原来的元素后移</span></span><br><span class="line">        modCount++;</span><br><span class="line">        addEntry(hash, key, value, i);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> V <span class="title">putForNullKey</span><span class="params">(V value)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 取出数组第1个位置（下标等于0）的节点，如果存在则覆盖不存在则新增，和上面的put一样不多讲，</span></span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table [<span class="number">0</span>]; e != <span class="keyword">null</span>; e = e. next) &#123;</span><br><span class="line">            <span class="keyword">if</span> (e.key == <span class="keyword">null</span>) &#123;</span><br><span class="line">                V oldValue = e. value;</span><br><span class="line">                e. value = value;</span><br><span class="line">                e.recordAccess( <span class="keyword">this</span>);</span><br><span class="line">                <span class="keyword">return</span> oldValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="comment">// 如果key等于null，则hash值等于0</span></span><br><span class="line">        addEntry(<span class="number">0</span>, <span class="keyword">null</span>, value, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addEntry</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">int</span> bucketIndex)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//添加key到table[bucketIndex]位置，新的元素总是在table[bucketIndex]的第一个元素，原来的元素后移</span></span><br><span class="line">    Entry&lt;K,V&gt; e = table[bucketIndex];</span><br><span class="line">        table[bucketIndex] = <span class="keyword">new</span> Entry&lt;K,V&gt;(hash, key, value, e);</span><br><span class="line">    <span class="comment">//判断元素个数是否达到了临界值，若已达到临界值则扩容，table长度翻倍</span></span><br><span class="line">        <span class="keyword">if</span> (size++ &gt;= threshold)</span><br><span class="line">            resize(<span class="number">2</span> * table.length);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="get方法"><a href="#get方法" class="headerlink" title="get方法"></a>get方法</h3><p>同样当key为null时会进行特殊处理，在table[0]的链表上查找key为null的元素<br>get的过程是先计算hash然后通过hash与table.length取摸计算index值，然后遍历table[index]上的链表，直到找到key，然后返回<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> getForNullKey();<span class="comment">//处理null值</span></span><br><span class="line">        <span class="keyword">int</span> hash = hash(key.hashCode());<span class="comment">//计算hash</span></span><br><span class="line">    <span class="comment">//在table[index]遍历查找key，若找到则返回value，找不到返回null</span></span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[indexFor(hash, table.length)];</span><br><span class="line">             e != <span class="keyword">null</span>;</span><br><span class="line">             e = e.next) &#123;</span><br><span class="line">            Object k;</span><br><span class="line">            <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k)))</span><br><span class="line">                <span class="keyword">return</span> e.value;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="remove方法"><a href="#remove方法" class="headerlink" title="remove方法"></a>remove方法</h3><p>remove方法和put get类似，计算hash，计算index，然后遍历查找，将找到的元素从table[index]链表移除<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line">     * 根据key删除元素</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">remove</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        Entry&lt;K,V&gt; e = removeEntryForKey(key);</span><br><span class="line">        <span class="keyword">return</span> (e == <span class="keyword">null</span> ? <span class="keyword">null</span> : e. value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 根据key删除链表节点</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">final</span> Entry&lt;K,V&gt; removeEntryForKey(Object key) &#123;</span><br><span class="line">        <span class="comment">// 计算key的hash值</span></span><br><span class="line">        <span class="keyword">int</span> hash = (key == <span class="keyword">null</span>) ? <span class="number">0</span> : hash(key.hashCode());</span><br><span class="line">        <span class="comment">// 根据hash值计算key在数组的索引位置</span></span><br><span class="line">        <span class="keyword">int</span> i = indexFor(hash, table.length );</span><br><span class="line">        <span class="comment">// 找到该索引出的第一个节点</span></span><br><span class="line">        Entry&lt;K,V&gt; prev = table[i];</span><br><span class="line">        Entry&lt;K,V&gt; e = prev;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历链表（从链表第一个节点开始next），找出相同的key，</span></span><br><span class="line">        <span class="keyword">while</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Entry&lt;K,V&gt; next = e. next;</span><br><span class="line">            Object k;</span><br><span class="line">            <span class="comment">// 如果hash值和key都相等，则认为相等</span></span><br><span class="line">            <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                ((k = e. key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k)))) &#123;</span><br><span class="line">                <span class="comment">// 修改版本+1</span></span><br><span class="line">                modCount++;</span><br><span class="line">                <span class="comment">// 计数器减1</span></span><br><span class="line">                size--;</span><br><span class="line">                <span class="comment">// 如果第一个就是要删除的节点（第一个节点没有上一个节点，所以要分开判断）</span></span><br><span class="line">                <span class="keyword">if</span> (prev == e)</span><br><span class="line">                    <span class="comment">// 则将下一个节点放到table[i]位置（要删除的节点被覆盖）</span></span><br><span class="line">                    table[i] = next;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                 <span class="comment">// 否则将上一个节点的next指向当要删除节点下一个（要删除节点被忽略，没有指向了）</span></span><br><span class="line">                    prev. next = next;</span><br><span class="line">                e.recordRemoval( <span class="keyword">this</span>);</span><br><span class="line">                <span class="comment">// 返回删除的节点内容</span></span><br><span class="line">                <span class="keyword">return</span> e;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 保存当前节点为下次循环的上一个节点</span></span><br><span class="line">            prev = e;</span><br><span class="line">            <span class="comment">// 下次循环</span></span><br><span class="line">            e = next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="clear-方法"><a href="#clear-方法" class="headerlink" title="clear()方法"></a>clear()方法</h3><p>clear方法非常简单，就是遍历table然后把每个位置置为null，同时修改元素个数为0<br>需要注意的是clear方法只会清楚里面的元素，并不会重置capactiy<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        modCount++;</span><br><span class="line">        Entry[] tab = table;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tab.length; i++)</span><br><span class="line">            tab[i] = <span class="keyword">null</span>;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="resize方法"><a href="#resize方法" class="headerlink" title="resize方法"></a>resize方法</h3><p>resize方法在hashmap中并没有公开，这个方法实现了非常重要的hashmap扩容，具体过程为：先创建一个容量为table.length<em>2的新table，修改临界值，然后把table里面元素计算hash值并使用hash与table.length</em>2重新计算index放入到新的table里面<br>这里需要注意下是用<strong>每个元素的hash全部重新计算index</strong>，而不是简单的把原table对应index位置元素简单的移动到新table对应位置<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">resize</span><span class="params">( <span class="keyword">int</span> newCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 当前数组</span></span><br><span class="line">        Entry[] oldTable = table;</span><br><span class="line">        <span class="comment">// 当前数组容量</span></span><br><span class="line">        <span class="keyword">int</span> oldCapacity = oldTable.length ;</span><br><span class="line">        <span class="comment">// 如果当前数组已经是默认最大容量MAXIMUM_CAPACITY ，则将临界值改为Integer.MAX_VALUE 返回</span></span><br><span class="line">        <span class="keyword">if</span> (oldCapacity == MAXIMUM_CAPACITY) &#123;</span><br><span class="line">            threshold = Integer.MAX_VALUE;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用新的容量创建一个新的链表数组</span></span><br><span class="line">        Entry[] newTable = <span class="keyword">new</span> Entry[newCapacity];</span><br><span class="line">        <span class="comment">// 将当前数组中的元素都移动到新数组中</span></span><br><span class="line">        transfer(newTable);</span><br><span class="line">        <span class="comment">// 将当前数组指向新创建的数组</span></span><br><span class="line">        table = newTable;</span><br><span class="line">        <span class="comment">// 重新计算临界值</span></span><br><span class="line">        threshold = (<span class="keyword">int</span>)(newCapacity * loadFactor);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Transfers all entries from current table to newTable.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">transfer</span><span class="params">(Entry[] newTable)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 当前数组</span></span><br><span class="line">        Entry[] src = table;</span><br><span class="line">        <span class="comment">// 新数组长度</span></span><br><span class="line">        <span class="keyword">int</span> newCapacity = newTable.length ;</span><br><span class="line">        <span class="comment">// 遍历当前数组的元素，重新计算每个元素所在数组位置</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; src. length; j++) &#123;</span><br><span class="line">            <span class="comment">// 取出数组中的链表第一个节点</span></span><br><span class="line">            Entry&lt;K,V&gt; e = src[j];</span><br><span class="line">            <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 将旧链表位置置空</span></span><br><span class="line">                src[j] = <span class="keyword">null</span>;</span><br><span class="line">                <span class="comment">// 循环链表，挨个将每个节点插入到新的数组位置中</span></span><br><span class="line">                do &#123;</span><br><span class="line">                    <span class="comment">// 取出链表中的当前节点的下一个节点</span></span><br><span class="line">                    Entry&lt;K,V&gt; next = e. next;</span><br><span class="line">                    <span class="comment">// 重新计算该链表在数组中的索引位置</span></span><br><span class="line">                    <span class="keyword">int</span> i = indexFor(e. hash, newCapacity);</span><br><span class="line">                    <span class="comment">// 将下一个节点指向newTable[i]</span></span><br><span class="line">                    e. next = newTable[i];</span><br><span class="line">                    <span class="comment">// 将当前节点放置在newTable[i]位置</span></span><br><span class="line">                    newTable[i] = e;</span><br><span class="line">                    <span class="comment">// 下一次循环</span></span><br><span class="line">                    e = next;</span><br><span class="line">                &#125; <span class="keyword">while</span> (e != <span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>transfer方法中，由于数组的容量已经变大，也就导致hash算法indexFor已经发生变化，原先在一个链表中的元素，在新的hash下可能会产生不同的散列值，so所有元素都要重新计算后安顿一番。注意在do while循环的过程中，每次循环都是将下个节点指向newTable[i] ，是因为如果有相同的散列值i，上个节点已经放置在newTable[i]位置，这里还是下一个节点的next指向上一个节点（不知道这里是否能理解，画个图理解下吧）。</p>
<p>Map中的元素越多，hash冲突的几率也就越大，数组长度是固定的，所以导致链表越来越长，那么查询的效率当然也就越低下了。还记不记得同时数组容器的ArrayList怎么做的，扩容！而HashMap的扩容resize，需要将所有的元素重新计算后，一个个重新排列到新的数组中去，这是非常低效的，和ArrayList一样，在可以预知容量大小的情况下，提前预设容量会减少HashMap的扩容，提高性能。</p>
<p>再来看看加载因子的作用，如果加载因子越大，数组填充的越满，这样可以有效的利用空间，但是有一个弊端就是可能会导致冲突的加大，链表过长，反过来却又会造成内存空间的浪费。所以只能需要在空间和时间中找一个平衡点，那就是设置有效的加载因子。我们知道，很多时候为了提高查询效率的做法都是牺牲空间换取时间，到底该怎么取舍，那就要具体分析了。</p>
<h3 id="containsKey方法"><a href="#containsKey方法" class="headerlink" title="containsKey方法"></a>containsKey方法</h3><p>containsKey方法是先计算hash然后使用hash和table.length取摸得到index值，遍历table[index]元素查找是否包含key相同的值<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsKey</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> getEntry(key) != <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> Entry&lt;K,V&gt; getEntry(Object key) &#123;</span><br><span class="line">    <span class="comment">// 获取哈希值</span></span><br><span class="line">    <span class="comment">// HashMap将“key为null”的元素存储在table[0]位置，“key不为null”的则调用hash()计算哈希值</span></span><br><span class="line">    <span class="keyword">int</span> hash = (key == <span class="keyword">null</span>) ? <span class="number">0</span> : hash(key.hashCode());</span><br><span class="line">    <span class="comment">// 在“该hash值对应的链表”上查找“键值等于key”的元素</span></span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[indexFor(hash, table.length)];</span><br><span class="line">         e != <span class="keyword">null</span>;</span><br><span class="line">         e = e.next) &#123;</span><br><span class="line">        Object k;</span><br><span class="line">        <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">            ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            <span class="keyword">return</span> e;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>getEntry() 的作用就是<strong>返回“键为key”的键值对</strong>，它的实现源码中已经进行了说明。<br>这里需要强调的是：<strong>HashMap将“key为null”的元素都放在table的位置0处</strong>，即table[0]中；“key不为null”的放在table的其余位置！</p>
<h3 id="containsValue方法"><a href="#containsValue方法" class="headerlink" title="containsValue方法"></a>containsValue方法</h3><p>containsValue方法就比较粗暴了，就是直接遍历所有元素直到找到value，由此可见HashMap的containsValue方法本质上和普通数组和list的contains方法没什么区别，你别指望它会像containsKey那么高效<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsValue</span><span class="params">(Object value)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 若“value为null”，则调用containsNullValue()查找</span></span><br><span class="line">    <span class="keyword">if</span> (value == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> containsNullValue();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 若“value不为null”，则查找HashMap中是否有值为value的节点。</span></span><br><span class="line">    Entry[] tab = table;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tab.length ; i++)</span><br><span class="line">        <span class="keyword">for</span> (Entry e = tab[i] ; e != <span class="keyword">null</span> ; e = e.next)</span><br><span class="line">            <span class="keyword">if</span> (value.equals(e.value))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>containsNullValue() 的作用<strong>判断HashMap中是否包含“值为null”的元素</strong>。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">containsNullValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Entry[] tab = table;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tab.length ; i++)</span><br><span class="line">        <span class="keyword">for</span> (Entry e = tab[i] ; e != <span class="keyword">null</span> ; e = e.next)</span><br><span class="line">            <span class="keyword">if</span> (e.value == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="entrySet-、values-、keySet-方法"><a href="#entrySet-、values-、keySet-方法" class="headerlink" title="entrySet()、values()、keySet()方法"></a>entrySet()、values()、keySet()方法</h3><p>它们3个的原理类似，这里以entrySet()为例来说明。<br>entrySet()的作用是<strong>返回“HashMap中所有Entry的集合”，它是一个集合。</strong>实现代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回“HashMap的Entry集合”</span></span><br><span class="line"><span class="keyword">public</span> Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet() &#123;</span><br><span class="line">    <span class="keyword">return</span> entrySet0();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回“HashMap的Entry集合”，它实际是返回一个EntrySet对象</span></span><br><span class="line"><span class="keyword">private</span> Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet0() &#123;</span><br><span class="line">    Set&lt;Map.Entry&lt;K,V&gt;&gt; es = entrySet;</span><br><span class="line">    <span class="keyword">return</span> es != <span class="keyword">null</span> ? es : (entrySet = <span class="keyword">new</span> EntrySet());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// EntrySet对应的集合</span></span><br><span class="line"><span class="comment">// EntrySet继承于AbstractSet，说明该集合中没有重复的EntrySet。</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">EntrySet</span> <span class="keyword">extends</span> <span class="title">AbstractSet</span>&lt;<span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> Iterator&lt;Map.Entry&lt;K,V&gt;&gt; iterator() &#123;</span><br><span class="line">        <span class="keyword">return</span> newEntryIterator();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Map.Entry))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        Map.Entry&lt;K,V&gt; e = (Map.Entry&lt;K,V&gt;) o;</span><br><span class="line">        Entry&lt;K,V&gt; candidate = getEntry(e.getKey());</span><br><span class="line">        <span class="keyword">return</span> candidate != <span class="keyword">null</span> &amp;&amp; candidate.equals(e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> removeMapping(o) != <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        HashMap.<span class="keyword">this</span>.clear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>HashMap是通过拉链法实现的散列表。表现在HashMap包括许多的Entry，而每一个Entry本质上又是一个单向链表。那么HashMap遍历key-value键值对的时候，是如何逐个去遍历的呢？</p>
<p>下面我们就看看<strong>HashMap是如何通过entrySet()遍历的。</strong><br>entrySet()实际上是通过newEntryIterator()实现的。 下面我们看看它的代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回一个“entry迭代器”</span></span><br><span class="line">Iterator&lt;Map.Entry&lt;K,V&gt;&gt; newEntryIterator()   &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> EntryIterator();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Entry的迭代器</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">EntryIterator</span> <span class="keyword">extends</span> <span class="title">HashIterator</span>&lt;<span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> Map.Entry&lt;K,V&gt; next() &#123;</span><br><span class="line">        <span class="keyword">return</span> nextEntry();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// HashIterator是HashMap迭代器的抽象出来的父类，实现了公共了函数。</span></span><br><span class="line"><span class="comment">// 它包含“key迭代器(KeyIterator)”、“Value迭代器(ValueIterator)”和“Entry迭代器(EntryIterator)”3个子类。</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">HashIterator</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 下一个元素</span></span><br><span class="line">    Entry&lt;K,V&gt; next;</span><br><span class="line">    <span class="comment">// expectedModCount用于实现fast-fail机制。</span></span><br><span class="line">    <span class="keyword">int</span> expectedModCount;</span><br><span class="line">    <span class="comment">// 当前索引</span></span><br><span class="line">    <span class="keyword">int</span> index;</span><br><span class="line">    <span class="comment">// 当前元素</span></span><br><span class="line">    Entry&lt;K,V&gt; current;</span><br><span class="line"></span><br><span class="line">    HashIterator() &#123;</span><br><span class="line">        expectedModCount = modCount;</span><br><span class="line">        <span class="keyword">if</span> (size &gt; <span class="number">0</span>) &#123; <span class="comment">// advance to first entry</span></span><br><span class="line">            Entry[] t = table;</span><br><span class="line">            <span class="comment">// 将next指向table中第一个不为null的元素。</span></span><br><span class="line">            <span class="comment">// 这里利用了index的初始值为0，从0开始依次向后遍历，直到找到不为null的元素就退出循环。</span></span><br><span class="line">            <span class="keyword">while</span> (index &lt; t.length &amp;&amp; (next = t[index++]) == <span class="keyword">null</span>)</span><br><span class="line">                ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> next != <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取下一个元素</span></span><br><span class="line">    <span class="keyword">final</span> Entry&lt;K,V&gt; nextEntry() &#123;</span><br><span class="line">        <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        Entry&lt;K,V&gt; e = next;</span><br><span class="line">        <span class="keyword">if</span> (e == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 注意！！！</span></span><br><span class="line">        <span class="comment">// 一个Entry就是一个单向链表</span></span><br><span class="line">        <span class="comment">// 若该Entry的下一个节点不为空，就将next指向下一个节点;</span></span><br><span class="line">        <span class="comment">// 否则，将next指向下一个链表(也是下一个Entry)的不为null的节点。</span></span><br><span class="line">        <span class="keyword">if</span> ((next = e.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">            Entry[] t = table;</span><br><span class="line">            <span class="keyword">while</span> (index &lt; t.length &amp;&amp; (next = t[index++]) == <span class="keyword">null</span>)</span><br><span class="line">                ;</span><br><span class="line">        &#125;</span><br><span class="line">        current = e;</span><br><span class="line">        <span class="keyword">return</span> e;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除当前元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (current == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">        <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        Object k = current.key;</span><br><span class="line">        current = <span class="keyword">null</span>;</span><br><span class="line">        HashMap.<span class="keyword">this</span>.removeEntryForKey(k);</span><br><span class="line">        expectedModCount = modCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>当我们通过entrySet()获取到的Iterator的next()方法去遍历HashMap时，实际上调用的是 nextEntry() 。而nextEntry()的实现方式，先遍历Entry(根据Entry在table中的序号，从小到大的遍历)；然后对每个Entry(即每个单向链表)，逐个遍历。</p>
<h3 id="hash和indexFor"><a href="#hash和indexFor" class="headerlink" title="hash和indexFor"></a>hash和indexFor</h3><p>indexFor中的h &amp; (length-1)就相当于h%length，用于计算index也就是在table数组中的下标<br>hash方法是对hashcode进行二次散列，以获得更好的散列值<br>为了更好理解这里我们可以把这两个方法简化为 int index= key.hashCode()/table.length,以put中的方法为例可以这样替换<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> hash = hash(key.hashCode());<span class="comment">//计算hash</span></span><br><span class="line"><span class="keyword">int</span> i = indexFor(hash, table.length);<span class="comment">//计算在数组中的存储位置</span></span><br><span class="line"><span class="comment">//上面这两行可以这样简化</span></span><br><span class="line"><span class="keyword">int</span> i = key.key.hashCode()%table.length;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(<span class="keyword">int</span> h)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// This function ensures that hashCodes that differ only by</span></span><br><span class="line">    <span class="comment">// constant multiples at each bit position have a bounded</span></span><br><span class="line">    <span class="comment">// number of collisions (approximately 8 at default load factor).</span></span><br><span class="line">    h ^= (h &gt;&gt;&gt; <span class="number">20</span>) ^ (h &gt;&gt;&gt; <span class="number">12</span>);</span><br><span class="line">    <span class="keyword">return</span> h ^ (h &gt;&gt;&gt; <span class="number">7</span>) ^ (h &gt;&gt;&gt; <span class="number">4</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">indexFor</span><span class="params">(<span class="keyword">int</span> h, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> h &amp; (length-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="HashMap和Hashtable的区别"><a href="#HashMap和Hashtable的区别" class="headerlink" title="HashMap和Hashtable的区别"></a>HashMap和Hashtable的区别</h2><ol>
<li><strong>两者最主要的区别在于Hashtable是线程安全，而HashMap则非线程安全</strong><br>Hashtable的实现方法里面都添加了synchronized关键字来确保线程同步，因此相对而言HashMap性能会高一些，我们平时使用时若无特殊需求建议使用HashMap，在多线程环境下若使用HashMap需要使用Collections.synchronizedMap()方法来获取一个线程安全的集合（Collections.synchronizedMap()实现原理是Collections定义了一个SynchronizedMap的内部类，这个类实现了Map接口，在调用方法时使用synchronized来保证线程同步,当然了实际上操作的还是我们传入的HashMap实例，简单的说就是Collections.synchronizedMap()方法帮我们在操作HashMap时自动添加了synchronized来实现线程同步，类似的其它Collections.synchronizedXX方法也是类似原理）</li>
<li>HashMap可以使用null作为key，而Hashtable则不允许null作为key<br>虽说HashMap支持null值作为key，不过建议还是尽量避免这样使用，因为一旦不小心使用了，若因此引发一些问题，排查起来很是费事<br>HashMap以null作为key时，总是存储在table数组的第一个节点上</li>
<li>HashMap是对Map接口的实现，HashTable实现了Map接口和Dictionary抽象类</li>
<li>HashMap的初始容量为16，Hashtable初始容量为11，两者的填充因子默认都是0.75<br>HashMap扩容时是当前容量翻倍即:capacity<em>2，Hashtable扩容时是容量翻倍+1即:capacity</em>2+1</li>
<li>HashMap和Hashtable的底层实现都是数组+链表结构实现</li>
<li>两者计算hash的方法不同<br>Hashtable计算hash是直接使用key的hashcode对table数组的长度直接进行取模<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> hash = key.hashCode();</span><br><span class="line"><span class="keyword">int</span> index = (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>HashMap计算hash对key的hashcode进行了二次hash，以获得更好的散列值，然后对table数组长度取摸<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(<span class="keyword">int</span> h)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// This function ensures that hashCodes that differ only by</span></span><br><span class="line">        <span class="comment">// constant multiples at each bit position have a bounded</span></span><br><span class="line">        <span class="comment">// number of collisions (approximately 8 at default load factor).</span></span><br><span class="line">        h ^= (h &gt;&gt;&gt; <span class="number">20</span>) ^ (h &gt;&gt;&gt; <span class="number">12</span>);</span><br><span class="line">        <span class="keyword">return</span> h ^ (h &gt;&gt;&gt; <span class="number">7</span>) ^ (h &gt;&gt;&gt; <span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">indexFor</span><span class="params">(<span class="keyword">int</span> h, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> h &amp; (length-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>该文为本人学习的笔记，方便以后自己跳槽前复习。参考网上各大帖子，取其精华整合自己的理解而成。集合框架源码面试经常会问，所以解读源码十分必要,希望对你有用。<br><a href="http://www.cnblogs.com/chenssy/p/3521565.html" target="_blank" rel="external">java提高篇（二三）—–HashMap</a><br><a href="http://www.cnblogs.com/skywang12345/p/3310835.html" target="_blank" rel="external">Java 集合系列10之 HashMap详细介绍(源码解析)和使用示例</a><br><a href="http://zhangshixi.iteye.com/blog/672697" target="_blank" rel="external">深入Java集合学习系列：HashMap的实现原理</a><br><a href="http://www.cnblogs.com/tstd/p/5055286.html" target="_blank" rel="external">给jdk写注释系列之jdk1.6容器(4)-HashMap源码解析</a><br><a href="http://zhangshixi.iteye.com/blog/672697" target="_blank" rel="external">深入Java集合学习系列：HashMap的实现原理</a></p>
<h1 id="整理的集合框架思维导图"><a href="#整理的集合框架思维导图" class="headerlink" title="整理的集合框架思维导图"></a>整理的集合框架思维导图</h1><p>个人整理的Java集合框架思维导图，动态维护。导出的图片无法查看备注的一些信息，所以需要源文件的童鞋可以关注我个人主页上的公众号，回复<strong>Java集合框架</strong>即可获取源文件。<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/jhswdt.png" alt=""></p>
<hr>
<p>博主弄了个java学习资源的公众号，学习资源超级多，视频，电子书，最新开发工具一个都不能少，已全部分享到百度云盘，求资源共享，打造一个学习方便，工作方便的java公众号，开源开源，有需求的可以关注~撒花<br>  <img src="http://7xqch5.com1.z0.glb.clouddn.com/javaLearn.PNG" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Java集合干货系列 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Java集合干货系列-（二）LinkedList源码解析]]></title>
      <url>http://tengj.top/2016/04/13/javajh2linklist/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>今天来介绍下ArrayList，在集合框架整体框架一章中，我们介绍了List接口，LinkedList与ArrayList一样实现List接口，只是ArrayList是List接口的大小可变数组的实现，LinkedList是List接口链表的实现。基于链表实现的方式使得LinkedList在插入和删除时更优于ArrayList，而随机访问则比ArrayList逊色些。<br>构造图如下:<br>蓝色线条：继承<br>绿色线条：接口实现<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/jh2_1.png" alt=""></p>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>LinkedList是基于链表结构的一种List，在分析LinkedList源码前有必要对链表结构进行说明。<br><strong>1.链表的概念</strong><br>链表是由一系列非连续的节点组成的存储结构，简单分下类的话，链表又分为单向链表和双向链表，而单向/双向链表又可以分为循环链表和非循环链表，下面简单就这四种链表进行图解说明。</p>
<p><strong>1.1.单向链表</strong><br>单向链表就是通过每个结点的指针指向下一个结点从而链接起来的结构，最后一个节点的next指向null。  </p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/jh2_2.jpg" alt="">  </p>
<p><strong>1.2.单向循环链表</strong><br>单向循环链表和单向列表的不同是，最后一个节点的next不是指向null，而是指向head节点，形成一个“环”。  </p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/jh2_3.jpg" alt="">  </p>
<p><strong>1.3.双向链表</strong><br>从名字就可以看出，双向链表是包含两个指针的，pre指向前一个节点，next指向后一个节点，但是第一个节点head的pre指向null，最后一个节点的tail指向null。<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/jh2_4.jpg" alt="">  </p>
<p><strong>1.4.双向循环链表</strong><br>  双向循环链表和双向链表的不同在于，第一个节点的pre指向最后一个节点，最后一个节点的next指向第一个节点，也形成一个“环”。<strong>而LinkedList就是基于双向循环链表设计的。</strong>  </p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/jh2_5.jpg" alt="">  </p>
<p>更形象的解释下就是：双向循环链表就像一群小孩手牵手围成一个圈，第一个小孩的右手拉着第二个小孩的左手，第二个小孩的左手拉着第一个小孩的右手。。。最后一个小孩的右手拉着第一个小孩的左手。  </p>
<p>ok，链表的概念介绍完了，下面进入写注释和源码分析部分，但是在这之前还是要提醒一句，不是啰嗦哦，链表操作理解起来比数组困难了不少，所以务必要理解上面的图解，如果源码解析过程中遇到理解困难，请返回来照图理解。</p>
<h2 id="LinkedList简介"><a href="#LinkedList简介" class="headerlink" title="LinkedList简介"></a>LinkedList简介</h2><h3 id="LinkedList定义"><a href="#LinkedList定义" class="headerlink" title="LinkedList定义"></a>LinkedList定义</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span>&lt;<span class="title">E</span>&gt;</span><br><span class="line">    <span class="keyword">extends</span> <span class="title">AbstractSequentialList</span>&lt;<span class="title">E</span>&gt;</span><br><span class="line">    <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">Deque</span>&lt;<span class="title">E</span>&gt;, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br></pre></td></tr></table></figure>
<p>LinkedList 是一个继承于AbstractSequentialList的<strong>双向循环链表</strong>。它也可以被当作堆栈、队列或双端队列进行操作。<br>LinkedList 实现 List 接口，能对它进行队列操作。<br>LinkedList 实现 Deque 接口，即能将LinkedList当作双端队列使用。<br>LinkedList 实现了Cloneable接口，即覆盖了函数clone()，能克隆。<br>LinkedList 实现java.io.Serializable接口，这意味着LinkedList支持序列化，能通过序列化去传输。<br>LinkedList 是非同步的。</p>
<h3 id="LinkedList属性"><a href="#LinkedList属性" class="headerlink" title="LinkedList属性"></a>LinkedList属性</h3><p>明白了上面的链表概念，以及LinkedList是基于双向循环链表设计的，下面在具体来看看LinkedList的底层的属性<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> Entry&lt;E&gt; header = <span class="keyword">new</span> Entry&lt;E&gt;(<span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line"><span class="number">2</span> <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">int</span> size = <span class="number">0</span>;</span><br></pre></td></tr></table></figure></p>
<p>LinkedList中提供了上面两个属性，其中size和ArrayList中一样用来计数，表示list的元素数量，而header则是链表的头结点，Entry则是链表的节点对象。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">	E element;  <span class="comment">// 当前存储元素</span></span><br><span class="line">    Entry&lt;E&gt; next;  <span class="comment">// 下一个元素节点</span></span><br><span class="line">    Entry&lt;E&gt; previous;  <span class="comment">// 上一个元素节点</span></span><br><span class="line">    Entry(E element, Entry&lt;E&gt; next, Entry&lt;E&gt; previous) &#123;</span><br><span class="line">        <span class="keyword">this</span>.element = element;</span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line">        <span class="keyword">this</span>.previous = previous;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Entry为LinkedList 的内部类，其中定义了当前存储的元素，以及该元素的上一个元素和下一个元素。结合上面双向链表的示意图很容易看懂。</p>
<h3 id="LinkedList构造函数"><a href="#LinkedList构造函数" class="headerlink" title="LinkedList构造函数"></a>LinkedList构造函数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line">* 构造一个空的LinkedList .</span><br><span class="line">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LinkedList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//将header节点的前一节点和后一节点都设置为自身</span></span><br><span class="line">	header.next = header. previous = header ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line">* 构造一个包含指定 collection 中的元素的列表，这些元素按其 collection 的迭代器返回的顺序排列</span><br><span class="line">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LinkedList</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>();</span><br><span class="line">	addAll(c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>需要注意的是空的LinkedList构造方法，它将header节点的前一节点和后一节点都设置为自身，这里便说明LinkedList 是一个双向循环链表，如果只是单存的双向链表而不是循环链表，他的实现应该是这样的：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LinkedList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	header.next = <span class="keyword">null</span>;</span><br><span class="line">	header. previous = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p> 非循环链表的情况应该是header节点的前一节点和后一节点均为null（参见链表图解）。</p>
<h3 id="API方法摘要"><a href="#API方法摘要" class="headerlink" title="API方法摘要"></a>API方法摘要</h3><p><img src="http://7xqch5.com1.z0.glb.clouddn.com/jh2_6.png" alt=""><br><img src="http://7xqch5.com1.z0.glb.clouddn.com/jh2_7.png" alt=""></p>
<h2 id="LinkedList源码解析-基于JDK1-6-0-45"><a href="#LinkedList源码解析-基于JDK1-6-0-45" class="headerlink" title="LinkedList源码解析(基于JDK1.6.0_45)"></a>LinkedList源码解析(基于JDK1.6.0_45)</h2><h3 id="增加"><a href="#增加" class="headerlink" title="增加"></a>增加</h3><p>增加方法的代码读起来比较不容易理解，需要的时候请结合链表图解。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 将一个元素添加至list尾部</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">   <span class="comment">// 在header前添加元素e，header前就是最后一个结点啦，就是在最后一个结点的后面添加元素e</span></span><br><span class="line">   addBefore(e, header);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 在指定位置添加元素</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 如果index等于list元素个数，则在队尾添加元素(header之前)，否则在index节点前添加元素</span></span><br><span class="line">    addBefore(element, (index== size ? header : entry(index)));</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">private</span> Entry&lt;E&gt; <span class="title">addBefore</span><span class="params">(E e, Entry&lt;E&gt; entry)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 用entry创建一个要添加的新节点，next为entry，previous为entry.previous，意思就是新节点插入entry前面，确定自身的前后引用，</span></span><br><span class="line">    Entry&lt;E&gt; newEntry = <span class="keyword">new</span> Entry&lt;E&gt;(e, entry, entry.previous);</span><br><span class="line">     <span class="comment">// 下面修改newEntry的前后节点的引用，确保其链表的引用关系是正确的</span></span><br><span class="line">    <span class="comment">// 将上一个节点的next指向自己</span></span><br><span class="line">    newEntry. previous.next = newEntry;</span><br><span class="line">    <span class="comment">// 将下一个节点的previous指向自己</span></span><br><span class="line">    newEntry. next.previous = newEntry;</span><br><span class="line">    <span class="comment">// 计数+1</span></span><br><span class="line">     size++;</span><br><span class="line">     modCount++;</span><br><span class="line">     <span class="keyword">return</span> newEntry;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>到这里可以发现一点疑虑，<strong>header作为双向循环链表的头结点是不保存数据的，也就是说hedaer中的element永远等于null</strong>。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 添加一个集合元素到list中</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 将集合元素添加到list最后的尾部</span></span><br><span class="line">    <span class="keyword">return</span> addAll(size , c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 在指定位置添加一个集合元素到list中</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(<span class="keyword">int</span> index, Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 越界检查</span></span><br><span class="line">    <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; size)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException( <span class="string">"Index: "</span>+index+</span><br><span class="line">                                            <span class="string">", Size: "</span>+size );</span><br><span class="line">    Object[] a = c.toArray();</span><br><span class="line">    <span class="comment">// 要插入元素的个数</span></span><br><span class="line">    <span class="keyword">int</span> numNew = a.length ;</span><br><span class="line">    <span class="keyword">if</span> (numNew==<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    modCount++;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 找出要插入元素的前后节点</span></span><br><span class="line">    <span class="comment">// 获取要插入index位置的下一个节点，如果index正好是lsit尾部的位置那么下一个节点就是header，否则需要查找index位置的节点</span></span><br><span class="line">    Entry&lt;E&gt; successor = (index== size ? header : entry(index));</span><br><span class="line">    <span class="comment">// 获取要插入index位置的上一个节点，因为是插入，所以上一个点击就是未插入前下一个节点的上一个</span></span><br><span class="line">    Entry&lt;E&gt; predecessor = successor. previous;</span><br><span class="line">    <span class="comment">// 循环插入</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;numNew; i++) &#123;</span><br><span class="line">        <span class="comment">// 构造一个节点，确认自身的前后引用</span></span><br><span class="line">        Entry&lt;E&gt; e = <span class="keyword">new</span> Entry&lt;E&gt;((E)a[i], successor, predecessor);</span><br><span class="line">        <span class="comment">// 将插入位置上一个节点的下一个元素引用指向当前元素（这里不修改下一个节点的上一个元素引用，是因为下一个节点随着循环一直在变）</span></span><br><span class="line">        predecessor. next = e;</span><br><span class="line">        <span class="comment">// 最后修改插入位置的上一个节点为自身，这里主要是为了下次遍历后续元素插入在当前节点的后面，确保这些元素本身的顺序</span></span><br><span class="line">        predecessor = e;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 遍历完所有元素，最后修改下一个节点的上一个元素引用为遍历的最后一个元素</span></span><br><span class="line">    successor. previous = predecessor;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改计数器</span></span><br><span class="line">    size += numNew;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/jh2_8.jpg" alt=""><br>增加方法的代码理解起来可能有些困难，但是只要理解了双向链表的存储结构，掌握增加的核心逻辑就可以了，这里总结一下往链表中增加元素的核心逻辑：1.将元素转换为链表节点，2.增加该节点的前后引用（即pre和next分别指向哪一个节点），3.前后节点对该节点的引用（前节点的next指向该节点，后节点的pre指向该节点）。现在再看下就这么简单么，就是<strong>改变前后的互相指向关系</strong>（看图增加元素前后的变化）。</p>
<p>其实删除也是一样的对不对？下面看看删除方法的实现。</p>
<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 删除第一个匹配的指定元素</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">     <span class="comment">// 遍历链表找到要被删除的节点</span></span><br><span class="line">    <span class="keyword">if</span> (o==<span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;E&gt; e = header .next; e != header; e = e.next ) &#123;</span><br><span class="line">            <span class="keyword">if</span> (e.element ==<span class="keyword">null</span>) &#123;</span><br><span class="line">                remove(e);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;E&gt; e = header .next; e != header; e = e.next ) &#123;</span><br><span class="line">            <span class="keyword">if</span> (o.equals(e.element )) &#123;</span><br><span class="line">                remove(e);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> E <span class="title">remove</span><span class="params">(Entry&lt;E&gt; e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (e == header )</span><br><span class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 被删除的元素，供返回</span></span><br><span class="line">    E result = e. element;</span><br><span class="line">   <span class="comment">// 下面修正前后对该节点的引用</span></span><br><span class="line">   <span class="comment">// 将该节点的上一个节点的next指向该节点的下一个节点</span></span><br><span class="line">   e. previous.next = e.next;</span><br><span class="line">   <span class="comment">// 将该节点的下一个节点的previous指向该节点的上一个节点</span></span><br><span class="line">   e. next.previous = e.previous;</span><br><span class="line">   <span class="comment">// 修正该节点自身的前后引用</span></span><br><span class="line">    e. next = e.previous = <span class="keyword">null</span>;</span><br><span class="line">   <span class="comment">// 将自身置空，让gc可以尽快回收</span></span><br><span class="line">    e. element = <span class="keyword">null</span>;</span><br><span class="line">   <span class="comment">// 计数器减一</span></span><br><span class="line">    size--;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面对于链表增加元素总结了，一句话就是“改变前后的互相指向关系”，删除也是同样的道理，由于节点被删除，该节点的上一个节点和下一个节点互相拉一下小手就可以了，注意的是“互相”，不能一厢情愿。</p>
<h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 修改指定位置索引位置的元素</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">( <span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 查找index位置的节点</span></span><br><span class="line">    Entry&lt;E&gt; e = entry(index);</span><br><span class="line">    <span class="comment">// 取出该节点的元素，供返回使用</span></span><br><span class="line">    E oldVal = e. element;</span><br><span class="line">    <span class="comment">// 用新元素替换旧元素</span></span><br><span class="line">    e. element = element;</span><br><span class="line">    <span class="comment">// 返回旧元素</span></span><br><span class="line">    <span class="keyword">return</span> oldVal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>set方法看起来简单了很多，只要修改该节点上的元素就好了，但是不要忽略了这里的entry()方法，重点就是它。</p>
<h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><p>终于到查询了，终于发现了上面经常出现的那个方法entry()根据index查询节点，我们知道数组是有下标的，通过下标操作天然的支持根据index查询元素，而链表中是没有index概念呢，那么怎么样才能通过index查询到对应的元素呢，下面就来看看LinkedList是怎么实现的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 查找指定索引位置的元素</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">( <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> entry(index).element ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 返回指定索引位置的节点</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Entry&lt;E&gt; <span class="title">entry</span><span class="params">( <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 越界检查</span></span><br><span class="line">    <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= size)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException( <span class="string">"Index: "</span>+index+</span><br><span class="line">                                            <span class="string">", Size: "</span>+size );</span><br><span class="line">    <span class="comment">// 取出头结点</span></span><br><span class="line">    Entry&lt;E&gt; e = header;</span><br><span class="line">    <span class="comment">// size&gt;&gt;1右移一位代表除以2，这里使用简单的二分方法，判断index与list的中间位置的距离</span></span><br><span class="line">    <span class="keyword">if</span> (index &lt; (size &gt;&gt; <span class="number">1</span>)) &#123;</span><br><span class="line">        <span class="comment">// 如果index距离list中间位置较近，则从头部向后遍历(next)</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= index; i++)</span><br><span class="line">            e = e. next;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 如果index距离list中间位置较远，则从头部向前遍历(previous)</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = size; i &gt; index; i--)</span><br><span class="line">            e = e. previous;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>现在知道了，LinkedList是通过从header开始index计为0，然后一直往下遍历（next），直到到底index位置。为了优化查询效率，LinkedList采用了二分查找（这里说的二分只是简单的一次二分），判断index与size中间位置的距离，采取从header向后还是向前查找。<br><strong>到这里我们明白，基于双向循环链表实现的LinkedList，通过索引Index的操作时低效的，index所对应的元素越靠近中间所费时间越长。而向链表两端插入和删除元素则是非常高效的（如果不是两端的话，都需要对链表进行遍历查找）。</strong></p>
<h3 id="是否包含"><a href="#是否包含" class="headerlink" title="是否包含"></a>是否包含</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断LinkedList是否包含元素(o)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> indexOf(o) != -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从前向后查找，返回“值为对象(o)的节点对应的索引”</span></span><br><span class="line"><span class="comment">// 不存在就返回-1</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (o==<span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Entry e = header .next; e != header; e = e.next ) &#123;</span><br><span class="line">            <span class="keyword">if</span> (e.element ==<span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">return</span> index;</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Entry e = header .next; e != header; e = e.next ) &#123;</span><br><span class="line">            <span class="keyword">if</span> (o.equals(e.element ))</span><br><span class="line">                <span class="keyword">return</span> index;</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从后向前查找，返回“值为对象(o)的节点对应的索引”</span></span><br><span class="line"><span class="comment">// 不存在就返回-1</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lastIndexOf</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> index = size ;</span><br><span class="line">    <span class="keyword">if</span> (o==<span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Entry e = header .previous; e != header; e = e.previous ) &#123;</span><br><span class="line">            index--;</span><br><span class="line">            <span class="keyword">if</span> (e.element ==<span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">return</span> index;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Entry e = header .previous; e != header; e = e.previous ) &#123;</span><br><span class="line">            index--;</span><br><span class="line">            <span class="keyword">if</span> (o.equals(e.element ))</span><br><span class="line">                <span class="keyword">return</span> index;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>和<strong>public</strong> <strong>boolean</strong> remove(Object o) 一样，indexOf查询元素位于容器的索引位置，都是需要对链表进行遍历操作，当然也就是低效了啦。</p>
<h3 id="判断容量"><a href="#判断容量" class="headerlink" title="判断容量"></a>判断容量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Returns the number of elements in this list.</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@return</span> the number of elements in this list</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> size ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * &#123;<span class="doctag">@inheritDoc</span>&#125;</span><br><span class="line"> *</span><br><span class="line"> * &lt;p&gt;This implementation returns &lt;tt&gt;size() == 0 &lt;/tt&gt;.</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> size() == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>和ArrayList一样，基于计数器size操作，容量判断很方便。<br>到这里LinkedList就分析完了，不对好像还差些什么对不对？是什么呢，就是最开始说的Deque双端队列，明白了链表原理和LinkedList的基本crud操作，Deque的LinkedList实现就已经是so easy了，我们简单看下。</p>
<h3 id="LinkedList实现的Deque双端队列"><a href="#LinkedList实现的Deque双端队列" class="headerlink" title="LinkedList实现的Deque双端队列"></a>LinkedList实现的Deque双端队列</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Adds the specified element as the tail (last element) of this list.</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@param</span> e the element to add</span><br><span class="line"> * <span class="doctag">@return</span> &lt;tt&gt; true&lt;/tt&gt; (as specified by &#123;<span class="doctag">@link</span> Queue#offer&#125;)</span><br><span class="line"> * <span class="doctag">@since</span> 1.5</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">offer</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> add(e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Retrieves and removes the head (first element) of this list</span><br><span class="line"> * <span class="doctag">@return</span> the head of this list, or &lt;tt&gt;null &lt;/tt&gt; if this list is empty</span><br><span class="line"> * <span class="doctag">@since</span> 1.5</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">poll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (size ==<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">return</span> removeFirst();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Removes and returns the first element from this list.</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@return</span> the first element from this list</span><br><span class="line"> * <span class="doctag">@throws</span> NoSuchElementException if this list is empty</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">removeFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> remove(header .next);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Retrieves, but does not remove, the head (first element) of this list.</span><br><span class="line"> * <span class="doctag">@return</span> the head of this list, or &lt;tt&gt;null &lt;/tt&gt; if this list is empty</span><br><span class="line"> * <span class="doctag">@since</span> 1.5</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (size ==<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">return</span> getFirst();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Returns the first element in this list.</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@return</span> the first element in this list</span><br><span class="line"> * <span class="doctag">@throws</span> NoSuchElementException if this list is empty</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">getFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (size ==<span class="number">0</span>)</span><br><span class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> header .next. element;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Pushes an element onto the stack represented by this list.  In other</span><br><span class="line"> * words, inserts the element at the front of this list.</span><br><span class="line"> *</span><br><span class="line"> * &lt;p&gt;This method is equivalent to &#123;<span class="doctag">@link</span> #addFirst&#125;.</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@param</span> e the element to push</span><br><span class="line"> * <span class="doctag">@since</span> 1.6</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    addFirst(e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Inserts the specified element at the beginning of this list.</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@param</span> e the element to add</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">   addBefore(e, header.next );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 看看Deque 的实现是不是很简单，逻辑都是基于上面讲的链表操作的，对于队列的一些概念我不打算在这里讲，是因为后面队列会单独拿出来分析啦，这里只要理解基于链表实现的list内部是怎么操作的就可以啦。</p>
<hr>
<p> <strong>总结</strong>：<br>(01) LinkedList 实际上是通过双向链表去实现的。<br>它包含一个非常重要的内部类：<strong>Entry</strong>。Entry是<strong>双向链表节点所对应的数据结构</strong>，它包括的属性有：<strong>当前节点所包含的值</strong>，<strong>上一个节点</strong>，<strong>下一个节点</strong>。<br>(02) 从LinkedList的实现方式中可以发现，它不存在LinkedList容量不足的问题。<br>(03) LinkedList的克隆函数，即是将全部元素克隆到一个新的LinkedList对象中。<br>(04) LinkedList实现java.io.Serializable。当写入到输出流时，先写入“容量”，再依次写入“每一个节点保护的值”；当读出输入流时，先读取“容量”，再依次读取“每一个元素”。<br>(05) 由于LinkedList实现了Deque，而Deque接口定义了在双端队列两端访问元素的方法。提供插入、移除和检查元素的方法。每种方法都存在两种形式：一种形式在操作失败时抛出异常，另一种形式返回一个特殊值（null 或 false，具体取决于操作）。</p>
<h3 id="对LinkedList以及ArrayList的迭代效率比较"><a href="#对LinkedList以及ArrayList的迭代效率比较" class="headerlink" title="对LinkedList以及ArrayList的迭代效率比较"></a>对LinkedList以及ArrayList的迭代效率比较</h3><p><strong>先说结论：ArrayList使用最普通的for循环遍历比较快，LinkedList使用foreach循环比较快。</strong>  </p>
<p>看一下两个List的定义：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt;</span><br><span class="line">        <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span>&lt;<span class="title">E</span>&gt;</span><br><span class="line">    <span class="keyword">extends</span> <span class="title">AbstractSequentialList</span>&lt;<span class="title">E</span>&gt;</span><br><span class="line">    <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">Deque</span>&lt;<span class="title">E</span>&gt;, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br></pre></td></tr></table></figure>
<p>注意到ArrayList是实现了RandomAccess接口而LinkedList则没有实现这个接口，关于RandomAccess这个接口的作用，看一下JDK API上的说法：<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/jh2_9.png" alt=""><br>为此，我写一段代码证明一下这一点，注意，虽然上面的例子用的Iterator，但是做foreach循环的时候，编译器默认会使用这个集合的Iterator。测试代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMain</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> SIZE = <span class="number">111111</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loopList</span><span class="params">(List&lt;Integer&gt; list)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            list.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(list.getClass().getSimpleName() + <span class="string">"使用普通for循环遍历时间为"</span> + </span><br><span class="line">                (System.currentTimeMillis() - startTime) + <span class="string">"ms"</span>);</span><br><span class="line">        </span><br><span class="line">        startTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (Integer i : list)</span><br><span class="line">        &#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(list.getClass().getSimpleName() + <span class="string">"使用foreach循环遍历时间为"</span> + </span><br><span class="line">                (System.currentTimeMillis() - startTime) + <span class="string">"ms"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; arrayList = <span class="keyword">new</span> ArrayList&lt;Integer&gt;(SIZE);</span><br><span class="line">        List&lt;Integer&gt; linkedList = <span class="keyword">new</span> LinkedList&lt;Integer&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; SIZE; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            arrayList.add(i);</span><br><span class="line">            linkedList.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        loopList(arrayList);</span><br><span class="line">        loopList(linkedList);</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>我截取三次运行结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ArrayList使用普通<span class="keyword">for</span>循环遍历时间为<span class="number">10</span>ms</span><br><span class="line">ArrayList使用foreach循环遍历时间为<span class="number">36</span>ms</span><br><span class="line">LinkedList使用普通<span class="keyword">for</span>循环遍历时间为<span class="number">21841</span>ms</span><br><span class="line">LinkedList使用foreach循环遍历时间为<span class="number">34</span>ms</span><br></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ArrayList使用普通<span class="keyword">for</span>循环遍历时间为<span class="number">11</span>ms</span><br><span class="line">ArrayList使用foreach循环遍历时间为<span class="number">27</span>ms</span><br><span class="line">LinkedList使用普通<span class="keyword">for</span>循环遍历时间为<span class="number">20500</span>ms</span><br><span class="line">LinkedList使用foreach循环遍历时间为<span class="number">27</span>ms</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ArrayList使用普通<span class="keyword">for</span>循环遍历时间为<span class="number">10</span>ms</span><br><span class="line">ArrayList使用foreach循环遍历时间为<span class="number">22</span>ms</span><br><span class="line">LinkedList使用普通<span class="keyword">for</span>循环遍历时间为<span class="number">20237</span>ms</span><br><span class="line">LinkedList使用foreach循环遍历时间为<span class="number">38</span>ms</span><br></pre></td></tr></table></figure>
<p>有了JDK API的解释，这个结果并不让人感到意外，最最想要提出的一点是：如果使用普通for循环遍历LinkedList，其遍历速度将慢得令人发指。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="ArrayList和LinkedList的比较"><a href="#ArrayList和LinkedList的比较" class="headerlink" title="ArrayList和LinkedList的比较"></a>ArrayList和LinkedList的比较</h2><p>1、顺序插入速度ArrayList会比较快，因为ArrayList是基于数组实现的，数组是事先new好的，只要往指定位置塞一个数据就好了；LinkedList则不同，每次顺序插入的时候LinkedList将new一个对象出来，如果对象比较大，那么new的时间势必会长一点，再加上一些引用赋值的操作，所以顺序插入LinkedList必然慢于ArrayList</p>
<p>2、基于上一点，因为LinkedList里面不仅维护了待插入的元素，还维护了Entry的前置Entry和后继Entry，如果一个LinkedList中的Entry非常多，那么LinkedList将比ArrayList更耗费一些内存</p>
<p>3、数据遍历的速度，看最后一部分，这里就不细讲了，结论是：<strong>使用各自遍历效率最高的方式，ArrayList的遍历效率会比LinkedList的遍历效率高一些</strong></p>
<p>4、有些说法认为LinkedList做插入和删除更快，这种说法其实是不准确的：</p>
<p>（1）LinkedList做插入、删除的时候，慢在寻址，快在只需要改变前后Entry的引用地址</p>
<p>（2）ArrayList做插入、删除的时候，慢在数组元素的批量copy，快在寻址</p>
<p><strong>所以，如果待插入、删除的元素是在数据结构的前半段尤其是非常靠前的位置的时候，LinkedList的效率将大大快过ArrayList，因为ArrayList将批量copy大量的元素；越往后，对于LinkedList来说，因为它是双向链表，所以在第2个元素后面插入一个数据和在倒数第2个元素后面插入一个元素在效率上基本没有差别，但是ArrayList由于要批量copy的元素越来越少，操作速度必然追上乃至超过LinkedList</strong>。</p>
<p>从这个分析看出，如果你十分确定你插入、删除的元素是在前半段，那么就使用LinkedList；如果你十分确定你删除、删除的元素在比较靠后的位置，那么可以考虑使用ArrayList。如果你不能确定你要做的插入、删除是在哪儿呢？那还是建议你使用LinkedList吧，因为一来LinkedList整体插入、删除的执行效率比较稳定，没有ArrayList这种越往后越快的情况；二来插入元素的时候，弄得不好ArrayList就要进行一次扩容，记住，<strong>ArrayList底层数组扩容是一个既消耗时间又消耗空间的操作</strong>。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>该文为本人学习的笔记，参考网上各大帖子，取其精华整合自己的理解而成。集合框架源码面试经常会问，所以解读源码十分必要,希望对你有用。<br><a href="http://www.cnblogs.com/chenssy/p/3514524.html" target="_blank" rel="external">java提高篇(二)—LinkedList</a><br><a href="http://www.cnblogs.com/skywang12345/p/3308807.html" target="_blank" rel="external">Java 集合系列05之 LinkedList详细介绍(源码解析)和使用示例</a><br><a href="http://www.cnblogs.com/xrq730/p/5005347.html" target="_blank" rel="external">图解集合2：LinkedList</a><br><a href="http://www.cnblogs.com/tstd/p/5046819.html" target="_blank" rel="external">给jdk写注释系列之jdk1.6容器(2)-LinkedList源码解析</a></p>
<h1 id="整理的集合框架思维导图"><a href="#整理的集合框架思维导图" class="headerlink" title="整理的集合框架思维导图"></a>整理的集合框架思维导图</h1><p>个人整理的Java集合框架思维导图，动态维护。导出的图片无法查看备注的一些信息，所以需要源文件的童鞋可以关注我个人主页上的公众号，回复<strong>Java集合框架</strong>即可获取源文件。<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/jhswdt.png" alt=""></p>
<hr>
<p>如果对你有所帮助(●ˇ∀ˇ●)<code>点个赞</code>或者<code>关注下</code>吧,没准还能打赏下(/▽＼=)。你的鼓励将是博主继续写下去的动力，生活不易，且行且珍惜。</p>
<hr>
<p> 博主弄了个java学习资源的公众号，学习资源超级多，视频，电子书，最新开发工具一个都不能少，已全部分享到百度云盘，求资源共享，打造一个学习方便，工作方便的java公众号，开源开源，有需求的可以关注~撒花<br> <img src="http://7xqch5.com1.z0.glb.clouddn.com/javaLearn.PNG" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Java集合干货系列 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Java集合干货系列-（一）ArrayList源码解析]]></title>
      <url>http://tengj.top/2016/04/13/javajh1arraylist/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>今天来介绍下ArrayList，在集合框架整体框架一章中，我们介绍了List接口，ArrayList继承了AbstractList，实现了List。ArrayList在工作中经常用到，所以要弄懂这个类是极其重要的。<br>构造图如下:<br>蓝色线条：继承<br>绿色线条：接口实现<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/jh1_1.png" alt=""></p>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="ArrayList简介"><a href="#ArrayList简介" class="headerlink" title="ArrayList简介"></a>ArrayList简介</h2><h3 id="ArrayList定义"><a href="#ArrayList定义" class="headerlink" title="ArrayList定义"></a>ArrayList定义</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br></pre></td></tr></table></figure>
<p>ArrayList 是一个<strong>数组队列</strong>，相当于 <strong>动态数组</strong>。与Java中的数组相比，它的容量能动态增长。它继承于AbstractList，实现了List, RandomAccess, Cloneable, java.io.Serializable这些接口。</p>
<p>ArrayList 继承了AbstractList，实现了List。它是一个数组队列，提供了相关的添加、删除、修改、遍历等功能。<br>ArrayList 实现了RandmoAccess接口，即提供了随机访问功能。RandmoAccess是java中用来被List实现，为List提供快速访问功能的。在ArrayList中，我们即可以通过元素的序号快速获取元素对象；这就是快速随机访问。稍后，我们会比较List的“快速随机访问”和“通过Iterator迭代器访问”的效率。</p>
<p>ArrayList 实现了Cloneable接口，即覆盖了函数clone()，能被克隆。</p>
<p>ArrayList 实现java.io.Serializable接口，这意味着ArrayList支持序列化，能通过序列化去传输。</p>
<p>和Vector不同，<strong>ArrayList中的操作不是线程安全的</strong>！所以，建议在单线程中才使用ArrayList，而在多线程中可以选择Vector或者CopyOnWriteArrayList。</p>
<hr>
<h3 id="ArrayList属性"><a href="#ArrayList属性" class="headerlink" title="ArrayList属性"></a>ArrayList属性</h3><p>顾名思义哈，ArrayList就是用数组实现的List容器，既然是用数组实现，当然底层用数组来保存数据啦<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 保存ArrayList中数据的数组</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> Object[] elementData;</span><br><span class="line"><span class="comment">// ArrayList中实际数据的数量</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> size;</span><br></pre></td></tr></table></figure></p>
<p>ArrayList包含了两个重要的对象：elementData 和 size。</p>
<p>(1) elementData 是”Object[]类型的数组”，它保存了添加到ArrayList中的元素。实际上，elementData是个动态数组，我们能通过构造函数 ArrayList(int initialCapacity)来执行它的初始容量为initialCapacity；如果通过不含参数的构造函数ArrayList()来创建ArrayList，则elementData的容量默认是10。elementData数组的大小会根据ArrayList容量的增长而动态的增长，具体的增长方式，请参考源码分析中的ensureCapacity()函数。</p>
<p>(2) size 则是动态数组的实际大小。</p>
<hr>
<h3 id="ArrayList构造函数"><a href="#ArrayList构造函数" class="headerlink" title="ArrayList构造函数"></a>ArrayList构造函数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ArrayList带容量大小的构造函数。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal Capacity: "</span>+initialCapacity);</span><br><span class="line">    <span class="comment">// 新建一个数组</span></span><br><span class="line">    <span class="keyword">this</span>.elementData = <span class="keyword">new</span> Object[initialCapacity];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ArrayList构造函数。默认容量是10。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造一个包含指定元素的list，这些元素的是按照Collection的迭代器返回的顺序排列的</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">    elementData = c.toArray();</span><br><span class="line">    size = elementData.length;</span><br><span class="line">    <span class="keyword">if</span> (elementData.getClass() != Object[].class)</span><br><span class="line">        elementData = Arrays.copyOf(elementData, size, Object[].class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>第一个构造方法使用提供的initialCapacity来初始化elementData数组的大小。</li>
<li>第二个构造方法调用第一个构造方法并传入参数10，即默认elementData数组的大小为10。</li>
<li>第三个构造方法则将提供的集合转成数组返回给elementData（返回若不是Object[]将调用Arrays.copyOf方法将其转为Object[]）。</li>
</ul>
<h3 id="API方法摘要"><a href="#API方法摘要" class="headerlink" title="API方法摘要"></a>API方法摘要</h3><p><img src="http://7xqch5.com1.z0.glb.clouddn.com/jh1_2.png" alt=""></p>
<h2 id="ArrayList源码解析-基于JDK1-6-0-45"><a href="#ArrayList源码解析-基于JDK1-6-0-45" class="headerlink" title="ArrayList源码解析(基于JDK1.6.0_45)"></a>ArrayList源码解析(基于JDK1.6.0_45)</h2><h3 id="增加"><a href="#增加" class="headerlink" title="增加"></a>增加</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line">     * 添加一个元素</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// 进行扩容检查</span></span><br><span class="line">       ensureCapacity( size + <span class="number">1</span>);  <span class="comment">// Increments modCount</span></span><br><span class="line">       <span class="comment">// 将e增加至list的数据尾部，容量+1</span></span><br><span class="line">        elementData[size ++] = e;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 在指定位置添加一个元素</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 判断索引是否越界，这里会抛出多么熟悉的异常。。。</span></span><br><span class="line">        <span class="keyword">if</span> (index &gt; size || index &lt; <span class="number">0</span>)</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(</span><br><span class="line">               <span class="string">"Index: "</span>+index+<span class="string">", Size: "</span> +size);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 进行扩容检查</span></span><br><span class="line">       ensureCapacity( size+<span class="number">1</span>);  <span class="comment">// Increments modCount  </span></span><br><span class="line">       <span class="comment">// 对数组进行复制处理，目的就是空出index的位置插入element，并将index后的元素位移一个位置</span></span><br><span class="line">       System. arraycopy(elementData, index, elementData, index + <span class="number">1</span>,</span><br><span class="line">                      size - index);</span><br><span class="line">       <span class="comment">// 将指定的index位置赋值为element</span></span><br><span class="line">        elementData[index] = element;</span><br><span class="line">       <span class="comment">// list容量+1</span></span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 增加一个集合元素</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//将c转换为数组</span></span><br><span class="line">       Object[] a = c.toArray();</span><br><span class="line">        <span class="keyword">int</span> numNew = a.length ;</span><br><span class="line">       <span class="comment">//扩容检查</span></span><br><span class="line">       ensureCapacity( size + numNew);  <span class="comment">// Increments modCount</span></span><br><span class="line">       <span class="comment">//将c添加至list的数据尾部</span></span><br><span class="line">        System. arraycopy(a, <span class="number">0</span>, elementData, size, numNew);</span><br><span class="line">       <span class="comment">//更新当前容器大小</span></span><br><span class="line">        size += numNew;</span><br><span class="line">        <span class="keyword">return</span> numNew != <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 在指定位置，增加一个集合元素</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(<span class="keyword">int</span> index, Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt; size || index &lt; <span class="number">0</span>)</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(</span><br><span class="line">               <span class="string">"Index: "</span> + index + <span class="string">", Size: "</span> + size);</span><br><span class="line"></span><br><span class="line">       Object[] a = c.toArray();</span><br><span class="line">        <span class="keyword">int</span> numNew = a.length ;</span><br><span class="line">       ensureCapacity( size + numNew);  <span class="comment">// Increments modCount</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">// 计算需要移动的长度（index之后的元素个数）</span></span><br><span class="line">        <span class="keyword">int</span> numMoved = size - index;</span><br><span class="line">       <span class="comment">// 数组复制，空出第index到index+numNum的位置，即将数组index后的元素向右移动numNum个位置</span></span><br><span class="line">        <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">           System. arraycopy(elementData, index, elementData, index + numNew,</span><br><span class="line">                          numMoved);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 将要插入的集合元素复制到数组空出的位置中</span></span><br><span class="line">        System. arraycopy(a, <span class="number">0</span>, elementData, index, numNew);</span><br><span class="line">        size += numNew;</span><br><span class="line">        <span class="keyword">return</span> numNew != <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 数组容量检查，不够时则进行扩容</span><br><span class="line">     */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ensureCapacity</span><span class="params">( <span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">        modCount++;</span><br><span class="line">       <span class="comment">// 当前数组的长度</span></span><br><span class="line">        <span class="keyword">int</span> oldCapacity = elementData .length;</span><br><span class="line">       <span class="comment">// 最小需要的容量大于当前数组的长度则进行扩容</span></span><br><span class="line">        <span class="keyword">if</span> (minCapacity &gt; oldCapacity) &#123;</span><br><span class="line">           Object oldData[] = elementData;</span><br><span class="line">          <span class="comment">// 新扩容的数组长度为旧容量的1.5倍+1</span></span><br><span class="line">           <span class="keyword">int</span> newCapacity = (oldCapacity * <span class="number">3</span>)/<span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">          <span class="comment">// 如果新扩容的数组长度还是比最小需要的容量小，则以最小需要的容量为长度进行扩容</span></span><br><span class="line">           <span class="keyword">if</span> (newCapacity &lt; minCapacity)</span><br><span class="line">              newCapacity = minCapacity;</span><br><span class="line">            <span class="comment">// minCapacity is usually close to size, so this is a win:</span></span><br><span class="line">            <span class="comment">// 进行数据拷贝，Arrays.copyOf底层实现是System.arrayCopy()</span></span><br><span class="line">            elementData = Arrays.copyOf( elementData, newCapacity);</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line">     * 根据索引位置删除元素</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">( <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// 数组越界检查</span></span><br><span class="line">       RangeCheck(index);</span><br><span class="line"></span><br><span class="line">        modCount++;</span><br><span class="line">      <span class="comment">// 取出要删除位置的元素，供返回使用</span></span><br><span class="line">       E oldValue = (E) elementData[index];</span><br><span class="line">       <span class="comment">// 计算数组要复制的数量</span></span><br><span class="line">        <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;</span><br><span class="line">       <span class="comment">// 数组复制，就是将index之后的元素往前移动一个位置</span></span><br><span class="line">        <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">           System. arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</span><br><span class="line">                          numMoved);</span><br><span class="line">       <span class="comment">// 将数组最后一个元素置空（因为删除了一个元素，然后index后面的元素都向前移动了，所以最后一个就没用了），好让gc尽快回收</span></span><br><span class="line">       <span class="comment">// 不要忘了size减一</span></span><br><span class="line">        elementData[--size ] = <span class="keyword">null</span>; <span class="comment">// Let gc do its work</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> oldValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 根据元素内容删除，只删除匹配的第一个</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// 对要删除的元素进行null判断</span></span><br><span class="line">       <span class="comment">// 对数据元素进行遍历查找，知道找到第一个要删除的元素，删除后进行返回，如果要删除的元素正好是最后一个那就惨了，时间复杂度可达O(n) 。。。</span></span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)</span><br><span class="line">              <span class="comment">// null值要用==比较</span></span><br><span class="line">               <span class="keyword">if</span> (elementData [index] == <span class="keyword">null</span>) &#123;</span><br><span class="line">                  fastRemove(index);</span><br><span class="line">                  <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">              &#125;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)</span><br><span class="line">              <span class="comment">// 非null当然是用equals比较了</span></span><br><span class="line">               <span class="keyword">if</span> (o.equals(elementData [index])) &#123;</span><br><span class="line">                  fastRemove(index);</span><br><span class="line">                  <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">              &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span><br><span class="line">     * Private remove method that skips bounds checking and does not</span><br><span class="line">     * return the value removed.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">fastRemove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        modCount++;</span><br><span class="line">       <span class="comment">// 原理和之前的add一样，还是进行数组复制，将index后的元素向前移动一个位置，不细解释了，</span></span><br><span class="line">        <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">            System. arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</span><br><span class="line">                             numMoved);</span><br><span class="line">        elementData[--size ] = <span class="keyword">null</span>; <span class="comment">// Let gc do its work</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 数组越界检查</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">RangeCheck</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= size )</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(</span><br><span class="line">               <span class="string">"Index: "</span>+index+<span class="string">", Size: "</span> +size);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>增加和删除方法到这里就解释完了，代码是很简单，主要需要特别关心的就两个地方：1.数组扩容，2.数组复制，这两个操作都是极费效率的，最惨的情况下(添加到list第一个位置，删除list最后一个元素或删除list第一个索引位置的元素)时间复杂度可达O(n)。</p>
<p>还记得上面那个坑吗（为什么提供一个可以指定容量大小的构造方法 ）？看到这里是不是有点明白了呢，简单解释下：如果数组初试容量过小，假设默认的10个大小，而我们使用ArrayList的主要操作时增加元素，不断的增加，一直增加，不停的增加，会出现上面后果？那就是数组容量不断的受挑衅，数组需要不断的进行扩容，扩容的过程就是数组拷贝System.arraycopy的过程，每一次扩容就会开辟一块新的内存空间和数据的复制移动，这样势必对性能造成影响。那么在这种以写为主（写会扩容，删不会缩容）场景下，提前预知性的设置一个大容量，便可减少扩容的次数，提高了性能。<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/jh1_3.jpg" alt=""><br><img src="http://7xqch5.com1.z0.glb.clouddn.com/jh1_4.jpg" alt=""><br>上面两张图分别是数组扩容和数组复制的过程，需要注意的是，数组扩容伴随着开辟新建的内存空间以创建新数组然后进行数据复制，而数组复制不需要开辟新内存空间，只需将数据进行复制。</p>
<p>上面讲增加元素可能会进行扩容，而删除元素却不会进行缩容，如果在已删除为主的场景下使用list，一直不停的删除而很少进行增加，那么会出现什么情况？再或者数组进行一次大扩容后，我们后续只使用了几个空间，会出现上面情况？当然是空间浪费啦啦啦，怎么办呢？<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line">     * 将底层数组的容量调整为当前实际元素的大小，来释放空间。</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">trimToSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        modCount++;</span><br><span class="line">       <span class="comment">// 当前数组的容量</span></span><br><span class="line">        <span class="keyword">int</span> oldCapacity = elementData .length;</span><br><span class="line">       <span class="comment">// 如果当前实际元素大小 小于 当前数组的容量，则进行缩容</span></span><br><span class="line">        <span class="keyword">if</span> (size &lt; oldCapacity) &#123;</span><br><span class="line">            elementData = Arrays.copyOf( elementData, size );</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line">     * 将指定位置的元素更新为新元素</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">( <span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// 数组越界检查</span></span><br><span class="line">       RangeCheck(index);</span><br><span class="line"> </span><br><span class="line">       <span class="comment">// 取出要更新位置的元素，供返回使用</span></span><br><span class="line">       E oldValue = (E) elementData[index];</span><br><span class="line">       <span class="comment">// 将该位置赋值为行的元素</span></span><br><span class="line">        elementData[index] = element;</span><br><span class="line">       <span class="comment">// 返回旧元素</span></span><br><span class="line">        <span class="keyword">return</span> oldValue;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line">     * 查找指定位置上的元素</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">( <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">       RangeCheck(index);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> (E) elementData [index];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="是否包含"><a href="#是否包含" class="headerlink" title="是否包含"></a>是否包含</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line">     * Returns &lt;tt&gt;true&lt;/tt&gt; if this list contains the specified element.</span><br><span class="line">     * More formally, returns &lt;tt&gt;true&lt;/tt&gt; if and only if this list contains</span><br><span class="line">     * at least one element &lt;tt&gt;e&lt;/tt&gt; such that</span><br><span class="line">     * &lt;tt&gt;(o==null&amp;nbsp;?&amp;nbsp;e==null&amp;nbsp;:&amp;nbsp;o.equals(e))&lt;/tt&gt;.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> o element whose presence in this list is to be tested</span><br><span class="line">     * <span class="doctag">@return</span> &lt;tt&gt; true&lt;/tt&gt; if this list contains the specified element</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> indexOf(o) &gt;= <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Returns the index of the first occurrence of the specified element</span><br><span class="line">     * in this list, or -1 if this list does not contain the element.</span><br><span class="line">     * More formally, returns the lowest index &lt;tt&gt;i&lt;/tt&gt; such that</span><br><span class="line">     * &lt;tt&gt;(o==null&amp;nbsp;?&amp;nbsp;get(i)==null&amp;nbsp;:&amp;nbsp;o.equals(get(i)))&lt;/tt&gt;,</span><br><span class="line">     * or -1 if there is no such index.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">               <span class="keyword">if</span> (elementData [i]==<span class="keyword">null</span>)</span><br><span class="line">                  <span class="keyword">return</span> i;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">               <span class="keyword">if</span> (o.equals(elementData [i]))</span><br><span class="line">                  <span class="keyword">return</span> i;</span><br><span class="line">       &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Returns the index of the last occurrence of the specified element</span><br><span class="line">     * in this list, or -1 if this list does not contain the element.</span><br><span class="line">     * More formally, returns the highest index &lt;tt&gt;i&lt;/tt&gt; such that</span><br><span class="line">     * &lt;tt&gt;(o==null&amp;nbsp;?&amp;nbsp;get(i)==null&amp;nbsp;:&amp;nbsp;o.equals(get(i)))&lt;/tt&gt;,</span><br><span class="line">     * or -1 if there is no such index.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lastIndexOf</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> i = size-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">               <span class="keyword">if</span> (elementData [i]==<span class="keyword">null</span>)</span><br><span class="line">                  <span class="keyword">return</span> i;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> i = size-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">               <span class="keyword">if</span> (o.equals(elementData [i]))</span><br><span class="line">                  <span class="keyword">return</span> i;</span><br><span class="line">       &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>contains主要是检查indexOf，也就是元素在list中出现的索引位置也就是数组下标，再看indexOf和lastIndexOf代码是不是很熟悉，没错，和<strong>public</strong> <strong>boolean</strong> remove(Object o) 的代码一样，都是元素null判断，都是循环比较，不多说了。。。但是要知道，最差的情况（要找的元素是最后一个）也是很惨的。。。</p>
<h3 id="容量判断"><a href="#容量判断" class="headerlink" title="容量判断"></a>容量判断</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line">     * Returns the number of elements in this list.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@return</span> the number of elements in this list</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size ;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Returns &lt;tt&gt;true&lt;/tt&gt; if this list contains no elements.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@return</span> &lt;tt&gt; true&lt;/tt&gt; if this list contains no elements</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>由于使用了size进行计数，发现list大小获取和判断真的好容易。</p>
<p><strong>总结</strong>：<br>(01) ArrayList 实际上是<strong>通过一个数组去保存数据的</strong>。当我们构造ArrayList时；若使用默认构造函数，则ArrayList的<strong>默认容量大小是10</strong>。<br>(02) 当ArrayList容量不足以容纳全部元素时，ArrayList会重新设置容量：<strong>新的容量=“(原始容量x3)/2 + 1”</strong>。<br>(03) ArrayList的克隆函数，即是将全部元素克隆到一个数组中。<br>(04) ArrayList实现java.io.Serializable的方式。当写入到输出流时，先写入“容量”，再依次写入“每一个元素”；当读出输入流时，先读取“容量”，再依次读取“每一个元素”。</p>
<h2 id="ArrayList遍历方式"><a href="#ArrayList遍历方式" class="headerlink" title="ArrayList遍历方式"></a>ArrayList遍历方式</h2><p><strong>ArrayList支持3种遍历方式</strong><br>(01) 第一种，<strong>通过迭代器遍历</strong>。即通过Iterator去遍历。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Integer value = <span class="keyword">null</span>;</span><br><span class="line">Iterator iter = list.iterator();</span><br><span class="line"><span class="keyword">while</span> (iter.hasNext()) &#123;</span><br><span class="line">    value = (Integer)iter.next();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>(02) 第二种，<strong>随机访问，通过索引值去遍历。</strong><br>由于ArrayList实现了RandomAccess接口，它支持通过索引值去随机访问元素。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Integer value = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">int</span> size = list.size();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;size; i++) &#123;</span><br><span class="line">    value = (Integer)list.get(i);        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>(03) 第三种，<strong>for循环遍历</strong>。如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Integer value = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">for</span> (Integer integ:list) &#123;</span><br><span class="line">    value = integ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>下面通过一个实例，<strong>比较这3种方式的效率</strong>，实例代码(ArrayListRandomAccessTest.java)如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span><br><span class="line"> * @desc ArrayList遍历方式和效率的测试程序。</span><br><span class="line"> *</span><br><span class="line"> * @author skywang</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayListRandomAccessTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">100000</span>; i++)</span><br><span class="line">            list.add(i);</span><br><span class="line">        <span class="comment">//isRandomAccessSupported(list);</span></span><br><span class="line">        iteratorThroughRandomAccess(list) ;</span><br><span class="line">        iteratorThroughIterator(list) ;</span><br><span class="line">        iteratorThroughFor2(list) ;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">isRandomAccessSupported</span><span class="params">(List list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (list <span class="keyword">instanceof</span> RandomAccess) &#123;</span><br><span class="line">            System.out.println(<span class="string">"RandomAccess implemented!"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"RandomAccess not implemented!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">iteratorThroughRandomAccess</span><span class="params">(List list)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> startTime;</span><br><span class="line">        <span class="keyword">long</span> endTime;</span><br><span class="line">        startTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;list.size(); i++) &#123;</span><br><span class="line">            list.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        endTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">long</span> interval = endTime - startTime;</span><br><span class="line">        System.out.println(<span class="string">"iteratorThroughRandomAccess："</span> + interval+<span class="string">" ms"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">iteratorThroughIterator</span><span class="params">(List list)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> startTime;</span><br><span class="line">        <span class="keyword">long</span> endTime;</span><br><span class="line">        startTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span>(Iterator iter = list.iterator(); iter.hasNext(); ) &#123;</span><br><span class="line">            iter.next();</span><br><span class="line">        &#125;</span><br><span class="line">        endTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">long</span> interval = endTime - startTime;</span><br><span class="line">        System.out.println(<span class="string">"iteratorThroughIterator："</span> + interval+<span class="string">" ms"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">iteratorThroughFor2</span><span class="params">(List list)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> startTime;</span><br><span class="line">        <span class="keyword">long</span> endTime;</span><br><span class="line">        startTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span>(Object obj:list)</span><br><span class="line">            ;</span><br><span class="line">        endTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">long</span> interval = endTime - startTime;</span><br><span class="line">        System.out.println(<span class="string">"iteratorThroughFor2："</span> + interval+<span class="string">" ms"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>运行结果</strong>：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">iteratorThroughRandomAccess：<span class="number">3</span> ms</span><br><span class="line">iteratorThroughIterator：<span class="number">8</span> ms</span><br><span class="line">iteratorThroughFor2：<span class="number">5</span> ms</span><br></pre></td></tr></table></figure></p>
<p>由此可见，<strong>遍历ArrayList时，使用随机访问(即，通过索引序号访问)效率最高，而使用迭代器的效率最低！</strong></p>
<h2 id="ArrayList示例"><a href="#ArrayList示例" class="headerlink" title="ArrayList示例"></a>ArrayList示例</h2><p>本文通过一个实例(ArrayListTest.java)，介绍 ArrayList 中常用API的用法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span><br><span class="line"> * @desc ArrayList常用API的测试程序</span><br><span class="line"> * @author skywang </span><br><span class="line"> * @email kuiwu-wang@163.com</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayListTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建ArrayList</span></span><br><span class="line">        ArrayList list = <span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将“”</span></span><br><span class="line">        list.add(<span class="string">"1"</span>);</span><br><span class="line">        list.add(<span class="string">"2"</span>);</span><br><span class="line">        list.add(<span class="string">"3"</span>);</span><br><span class="line">        list.add(<span class="string">"4"</span>);</span><br><span class="line">        <span class="comment">// 将下面的元素添加到第1个位置</span></span><br><span class="line">        list.add(<span class="number">0</span>, <span class="string">"5"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取第1个元素</span></span><br><span class="line">        System.out.println(<span class="string">"the first element is: "</span>+ list.get(<span class="number">0</span>));</span><br><span class="line">        <span class="comment">// 删除“3”</span></span><br><span class="line">        list.remove(<span class="string">"3"</span>);</span><br><span class="line">        <span class="comment">// 获取ArrayList的大小</span></span><br><span class="line">        System.out.println(<span class="string">"Arraylist size=: "</span>+ list.size());</span><br><span class="line">        <span class="comment">// 判断list中是否包含"3"</span></span><br><span class="line">        System.out.println(<span class="string">"ArrayList contains 3 is: "</span>+ list.contains(<span class="number">3</span>));</span><br><span class="line">        <span class="comment">// 设置第2个元素为10</span></span><br><span class="line">        list.set(<span class="number">1</span>, <span class="string">"10"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过Iterator遍历ArrayList</span></span><br><span class="line">        <span class="keyword">for</span>(Iterator iter = list.iterator(); iter.hasNext(); ) &#123;</span><br><span class="line">            System.out.println(<span class="string">"next is: "</span>+ iter.next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将ArrayList转换为数组</span></span><br><span class="line">        String[] arr = (String[])list.toArray(<span class="keyword">new</span> String[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">for</span> (String str:arr)</span><br><span class="line">            System.out.println(<span class="string">"str: "</span>+ str);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 清空ArrayList</span></span><br><span class="line">        list.clear();</span><br><span class="line">        <span class="comment">// 判断ArrayList是否为空</span></span><br><span class="line">        System.out.println(<span class="string">"ArrayList is empty: "</span>+ list.isEmpty());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>运行结果</strong>：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">the first element is: <span class="number">5</span></span><br><span class="line">Arraylist size=: <span class="number">4</span></span><br><span class="line">ArrayList contains <span class="number">3</span> is: <span class="keyword">false</span></span><br><span class="line">next is: <span class="number">5</span></span><br><span class="line">next is: <span class="number">10</span></span><br><span class="line">next is: <span class="number">2</span></span><br><span class="line">next is: <span class="number">4</span></span><br><span class="line">str: <span class="number">5</span></span><br><span class="line">str: <span class="number">10</span></span><br><span class="line">str: <span class="number">2</span></span><br><span class="line">str: <span class="number">4</span></span><br><span class="line">ArrayList is empty: <span class="keyword">true</span></span><br></pre></td></tr></table></figure></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="ArrayList和LinkedList的区别"><a href="#ArrayList和LinkedList的区别" class="headerlink" title="ArrayList和LinkedList的区别"></a>ArrayList和LinkedList的区别</h2><ol>
<li>ArrayList是实现了基于动态数组的数据结构，LinkedList基于链表的数据结构。</li>
<li>对于随机访问get和set，ArrayList觉得优于LinkedList，因为LinkedList要移动指针。</li>
<li>对于新增和删除操作add和remove，LinkedList比较占优势，因为ArrayList要移动数据。</li>
</ol>
<h2 id="ArrayList和Vector的区别"><a href="#ArrayList和Vector的区别" class="headerlink" title="ArrayList和Vector的区别"></a>ArrayList和Vector的区别</h2><ol>
<li>Vector和ArrayList几乎是完全相同的,唯一的区别在于Vector是同步类(synchronized)，属于强同步类。因此开销就比ArrayList要大，访问要慢。正常情况下,大多数的Java程序员使用ArrayList而不是Vector,因为同步完全可以由程序员自己来控制。</li>
<li>Vector每次扩容请求其大小的2倍空间，而ArrayList是1.5倍。</li>
<li>Vector还有一个子类Stack.</li>
</ol>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>该文为本人学习的笔记，参考网上各大帖子，取其精华整合自己的理解而成。集合框架源码面试经常会问，所以解读源码十分必要,希望对你有用。<br><a href="http://blog.csdn.net/u013256816/article/details/50916648" target="_blank" rel="external"><a href="http://blog.csdn.net/u013256816/article/details/50916648" target="_blank" rel="external">Java集合框架：ArrayList</a></a><br><a href="http://www.cnblogs.com/skywang12345/p/3308556.html" target="_blank" rel="external"><a href="http://www.cnblogs.com/skywang12345/p/3308556.html" target="_blank" rel="external">Java 集合系列03之 ArrayList详细介绍(源码解析)和使用示例</a></a><br><a href="http://www.cnblogs.com/tstd/p/5042087.html" target="_blank" rel="external">给jdk写注释系列之jdk1.6容器(1)-ArrayList源码解析</a><br><a href="http://www.thinksaas.cn/group/topic/101585/" target="_blank" rel="external">java容器类源码分析——ArrayList</a></p>
<h1 id="整理的集合框架思维导图"><a href="#整理的集合框架思维导图" class="headerlink" title="整理的集合框架思维导图"></a>整理的集合框架思维导图</h1><p>个人整理的Java集合框架思维导图，动态维护。导出的图片无法查看备注的一些信息，所以需要源文件的童鞋可以关注我个人主页上的公众号，回复<strong>Java集合框架</strong>即可获取源文件。<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/jhswdt.png" alt=""></p>
<hr>
<p>如果对你有所帮助(●ˇ∀ˇ●)<code>点个赞</code>或者<code>关注下</code>吧,没准还能打赏下(/▽＼=)。你的鼓励将是博主继续写下去的动力，生活不易，且行且珍惜。</p>
<hr>
<p> 博主弄了个java学习资源的公众号，学习资源超级多，视频，电子书，最新开发工具一个都不能少，已全部分享到百度云盘，求资源共享，打造一个学习方便，工作方便的java公众号，开源开源，有需求的可以关注~撒花<br> <img src="http://7xqch5.com1.z0.glb.clouddn.com/javaLearn.PNG" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Java集合干货系列 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Java集合干货系列-集合总体大纲]]></title>
      <url>http://tengj.top/2016/04/12/javajhtotal/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Java集合是java提供的工具包，包含了常用的数据结构：集合、链表、队列、栈、数组、映射等。Java集合工具包位置是java.util.*<br>Java集合主要可以划分为4个部分：List列表、Set集合、Map映射、工具类(Iterator迭代器、Enumeration枚举类、Arrays和Collections)<br>Java集合工具包框架图(如下)：</p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/jhtotal02.jpg" alt=""></p>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>看上面的框架图，先抓住它的主干，即Collection和Map。</p>
<h2 id="Collection接口、子接口以及实现类"><a href="#Collection接口、子接口以及实现类" class="headerlink" title="Collection接口、子接口以及实现类"></a>Collection接口、子接口以及实现类</h2><p>Collection接口</p>
<ul>
<li>是List、Set和Queue接口的父接口</li>
<li>定义了可用于操作List、Set和Queue的方法-增删改查</li>
</ul>
<p>Collection接口<a href="http://www.yq1012.com/api/" target="_blank" rel="external">API</a>中定义的方法如下：<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/jhtotal.png" alt="">  </p>
<h2 id="List接口"><a href="#List接口" class="headerlink" title="List接口"></a>List接口</h2><ul>
<li>List是元素有序并且可以重复的集合，被称为序列</li>
<li>List可以精确的控制每个元素的插入位置，或删除某个位置元素</li>
<li>List接口的常用子类：<br>ArrayList<br>LinkedList<br>Vector<br>Stack<br>下图是List的JDK源码UML图。  </li>
</ul>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/jhtotal_3.jpg" alt=""></p>
<h2 id="Set接口"><a href="#Set接口" class="headerlink" title="Set接口"></a>Set接口</h2><ul>
<li>Set接口中不能加入重复元素，无序</li>
<li>Set接口常用子类：<br>  散列存放：HashSet<br>  有序存放：TreeSet<br>下图是Set的JDK源码UML图。  </li>
</ul>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/jhtotal_4.jpg" alt=""></p>
<h2 id="Map和HashMap"><a href="#Map和HashMap" class="headerlink" title="Map和HashMap"></a>Map和HashMap</h2><p><strong>Map接口</strong></p>
<ul>
<li>Map提供了一种映射关系，其中的元素是以键值对（key-value）的形式存储的，能够实现根据key快速查找value</li>
<li>Map中的键值对以Entry类型的对象实例形式存在</li>
<li>键（key值）不可重复，value值可以</li>
<li>每个建最多只能映射到一个值</li>
<li>Map接口提供了分别返回key值集合、value值集合以及Entry（键值对）集合的方法</li>
<li>Map支持泛型，形式如：Map<k,v></k,v></li>
</ul>
<p><strong>HashMap类</strong></p>
<ul>
<li>HashMap是Map的一个重要实现类，也是最常用，基于哈希表实现</li>
<li>HashMap中的Entry对象是无序排列的</li>
<li>Key值和Value值都可以为null,但是一个HashMap只能有一个key值为null的映射（key值不可重复）</li>
</ul>
<p>下图是Map的JDK源码UML图  </p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/jhtotal_5.jpg" alt=""></p>
<h2 id="Comparable和Comparator"><a href="#Comparable和Comparator" class="headerlink" title="Comparable和Comparator"></a>Comparable和Comparator</h2><p><strong>Comparable接口——可比较的</strong></p>
<ul>
<li>实现该接口表示：这个类的实例可以比较大小，可以进行自然排序</li>
<li>定义了默认的比较规则</li>
<li>其实现类需要实现compareTo()方法</li>
<li>compareTo()方法返回正数表示大，负数表示小0表示相等</li>
</ul>
<p><strong>Comparator</strong>接口——比较工具接口</p>
<ul>
<li>用于定义临时比较规则，而不是默认比较规则</li>
<li>其实现类需要实现compare()方法</li>
<li>Comparable和Comparator都是Java集合框架的成员</li>
</ul>
<h2 id="Iterator接口"><a href="#Iterator接口" class="headerlink" title="Iterator接口"></a>Iterator接口</h2><ol>
<li>集合输出的标准操作<br> 标准做法，使用Iterator接口</li>
<li>操作原理：<br> Iterator是专门的迭代输出接口，迭代输出就是将元素一个个进行判断，判断其是否有内容，如果有内容则把内容取出。</li>
</ol>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="集合的作用"><a href="#集合的作用" class="headerlink" title="集合的作用"></a>集合的作用</h2><ul>
<li>在类的内部，对数据进行组织；</li>
<li>简单而快速的搜索大数量的条目；</li>
<li>有的集合接口，提供了一系列排列有序的元素，并且可以在序列中间快速的插入或者删除有关元素；</li>
<li>有的集合接口，提供了映射关系，可以通过关键字（key）去快速查找对应的唯一对象，而这个关键字额可以是任意类型。</li>
</ul>
<h2 id="与数组的对比—————为何选择集合而不是数组"><a href="#与数组的对比—————为何选择集合而不是数组" class="headerlink" title="与数组的对比—————为何选择集合而不是数组"></a>与数组的对比—————为何选择集合而不是数组</h2><ul>
<li>数组的长度固定，集合长度可变</li>
<li>数组只能通过下标访问元素，类型固定，而有的集合可以通过任意类型查找所映射的具体对象。</li>
</ul>
<h2 id="整理的集合框架思维导图"><a href="#整理的集合框架思维导图" class="headerlink" title="整理的集合框架思维导图"></a>整理的集合框架思维导图</h2><p>个人整理的Java集合框架思维导图，动态维护。导出的图片无法查看备注的一些信息，所以需要源文件的童鞋可以关注我个人的公众号，回复<strong>Java集合框架</strong>即可获取源文件。<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/jhswdt.png" alt=""></p>
<hr>
<p>如果对你有所帮助(●ˇ∀ˇ●)<code>点个赞</code>或者<code>关注下</code>吧,没准还能打赏下(/▽＼=)。你的鼓励将是博主继续写下去的动力，生活不易，且行且珍惜。</p>
<hr>
<p>博主弄了个java学习资源的公众号，学习资源超级多，视频，电子书，最新开发工具一个都不能少，已全部分享到百度云盘，求资源共享，打造一个学习方便，工作方便的java公众号，开源开源，有需求的可以关注~撒花<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/javaLearn.PNG" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Java集合干货系列 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[设计模式干货系列：（六）建造者模式【学习难度：★★★★☆，使用频率：★★☆☆☆】]]></title>
      <url>http://tengj.top/2016/04/09/sjms6builder/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>今天介绍建造者模式，建造者模式又称为生成器模式，它是一种较为复杂、使用频率也相对较低的创建型模式。建造者模式为客户端返回的不是一个简单的产品，而是一个由多个部件组成的复杂产品。举个简单的例子，比如我们去买电脑，买的是成品而不是散装的零件。</p>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="建造者模式概念"><a href="#建造者模式概念" class="headerlink" title="建造者模式概念"></a>建造者模式概念</h2><p>建造者模式(Builder Pattern)：将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。建造者模式是一种对象创建型模式。  </p>
<p><strong>产品的内部表象</strong>  </p>
<p>一个产品常有不同的组成成分作为产品的零件，这些零件有可能是对象，也有可能不是对象，它们通常又叫做产品的内部表象（internal representation）。不同的产品可以有不同的内部表象，也就是不同的零件。使用建造模式可以使客户端不需要知道所生成的产品有哪些零件，每个产品的对应零件彼此有何不同，是怎么建造出来的，以及怎么组成产品。  </p>
<p><strong>对象性质的建造</strong>  </p>
<p>有些情况下，一个对象会有一些重要的性质，在它们没有恰当的值之前，对象不能作为一个完整的产品使用。比如，一个电子邮件有发件人地址、收件人地址、主题、内容、附录等部分，而在最起码的收件人地址得到赋值之前，这个电子邮件不能发送。  </p>
<p>有些情况下，一个对象的一些性质必须按照某个顺序赋值才有意义。在某个性质没有赋值之前，另一个性质则无法赋值。这些情况使得性质本身的建造涉及到复杂的商业逻辑。这时候，此对象相当于一个有待建造的产品，而对象的这些性质相当于产品的零件，建造产品的过程是建造零件的过程。由于建造零件的过程很复杂，因此，这些零件的建造过程往往被“外部化”到另一个称做建造者的对象里，建造者对象返还给客户端的是一个全部零件都建造完毕的产品对象。</p>
<p>建造模式利用一个导演者对象和具体建造者对象一个个地建造出所有的零件，从而建造出完整的产品对象。建造者模式将产品的结构和产品的零件的建造过程对客户端隐藏起来，把对建造过程进行指挥的责任和具体建造者零件的责任分割开来，达到责任划分和封装的目的。</p>
<h2 id="建造者模式结构图"><a href="#建造者模式结构图" class="headerlink" title="建造者模式结构图"></a>建造者模式结构图</h2><p><img src="http://7xqch5.com1.z0.glb.clouddn.com/sjms6_1.jpg" alt="">  </p>
<p>在建造者模式结构图中包含如下几个角色：  </p>
<p>● Builder（抽象建造者）：它为创建一个产品Product对象的各个部件指定抽象接口，在该接口中一般声明两类方法，一类方法是buildPartX()，它们用于创建复杂对象的各个部件；另一类方法是getResult()，它们用于返回复杂对象。Builder既可以是抽象类，也可以是接口。  </p>
<p>●ConcreteBuilder（具体建造者）：它实现了Builder接口，实现各个部件的具体构造和装配方法，定义并明确它所创建的复杂对象，也可以提供一个方法返回创建好的复杂产品对象。  </p>
<p>●Product（产品角色）：它是被构建的复杂对象，包含多个组成部件，具体建造者创建该产品的内部表示并定义它的装配过程。  </p>
<p>● Director（指挥者）：指挥者又称为导演类，它负责安排复杂对象的建造次序，指挥者与抽象建造者之间存在关联关系，可以在其construct()建造方法中调用建造者对象的部件构造与装配方法，完成复杂对象的建造。客户端一般只需要与指挥者进行交互，在客户端确定具体建造者的类型，并实例化具体建造者对象（也可以通过配置文件和反射机制），然后通过指挥者类的构造函数或者Setter方法将该对象传入指挥者类中。 </p>
<p>导演者角色是与客户端打交道的角色。导演者将客户端创建产品的请求划分为对各个零件的建造请求，再将这些请求委派给具体建造者角色。具体建造者角色是做具体建造工作的，但是却不为客户端所知。  </p>
<p>一般来说，每有一个产品类，就有一个相应的具体建造者类。这些产品应当有一样数目的零件，而每有一个零件就相应地在所有的建造者角色里有一个建造方法。这里就举买电脑的例子来介绍，我们假设电脑需要2个组件，主机和显示器。</p>
<h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><p>下面是Computer电脑产品的源代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Computer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String host;<span class="comment">//主机</span></span><br><span class="line">    <span class="keyword">private</span> String display;<span class="comment">// 显示屏</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getHost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> host;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHost</span><span class="params">(String host)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.host = host;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDisplay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> display;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDisplay</span><span class="params">(String display)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.display = display;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>下面是抽象建造者类Builder的源代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span>  <span class="title">Builder</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildHost</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildDisplay</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Computer <span class="title">retrieveResult</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>下面是具体建造者类LenovoBuilder的源代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LenovoBuilder</span> <span class="keyword">implements</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">    Computer computer = <span class="keyword">new</span> Computer();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 产品零件建造方法1</span><br><span class="line">     */</span></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildDisplay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//构建产品的第一个零件</span></span><br><span class="line">        computer.setDisplay(<span class="string">"联想显示器"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 产品零件建造方法1</span><br><span class="line">     */</span></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildHost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//构建产品的第二个零件</span></span><br><span class="line">        computer.setHost(<span class="string">"联想主机"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 产品返还方法</span><br><span class="line">     */</span></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Computer <span class="title">retrieveResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> computer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>下面是具体建造者类HuaweiBuilder的源代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HuaweiBuilder</span> <span class="keyword">implements</span>  <span class="title">Builder</span></span>&#123;</span><br><span class="line">    Computer computer = <span class="keyword">new</span> Computer();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 产品零件建造方法1</span><br><span class="line">     */</span></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildDisplay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//构建产品的第一个零件</span></span><br><span class="line">        computer.setDisplay(<span class="string">"华为显示器"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 产品零件建造方法1</span><br><span class="line">     */</span></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildHost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//构建产品的第二个零件</span></span><br><span class="line">        computer.setHost(<span class="string">"华为主机"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 产品返还方法</span><br><span class="line">     */</span></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Computer <span class="title">retrieveResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> computer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>下面是指挥者类Director类的源代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Director</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 持有当前需要使用的建造器对象</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">private</span> Builder builder;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 构造方法，传入建造器对象</span><br><span class="line">     * <span class="doctag">@param</span> builder 建造器对象</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Director</span><span class="params">(Builder builder)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.builder = builder;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 产品构造方法，负责调用各个零件建造方法</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">construct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        builder.buildHost();</span><br><span class="line">        builder.buildDisplay();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>下面是客户端类Client源代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[]args)</span></span>&#123;</span><br><span class="line">        Builder builder = <span class="keyword">new</span> LenovoBuilder();</span><br><span class="line">        Director director = <span class="keyword">new</span> Director(builder);</span><br><span class="line">        director.construct();</span><br><span class="line">        Computer computer = builder.retrieveResult();</span><br><span class="line">        System.out.println(computer.getHost());</span><br><span class="line">        System.out.println(computer.getDisplay());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#32852;&#24819;&#20027;&#26426;&#10;&#32852;&#24819;&#26174;&#31034;&#22120;</span><br></pre></td></tr></table></figure></p>
<p>以上代码就是模式了建造者模式的使用场景，其中电脑销售人员相当于指挥者，只要客户确定电脑的类型，电脑销售人员可以通知电脑组装人员给客户组装一台电脑。 </p>
<p>我们来看看时序图：  </p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/sjms6_2.png" alt=""></p>
<p>客户端负责创建导演者和具体建造者对象。然后，客户端把具体建造者对象交给导演者，导演者操作具体建造者，开始创建产品。当产品完成后，建造者把产品返还给客户端。</p>
<p>把创建具体建造者对象的任务交给客户端而不是导演者对象，是为了将导演者对象与具体建造者对象的耦合变成动态的，从而使导演者对象可以操纵数个具体建造者对象中的任何一个。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>建造者模式的核心在于如何一步步构建一个包含多个组成部件的完整对象，使用相同的构建过程构建不同的产品，在软件开发中，如果我们需要创建复杂对象并希望系统具备很好的灵活性和可扩展性可以考虑使用建造者模式。  </p>
<p><strong>1.主要优点</strong>  </p>
<ul>
<li><p>在建造者模式中，客户端不必知道产品内部组成的细节，将产品本身与产品的创建过程解耦，使得相同的创建过程可以创建不同的产品对象。  </p>
</li>
<li><p>每一个具体建造者都相对独立，而与其他的具体建造者无关，因此可以很方便地替换具体建造者或增加新的具体建造者，用户使用不同的具体建造者即可得到不同的产品对象。由于指挥者类针对抽象建造者编程，增加新的具体建造者无须修改原有类库的代码，系统扩展方便，符合“开闭原则”  </p>
</li>
<li><p>可以更加精细地控制产品的创建过程。将复杂产品的创建步骤分解在不同的方法中，使得创建过程更加清晰，也更方便使用程序来控制创建过程。  </p>
</li>
</ul>
<p><strong>2.主要缺点</strong>  </p>
<ul>
<li><p>建造者模式所创建的产品一般具有较多的共同点，其组成部分相似，如果产品之间的差异性很大，例如很多组成部分都不相同，不适合使用建造者模式，因此其使用范围受到一定的限制。  </p>
</li>
<li><p>如果产品的内部变化复杂，可能会导致需要定义很多具体建造者类来实现这种变化，导致系统变得很庞大，增加系统的理解难度和运行成本。  </p>
</li>
</ul>
<p><strong>3.适用场景</strong>  </p>
<ul>
<li><p>需要生成的产品对象有复杂的内部结构，这些产品对象通常包含多个成员属性。  </p>
</li>
<li><p>需要生成的产品对象的属性相互依赖，需要指定其生成顺序。  </p>
</li>
<li><p>对象的创建过程独立于创建该对象的类。在建造者模式中通过引入了指挥者类，将创建过程封装在指挥者类中，而不在建造者类和客户类中。</p>
</li>
<li><p>隔离复杂对象的创建和使用，并使得相同的创建过程可以创建不同的产品。</p>
</li>
</ul>
<hr>
<p>如果对你有所帮助(●ˇ∀ˇ●)<code>点个赞</code>或者<code>关注下</code>吧,没准还能打赏下(/▽＼=)。你的鼓励将是博主继续写下去的动力，生活不易，且行且珍惜。</p>
<hr>
<p>博主弄了个java学习资源的公众号，学习资源超级多，视频，电子书，最新开发工具一个都不能少，已全部分享到百度云盘，求资源共享，打造一个学习方便，工作方便的java公众号，开源开源，有需求的可以关注~撒花<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/javaLearn.PNG" alt=""></p>
]]></content>
      
        <categories>
            
            <category> 设计模式 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[设计模式干货系列：（五）原型模式【学习难度：★★★☆☆，使用频率：★★★☆☆】]]></title>
      <url>http://tengj.top/2016/04/07/sjms5prototype/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>今天介绍原型模式，我自己偷偷给它命名为克隆模式。因为原型模式的意图是通过复制一个现有的对象来生成新的对象，而不是通过实例化的方式。</p>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="原型模式概念"><a href="#原型模式概念" class="headerlink" title="原型模式概念"></a>原型模式概念</h2><p>原型模式(Prototype Pattern)：使用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。原型模式是一种对象创建型模式。  </p>
<p>该接口用于创建当前对象的克隆。当直接创建对象的代价比较大时，则采用这种模式。例如，一个对象需要在一个高代价的数据库操作之后被创建。我们可以缓存该对象，在下一个请求时返回它的克隆，在需要的时候更新数据库，以此来减少数据库调用。</p>
<p>  需要注意的是通过克隆方法所创建的对象是全新的对象，它们在内存中拥有新的地址，通常对克隆所产生的对象进行修改对原型对象不会造成任何影响，每一个克隆对象都是相互独立的。通过不同的方式修改可以得到一系列相似但不完全相同的对象。</p>
<h2 id="原型模式结构图"><a href="#原型模式结构图" class="headerlink" title="原型模式结构图"></a>原型模式结构图</h2><p><img src="http://7xqch5.com1.z0.glb.clouddn.com/sjms5_1.jpg" alt=""><br>在原型模式结构图中包含如下几个角色：</p>
<ul>
<li>抽象原型角色（Prototype）：它是声明克隆方法的接口，是所有具体原型类的公共父类，可以是抽象类也可以是接口，甚至还可以是具体实现类。</li>
<li>具体原型角色（ConcretePrototype）：它实现在抽象原型类中声明的克隆方法，在克隆方法中返回自己的一个克隆对象。</li>
<li>客户角色（Client）：客户类提出创建对象的请求。</li>
</ul>
<p>原型模式的核心在于如何实现克隆方法，博主本人是从事Java开发，所以用Java语言提供的clone()方法来实现。学过Java语言的人都知道，所有的Java类都继承自java.lang.Object。事实上，Object类提供一个clone()方法，可以将一个Java对象复制一份。因此在Java中可以直接使用Object提供的clone()方法来实现对象的克隆，Java语言中的原型模式实现很简单。</p>
<p>需要注意的是能够实现克隆的Java类必须实现一个标识接口Cloneable，表示这个Java类支持被复制。如果一个类没有实现这个接口但是调用了clone()方法，Java编译器将抛出一个CloneNotSupportedException异常。</p>
<p><strong>克隆满足的条件</strong><br>clone()方法将对象复制了一份并返还给调用者。所谓“复制”的含义与clone()方法是怎么实现的有关。一般而言，clone()方法满足以下的描述：</p>
<ul>
<li>对任何的对象x，都有：x.clone()!=x 。换言之，克隆对象与元对象不是一个对象。</li>
<li>对任何的对象x，都有：x.clone().getClass==x.getClass(),换言之，克隆对象与元对象的类型一样。</li>
<li>如果对象x的equals()方法定于恰当的话，那么x.clone().equals(x)应当是成立的。<br>在Java语言的API中，凡是提供了clone(）方法的类，都满足上面的这些条件。Java语言的设计师在设计自己的clone()方法时，也应当遵守这三个条件。</li>
</ul>
<p>在理解Java原型模式之前，首先需要理解Java中的一个概念：复制/克隆。Java中的对象复制/克隆分为浅复制和深复制。在Java语言中，数据类型分为值类型（基本数据类型）和引用类型，值类型包括int、double、byte、boolean、char等简单数据类型，引用类型包括类、接口、数组等复杂类型。浅克隆和深克隆的主要区别在于是否支持引用类型的成员变量的复制，下面将对两者进行详细介绍。</p>
<h2 id="浅克隆"><a href="#浅克隆" class="headerlink" title="浅克隆"></a>浅克隆</h2><p>在浅克隆中，如果原型对象的成员变量是值类型，将复制一份给克隆对象；如果原型对象的成员变量是引用类型，则将引用对象的地址<code>复制</code>一份给克隆对象，也就是说原型对象和克隆对象的成员变量指向<code>相同</code>的内存地址。简单来说，在浅克隆中，当对象被复制时只复制它本身和其中包含的值类型的成员变量，而引用类型的成员对象并没有复制。<br>下面以复制一本书为例：<br>下面是Author源代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Author</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>下面是Book源代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span>  <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String bookName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> price;</span><br><span class="line">    <span class="keyword">private</span> Author author;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Book <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Book  book=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            book=(Book)<span class="keyword">super</span>.clone();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> book;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Author <span class="title">getAuthor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> author;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAuthor</span><span class="params">(Author author)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.author = author;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getBookName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBookName</span><span class="params">(String bookName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bookName = bookName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(<span class="keyword">int</span> price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>下面是客户端类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Author author=<span class="keyword">new</span> Author();</span><br><span class="line">        author.setName(<span class="string">"tengj"</span>);</span><br><span class="line">        Book book=<span class="keyword">new</span> Book();</span><br><span class="line">        book.setBookName(<span class="string">"Java设计模式"</span>);</span><br><span class="line">        book.setPrice(<span class="number">99</span>);</span><br><span class="line">        book.setAuthor(author);</span><br><span class="line">        Book book2=book.clone();</span><br><span class="line">        System.out.println(book==book2);                                 <span class="comment">// false</span></span><br><span class="line">        System.out.println(book.getBookName() == book2.getBookName());   <span class="comment">// true</span></span><br><span class="line">        System.out.println(book.getAuthor() == book2.getAuthor());       <span class="comment">// true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>由输出的结果可以验证说到的结论。由此我们发现：<strong>虽然复制出来的对象重新在堆上开辟了内存空间，但是，对象中各属性确保持相等。对于基本数据类型很好理解，但对于引用数据类型来说，则意味着此引用类型的属性所指向的对象本身是相同的， 并没有重新开辟内存空间存储。换句话说，引用类型的属性所指向的对象并没有复制。</strong><br><strong>由此，我们将其称之为浅复制。当复制后的对象的引用类型的属性所指向的对象也重新得以复制，此时，称之为深复制。</strong></p>
<h2 id="深克隆"><a href="#深克隆" class="headerlink" title="深克隆"></a>深克隆</h2><p>在深克隆中，无论原型对象的成员变量是值类型还是引用类型，都将复制一份给克隆对象，深克隆将原型对象的所有引用对象也复制一份给克隆对象。简单来说，在深克隆中，除了对象本身被复制外，对象所包含的所有成员变量也将复制。</p>
<p>在Java语言中，如果需要实现深克隆，可以通过序列化(Serialization)等方式来实现。序列化就是将对象写到流的过程，写到流中的对象是原有对象的一个拷贝，而原对象仍然存在于内存中。通过序列化实现的拷贝不仅可以复制对象本身，而且可以复制其引用的成员对象，因此通过序列化将对象写到一个流中，再从流里将其读出来，可以实现深克隆。需要注意的是能够实现序列化的对象其类必须实现Serializable接口，否则无法实现序列化操作。</p>
<p>还是以复制一本书为例：<br>下面是Author源代码(<strong>Author也需要实现Serializable接口!!</strong>)：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Author</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>下面是Book源代码（<strong>Book类需要实现Serializable接口</strong>）：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span>  <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String bookName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> price;</span><br><span class="line">    <span class="keyword">private</span> Author author;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Book <span class="title">deepClone</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line"><span class="comment">// 写入当前对象的二进制流</span></span><br><span class="line">        ByteArrayOutputStream bos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(bos);</span><br><span class="line">        oos.writeObject(<span class="keyword">this</span>);</span><br><span class="line">        <span class="comment">// 读出二进制流产生的新对象</span></span><br><span class="line">        ByteArrayInputStream bis = <span class="keyword">new</span> ByteArrayInputStream(bos.toByteArray());</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(bis);</span><br><span class="line">        <span class="keyword">return</span> (Book) ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Author <span class="title">getAuthor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> author;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAuthor</span><span class="params">(Author author)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.author = author;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getBookName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBookName</span><span class="params">(String bookName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bookName = bookName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(<span class="keyword">int</span> price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>下面是客户端类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeepClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        Author author=<span class="keyword">new</span> Author();</span><br><span class="line">        author.setName(<span class="string">"tengj"</span>);</span><br><span class="line">        Book book=<span class="keyword">new</span> Book();</span><br><span class="line">        book.setBookName(<span class="string">"Java设计模式"</span>);</span><br><span class="line">        book.setPrice(<span class="number">99</span>);</span><br><span class="line">        book.setAuthor(author);</span><br><span class="line">        Book book2=book.deepClone();</span><br><span class="line">        System.out.println(book==book2);                                 <span class="comment">// false</span></span><br><span class="line">        System.out.println(book.getBookName() == book2.getBookName());   <span class="comment">// false</span></span><br><span class="line">        System.out.println(book.getAuthor() == book2.getAuthor());       <span class="comment">// false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>从输出结果中可以看出，<strong>深复制不仅在堆内存上开辟了空间以存储复制出的对象，甚至连对象中的引用类型的属性所指向的对象也得以复制，重新开辟了堆空间存储。</strong></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>原型模式作为一种快速创建大量相同或相似对象的方式，在软件开发中应用较为广泛，很多软件提供的复制(Ctrl + C)和粘贴(Ctrl + V)操作就是原型模式的典型应用，下面对该模式的使用效果和适用情况进行简单的总结。<br><strong>1.主要优点</strong><br>原型模式的主要优点如下：</p>
<ul>
<li>当创建新的对象实例较为复杂时，使用原型模式可以简化对象的创建过程，通过复制一个已有实例可以提高新实例的创建效率。</li>
<li>扩展性较好，由于在原型模式中提供了抽象原型类，在客户端可以针对抽象原型类进行编程，而将具体原型类写在配置文件中，增加或减少产品类对原有系统都没有任何影响。</li>
<li>原型模式提供了简化的创建结构，工厂方法模式常常需要有一个与产品类等级结构相同的工厂等级结构，而原型模式就不需要这样，原型模式中产品的复制是通过封装在原型类中的克隆方法实现的，无须专门的工厂类来创建产品。</li>
<li>可以使用深克隆的方式保存对象的状态，使用原型模式将对象复制一份并将其状态保存起来，以便在需要的时候使用（如恢复到某一历史状态），可辅助实现撤销操作。<br><strong>2.主要缺点</strong><br>原型模式的主要缺点如下：</li>
<li>需要为每一个类配备一个克隆方法，而且该克隆方法位于一个类的内部，当对已有的类进行改造时，需要修改源代码，违背了“开闭原则”。</li>
<li>在实现深克隆时需要编写较为复杂的代码，而且当对象之间存在多重的嵌套引用时，为了实现深克隆，每一层对象对应的类都必须支持深克隆，实现起来可能会比较麻烦。<br><strong>3.适用场景</strong><br>在以下情况下可以考虑使用原型模式：</li>
<li>创建新对象成本较大（如初始化需要占用较长的时间，占用太多的CPU资源或网络资源），新的对象可以通过原型模式对已有对象进行复制来获得，如果是相似对象，则可以对其成员变量稍作修改。</li>
<li>如果系统要保存对象的状态，而对象的状态变化很小，或者对象本身占用内存较少时，可以使用原型模式配合备忘录模式来实现。</li>
<li>需要避免使用分层次的工厂类来创建分层次的对象，并且类的实例对象只有一个或很少的几个组合状态，通过复制原型对象得到新实例可能比使用构造函数创建一个新实例更加方便。</li>
</ul>
<hr>
<h2 id="如果对你有所帮助-●ˇ∀ˇ●-点个赞吧。被接收是对我最大的鼓励。"><a href="#如果对你有所帮助-●ˇ∀ˇ●-点个赞吧。被接收是对我最大的鼓励。" class="headerlink" title="如果对你有所帮助(●ˇ∀ˇ●)点个赞吧。被接收是对我最大的鼓励。"></a>如果对你有所帮助(●ˇ∀ˇ●)<code>点个赞</code>吧。被接收是对我最大的鼓励。</h2><p>最近撸了个java的公众号，学习资源超级多，视频，电子书，最新开发工具一个都不能少，已全部分享到百度云盘，求资源共享，打造一个学习方便，工作方便的java公众号，开源开源，有需求的可以关注~撒花<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/javaLearn.PNG" alt=""></p>
]]></content>
      
        <categories>
            
            <category> 设计模式 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[设计模式干货系列：（四）单例模式【学习难度：★☆☆☆☆，使用频率：★★★★☆】]]></title>
      <url>http://tengj.top/2016/04/06/sjms4singleton/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>今天介绍下单例模式，单例模式（Singleton Pattern）是 Java 中最简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>举个常见的单例模式例子，我们日常使用的电脑上都有一个回收站，在整个操作系统中，回收站只能有一个实例，整个系统都使用这个唯一的实例，而且回收站自行提供自己的实例。因此回收站是单例模式的应用。</p>
<h2 id="单例模式概念"><a href="#单例模式概念" class="headerlink" title="单例模式概念"></a>单例模式概念</h2><p><strong>单例模式(Singleton Pattern)</strong>：确保某一个类只有一个实例，而且自行实例化并向整个系统提供这个实例，这个类称为单例类，它提供全局访问的方法。单例模式是一种<code>对象创建型模式</code>。</p>
<h2 id="单例模式结构图"><a href="#单例模式结构图" class="headerlink" title="单例模式结构图"></a>单例模式结构图</h2><p>单例模式是结构最简单的设计模式一，在它的核心结构中只包含一个被称为单例类的特殊类。<br><strong>单例模式有三个特性：</strong></p>
<ul>
<li>单例类只能有一个实例</li>
<li>单例类必须自行创建自己的唯一的实例</li>
<li>单例类必须给所有其他对象提供这一实例</li>
</ul>
<p>单例模式结构如图所示：<br><img src="http://upload-images.jianshu.io/upload_images/1637925-60cf9464d0d2cb16.gif?imageMogr2/auto-orient/strip" alt="">  </p>
<p> 单例模式结构图中只包含一个单例角色：</p>
<ul>
<li><code>Singleton</code>（单例）：在单例类的内部实现只生成一个实例，同时它提供一个静态的<code>getInstance()</code>工厂方法，让客户可以访问它的唯一实例；为了防止在外部对其实例化，将其构造函数设计为<code>私有</code>；在单例类内部定义了一个<code>Singleton</code>类型的<code>静态</code>对象，作为外部共享的唯一实例。</li>
</ul>
<h2 id="单例模式的几种实现方式"><a href="#单例模式的几种实现方式" class="headerlink" title="单例模式的几种实现方式"></a>单例模式的几种实现方式</h2><p>单例模式的实现有多种方式，如下所示：</p>
<h3 id="1、懒汉式，线程不安全"><a href="#1、懒汉式，线程不安全" class="headerlink" title="1、懒汉式，线程不安全"></a>1、懒汉式，线程不安全</h3><blockquote>
<p>是否 Lazy 初始化：是<br>是否多线程安全：否<br>实现难度：易<br>描述：这种方式是最基本的实现方式，这种实现最大的问题就是不支持多线程。因为没有加锁 <code>synchronized</code>，所以严格意义上它并不算单例模式。<br>这种方式 <code>lazy loading</code> 很明显，不要求线程安全，在多线程不能正常工作。</p>
</blockquote>
<p>代码实例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">        instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>接下来介绍的几种实现方式都支持多线程，但是在性能上有所差异。</strong></p>
<h3 id="2、懒汉式，线程安全"><a href="#2、懒汉式，线程安全" class="headerlink" title="2、懒汉式，线程安全"></a>2、懒汉式，线程安全</h3><blockquote>
<p>是否 Lazy 初始化：是<br>是否多线程安全：是<br>实现难度：易<br>描述：这种方式具备很好的 <code>lazy loading</code>，能够在多线程中很好的工作，但是，效率很低，99% 情况下不需要同步。<br>优点：第一次调用才初始化，避免内存浪费。<br>缺点：必须加锁 <code>synchronized</code> 才能保证单例，但加锁会影响效率。<br><code>getInstance()</code> 的性能对应用程序不是很关键（该方法使用不太频繁）。</p>
</blockquote>
<p>代码实例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">        instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="3、饿汉式"><a href="#3、饿汉式" class="headerlink" title="3、饿汉式"></a>3、饿汉式</h3><blockquote>
<p>是否 Lazy 初始化：否<br>是否多线程安全：是<br>实现难度：易<br>描述：这种方式比较常用，但容易产生垃圾对象。<br>优点：没有加锁，执行效率会提高。<br>缺点：类加载时就初始化，浪费内存。<br>它基于<code>classloder</code>机制避免了多线程的同步问题，不过，<code>instance</code>在类装载时就实例化，虽然导致类装载的原因有很多种，在单例模式中大多数都是调用<code>getInstance</code>方法， 但是也不能确定有其他的方式（或者其他的静态方法）导致类装载，这时候初始化<code>instance</code>显然没有达到<code>lazy loading</code>的效果。</p>
</blockquote>
<p>代码实例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> instance;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="4、双检锁-双检查锁（DCL，即-double-checked-locking）"><a href="#4、双检锁-双检查锁（DCL，即-double-checked-locking）" class="headerlink" title="4、双检锁/双检查锁（DCL，即 double-checked locking）"></a>4、双检锁/双检查锁（DCL，即 double-checked locking）</h3><blockquote>
<p>JDK 版本：JDK1.5 起<br>是否 Lazy 初始化：是<br>是否多线程安全：是<br>实现难度：较复杂<br>描述：这种方式称为双重检查锁(Double-Check Locking)，需要注意的是，如果使用双重检查锁定来实现懒汉式单例类，需要在静态成员变量<code>instance</code>之前增加<strong>修饰符volatile</strong>，被<code>volatile</code>修饰的成员变量可以确保多个线程都能够正确处理，且该代码只能在JDK 1.5及以上版本中才能正确执行。由于<code>volatile</code>关键字会屏蔽Java虚拟机所做的一些代码优化，可能会导致系统运行效率降低，因此即使使用双重检查锁定来实现单例模式也不是一种完美的实现方式。</p>
</blockquote>
<p>代码实例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton singleton;  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getSingleton</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;  </span><br><span class="line">        <span class="keyword">synchronized</span> (Singleton.class) &#123;  </span><br><span class="line">        <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;  </span><br><span class="line">            singleton = <span class="keyword">new</span> Singleton();  </span><br><span class="line">        &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> singleton;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="5、静态内部类"><a href="#5、静态内部类" class="headerlink" title="5、静态内部类"></a>5、静态内部类</h3><blockquote>
<p>是否 Lazy 初始化：是<br>是否多线程安全：是<br>实现难度：一般<br>描述：饿汉式单例类不能实现延迟加载，不管将来用不用始终占据内存；懒汉式单例类线程安全控制烦琐，而且性能受影响。可见，无论是饿汉式单例还是懒汉式单例都存在这样那样的问题，有没有一种方法，能够将两种单例的缺点都克服，而将两者的优点合二为一呢？答案是：Yes！下面我们来学习这种更好的被称之为<strong>Initialization Demand Holder (IoDH)</strong>的技术。在<code>IoDH</code>中，我们在单例类中增加一个<strong>静态(static)内部类</strong>，在该内部类中创建单例对象，再将该单例对象通过<code>getInstance()</code>方法返回给外部使用。由于静态单例对象没有作为<code>Singleton</code>的成员变量直接实例化，因此类加载时不会实例化<code>Singleton</code>，第一次调用<code>getInstance()</code>时将加载内部类<code>SingletonHolder</code>，在该内部类中定义了一个<code>static</code>类型的变量<code>instance</code>，此时会首先初始化这个成员变量，由Java虚拟机来保证其线程安全性，确保该成员变量只能初始化一次。由于<code>getInstance()</code>方法没有任何线程锁定，因此其性能不会造成任何影响。通过使用<code>IoDH</code>，我们既可以实现延迟加载，又可以保证线程安全，不影响系统性能，不失为一种最好的Java语言单例模式实现方式**（其缺点是与编程语言本身的特性相关，很多面向对象语言不支持<code>IoDH</code>）。  </p>
</blockquote>
<p>代码实例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> SingletonHolder.INSTANCE;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="6、枚举"><a href="#6、枚举" class="headerlink" title="6、枚举"></a>6、枚举</h3><p>JDK 版本：JDK1.5 起</p>
<blockquote>
<p>是否 Lazy 初始化：否<br>是否多线程安全：是<br>实现难度：易<br>描述：这种实现方式还没有被广泛采用，但这是实现单例模式的最佳方法。它更简洁，自动支持序列化机制，绝对防止多次实例化。<br>这种方式是<code>Effective Java</code>作者<code>Josh Bloch</code>提倡的方式，它不仅能避免多线程同步问题，而且还自动支持序列化机制，防止反序列化重新创建新的对象，绝对防止多次实例化。不过，由于 JDK1.5 之后才加入 enum 特性，用这种方式写不免让人感觉生疏，在实际工作中，也很少用。<br>不能通过<code>reflection attack</code>来调用私有构造方法。</p>
</blockquote>
<p>代码实例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Singleton &#123;  </span><br><span class="line">    INSTANCE;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">whateverMethod</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>经验之谈：</strong>一般情况下，不建议使用第 1 种和第 2 种懒汉方式，建议使用第 3 种饿汉方式。只有在要明确实现<code>lazy loading</code>效果时，才会使用第 5 种登记方式。如果涉及到反序列化创建对象时，可以尝试使用第 6 种枚举方式。如果有其他特殊的需求，可以考虑使用第 4 种双检锁方式。</p>
<h2 id="Java中的语言中的单例模式"><a href="#Java中的语言中的单例模式" class="headerlink" title="Java中的语言中的单例模式"></a>Java中的语言中的单例模式</h2><p>Java语言中就有很多单例模式的应用实例，这里举例一个。</p>
<h3 id="Java的Runtime对象"><a href="#Java的Runtime对象" class="headerlink" title="Java的Runtime对象"></a>Java的Runtime对象</h3><p>在Java语言内部，<code>java.lang.Runtime</code>对象就是一个使用单例模式的例子。在每一个Java应用程序里面，都有唯一的一个<code>Runtime</code>对象，应用程序可以与其运行环境发生相互作用。<br><code>Runtime</code>类提供一个静态工厂方法<code>getRuntime()</code>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Runtime <span class="title">getRuntime</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure></p>
<p>通过调用此方法，可以获得<code>Runtime</code>类唯一的一个实例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Runtime rt=Runtime.getRuntime();</span><br></pre></td></tr></table></figure></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>单例模式作为一种目标明确、结构简单、理解容易的设计模式，在软件开发中使用频率相当高，在很多应用软件和框架中都得以广泛应用。</p>
<p><strong>1.主要优点</strong><br>单例模式的主要优点如下：</p>
<ul>
<li>单例模式提供了对唯一实例的受控访问。因为单例类封装了它的唯一实例，所以它可以严格控制客户怎样以及何时访问它。</li>
<li>由于在系统内存中只存在一个对象，因此可以节约系统资源，对于一些需要频繁创建和销毁的对象单例模式无疑可以提高系统的性能。</li>
<li>允许可变数目的实例。基于单例模式我们可以进行扩展，使用与单例控制相似的方法来获得指定个数的对象实例，既节省系统资源，又解决了单例单例对象共享过多有损性能的问题。</li>
</ul>
<p><strong>2.主要缺点</strong><br> 单例模式的主要缺点如下：</p>
<ul>
<li>由于单例模式中没有抽象层，因此单例类的扩展有很大的困难。</li>
<li>单例类的职责过重，在一定程度上违背了“单一职责原则”。因为单例类既充当了工厂角色，提供了工厂方法，同时又充当了产品角色，包含一些业务方法，将产品的创建和产品的本身的功能融合到一起。</li>
<li>现在很多面向对象语言(如Java、C#)的运行环境都提供了自动垃圾回收的技术，因此，如果实例化的共享对象长时间不被利用，系统会认为它是垃圾，会自动销毁并回收资源，下次利用时又将重新实例化，这将导致共享的单例对象状态的丢失。</li>
</ul>
<p><strong>3.适用场景</strong><br>在以下情况下可以考虑使用单例模式：</p>
<ul>
<li>系统只需要一个实例对象，如系统要求提供一个唯一的序列号生成器或资源管理器，或者需要考虑资源消耗太大而只允许创建一个对象。</li>
<li>客户调用类的单个实例只允许使用一个公共访问点，除了该公共访问点，不能通过其他途径访问该实例。</li>
</ul>
<hr>
<h2 id="如果对你有所帮助-●ˇ∀ˇ●-点个赞吧。被接收是对我最大的鼓励。"><a href="#如果对你有所帮助-●ˇ∀ˇ●-点个赞吧。被接收是对我最大的鼓励。" class="headerlink" title="如果对你有所帮助(●ˇ∀ˇ●)点个赞吧。被接收是对我最大的鼓励。"></a>如果对你有所帮助(●ˇ∀ˇ●)<code>点个赞</code>吧。被接收是对我最大的鼓励。</h2><p>最近撸了个java的公众号，学习资源超级多，视频，电子书，最新开发工具一个都不能少，已全部分享到百度云盘，求资源共享，打造一个学习方便，工作方便的java公众号，开源开源，有需求的可以关注~撒花<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/javaLearn.PNG" alt=""></p>
]]></content>
      
        <categories>
            
            <category> 设计模式 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[设计模式干货系列：（三）抽象工厂模式【学习难度：★★★★☆，使用频率：★★★★★】]]></title>
      <url>http://tengj.top/2016/04/04/sjms3abstractfactory/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>接着上一篇工厂方法模式说，现在披萨店生意很好，除了卖披萨，又卖汉堡，并且为了适用不同的客户群体，增加了<code>单人套餐</code>和<code>家庭套餐</code>。这种情况下多了一个产品汉堡，已经不适合用工厂方法模式了，这时候就要用到更加抽象化的抽象工厂模式来满足这个系统。</p>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="抽象工厂模式概念"><a href="#抽象工厂模式概念" class="headerlink" title="抽象工厂模式概念"></a>抽象工厂模式概念</h2><p><code>抽象工厂模式</code>是所有形态的工厂模式中最为抽象和最具一般性的一种形态。<code>抽象工厂模式</code>可以向客户端提供一个接口，使得客户端在不必指定产品的具体类型的情况下，创建多个产品族中的产品对象。这就是抽象工厂的用意。</p>
<h2 id="抽象工厂模式的结构"><a href="#抽象工厂模式的结构" class="headerlink" title="抽象工厂模式的结构"></a>抽象工厂模式的结构</h2><p><code>抽象工厂模式</code>的简略类图如下:  </p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/sjms3_1.png" alt=""><br>从上图可以看出， <code>抽象工厂模式</code>涉及到抽象工厂角色，具体工厂角色，抽象产品角色以及具体产品角色等四个角色：</p>
<ul>
<li>抽象工厂角色：担任这个角色的是工厂方法模式的核心，它是与应用程序无关的。任何在模式中创建对象的工厂类必须实现这个接口。</li>
<li>具体工厂角色：担任这个角色的是实现了抽象工厂接口的具体Java类，具体工厂角色含有与应用密切相关的逻辑，并且受到应用程序的调用以创建产品对象。</li>
<li>抽象产品角色：工厂方法模式所创建的对象的超类型，也就是产品对象的共同父类或共同拥有的接口。</li>
<li>具体产品角色：这个角色实现了抽象产品角色所申明的接口。工厂方法模式所创建的每一个对象都是某个具体产品角色的实例。</li>
</ul>
<p>为了更好地理解抽象工厂模式，我们先引入两个概念：<br><strong>(1) 产品等级结构</strong>：产品等级结构即产品的继承结构，如一个抽象类是电视机，其子类有海尔电视机、海信电视机、TCL电视机，则抽象电视机与具体品牌的电视机之间构成了一个产品等级结构，抽象电视机是父类，而具体品牌的电视机是其子类。  </p>
<p><strong>(2) 产品族</strong>：在抽象工厂模式中，产品族是指由同一个工厂生产的，位于不同产品等级结构中的一组产品，如海尔电器工厂生产的海尔电视机、海尔电冰箱，海尔电视机位于电视机产品等级结构中，海尔电冰箱位于电冰箱产品等级结构中，海尔电视机、海尔电冰箱构成了一个产品族。  </p>
<p>角色上跟<code>工厂方法模式</code>差不多。只是比之前多了一个产品汉堡，并且具体工厂类划分是按照<code>产品族</code>来划分的，这里划分为单人套餐（<code>SingleFactory</code>）以及家庭套餐（<code>FamilyFactory</code>）,单人套餐工厂类可以生产单人套餐披萨和单人套餐汉堡。家庭套餐工厂类可以生产家庭套餐披萨和家庭套餐汉堡。  </p>
<p>下图所示是这个系统的产品等级结构与产品族示意图如图：  </p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/sjms3_21.png" alt="">  </p>
<p>附上代码前先来看看完整的类图：  </p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/sjms3_3.jpg" alt=""></p>
<h2 id="代码示例讲解"><a href="#代码示例讲解" class="headerlink" title="代码示例讲解"></a>代码示例讲解</h2><p>下面是抽象产品的角色<code>Pizza</code>的源代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Pizza</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">create</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>下面是具体产品的角色<code>SinglePizza</code>的源代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SinglePizza</span> <span class="keyword">implements</span> <span class="title">Pizza</span></span>&#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"单人套餐披萨"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>下面是具体产品的角色<code>FamilyPizza</code>的源代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FamilyPizza</span> <span class="keyword">implements</span> <span class="title">Pizza</span></span>&#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"家庭套餐披萨"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>下面是抽象产品的角色<code>Hamburger</code>的源代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Hamburger</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">create</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>下面是具体产品的角色<code>SingleHamburger</code>的源代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleHamburger</span>  <span class="keyword">implements</span> <span class="title">Hamburger</span></span>&#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"单人套餐汉堡"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>下面是具体产品的角色<code>FamilyHamburger</code>的源代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FamilyHamburger</span> <span class="keyword">implements</span> <span class="title">Hamburger</span></span>&#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"家庭套餐汉堡"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>下面是抽象工厂角色<code>Factory</code>的代码,这个角色是使用一个java接口实现，它声明了两个工厂方法，一个用来生产披萨，一个用来生产汉堡，并要求所有的具体工厂角色实现这个工厂方法:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pizza <span class="title">createPizza</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Hamburger <span class="title">createHamburger</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>下面是具体工厂角色<code>SingleFactory</code>的代码，这个角色现实了抽象工厂角色<code>Factory</code>所声明的工厂方法:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleFactory</span> <span class="keyword">implements</span> <span class="title">Factory</span></span>&#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pizza <span class="title">createPizza</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SinglePizza();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Hamburger <span class="title">createHamburger</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SingleHamburger();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>下面是具体工厂角色<code>FamilyFactory</code>的代码，这个角色现实了抽象工厂角色<code>Factory</code>所声明的工厂方法:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FamilyFactory</span> <span class="keyword">implements</span> <span class="title">Factory</span></span>&#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pizza <span class="title">createPizza</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FamilyPizza();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Hamburger <span class="title">createHamburger</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FamilyHamburger();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>下面是客户端角色的源代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderPizza</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Factory factory=<span class="keyword">new</span> SingleFactory();</span><br><span class="line">        Pizza pizza=factory.createPizza();</span><br><span class="line">        pizza.create();</span><br><span class="line">        Hamburger hamburger=factory.createHamburger();</span><br><span class="line">        hamburger.create();</span><br><span class="line">        factory= <span class="keyword">new</span> FamilyFactory();</span><br><span class="line">        pizza=factory.createPizza();</span><br><span class="line">        pizza.create();</span><br><span class="line">        hamburger=factory.createHamburger();</span><br><span class="line">        hamburger.create();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>结果演示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">单人套餐披萨</span><br><span class="line">单人套餐汉堡</span><br><span class="line">家庭套餐披萨</span><br><span class="line">家庭套餐汉堡</span><br></pre></td></tr></table></figure></p>
<h2 id="实际常见的应用"><a href="#实际常见的应用" class="headerlink" title="实际常见的应用"></a>实际常见的应用</h2><p><img src="http://7xqch5.com1.z0.glb.clouddn.com/sjms3_4.jpg" alt=""></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><strong>工厂方法模式和下抽象工厂模式对比</strong></p>
<ul>
<li>工厂方法模式是一种极端情况的抽象工厂模式，而抽象工厂模式可以看成是工厂方法模式的推广。</li>
<li>工厂方法模式用来创建<code>一个</code>产品的等级结构，而抽象工厂模式是用来创建<code>多个</code>产品的等级结构。</li>
<li>工厂方法模式只有一个抽象产品类，而抽象工厂模式有多个抽象产品类。</li>
<li>工厂方法模式中具体工厂类只有一个创建方法，而抽象工厂模式中具体工厂类有多个创建方法。</li>
</ul>
<p>到此，工厂模式中3种模式都学完了，<strong>那到底工厂模式的实现帮了我们什么</strong>？</p>
<ul>
<li>系统可以在不修改具体工厂角色的情况下引进新的产品。</li>
<li>客户端不必关心对象如何创建，明确了职责。</li>
<li>更好的理解面向对象的原则，面向接口编程，而不要面向实现编程。</li>
</ul>
<hr>
<p>源码放百度网盘，有需要自己取，对应目录如下<br>simplefactory：简单工厂模式<br>methodFactory：工厂方法模式<br>AbstractFactory：抽象工厂模式<br>链接：<a href="http://pan.baidu.com/s/1kUNygBl" target="_blank" rel="external">http://pan.baidu.com/s/1kUNygBl</a><br>密码：vc9f</p>
<hr>
<p>最近撸了个java的公众号，学习资源超级多，视频，电子书，最新开发工具一个都不能少，已全部分享到百度云盘，求资源共享，打造一个学习方便，工作方便的java公众号，开源开源，有需求的可以关注~撒花<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/javaLearn.PNG" alt=""></p>
]]></content>
      
        <categories>
            
            <category> 设计模式 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[设计模式干货系列：（二）工厂方法模式【学习难度：★★☆☆☆，使用频率：★★★★★】]]></title>
      <url>http://tengj.top/2016/04/03/sjms2factorymethod/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>上一篇介绍<code>简单工厂模式</code>的时候提到它对<code>开闭原则</code>支持的不够，因为如果有新的产品加入到系统中去，就需要修改工厂类，就违反了<code>开闭原则</code>了，这次介绍的工厂方法模式在保持简单工厂模式优点的前提下，还满足了开闭原则，关键在于它的多态性。</p>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="工厂方法模式概念"><a href="#工厂方法模式概念" class="headerlink" title="工厂方法模式概念"></a>工厂方法模式概念</h2><p>工厂方法模式是类的创建模式，又叫做虚拟构造子(Cirtual Constructor)模式或者多态工厂（Polymorphic Factory）模式。  </p>
<p>工厂方法模式的用意是定义一个创建产品对象的工厂接口，将实际创建工作推迟到子类中。  </p>
<p>首先，在工厂方法模式中，核心的工厂类不再负责所以产品的创建，而是将具体创建的工作交给子类去做.这个核心类则摇身一变，成为了一个抽象工厂角色，仅负责给出具体工厂子类必须实现的接口，而不接触哪一个产品类应当被实例化这种细节。  </p>
<p>这种进一步抽象化的结果，使这种工厂方法模式可以用来予许系统在不修改具体工厂角色的情况下引进新的产品，也就遵循了开闭原则。</p>
<h2 id="工厂方法模式的结构"><a href="#工厂方法模式的结构" class="headerlink" title="工厂方法模式的结构"></a>工厂方法模式的结构</h2><p>工厂方法模式的结构图如下:  </p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/sjms2_1.png" alt="">  </p>
<p>从上图可以看出， 工厂方法模式涉及到抽象工厂角色，具体工厂角色，抽象产品角色以及具体产品角色等四个角色：</p>
<ul>
<li>抽象工厂角色：担任这个角色的是工厂方法模式的核心，它是与应用程序无关的。任何在模式中创建对象的工厂类必须实现这个接口。</li>
<li>具体工厂角色：担任这个角色的是实现了抽象工厂接口的具体Java类，具体工厂角色含有与应用密切相关的逻辑，并且受到应用程序的调用以创建产品对象。</li>
<li>抽象产品角色：工厂方法模式所创建的对象的超类型，也就是产品对象的共同父类或共同拥有的接口。</li>
<li>具体产品角色：这个角色实现了抽象产品角色所申明的接口。工厂方法模式所创建的每一个对象都是某个具体产品角色的实例。  </li>
</ul>
<p>结合披萨系统，用白话文来说就是之前厨师（工厂类）负责所有的烤披萨任务，太累了。于是招了两个厨师分别负责烤 <code>GreekPizza</code>披萨和 <code>CheesePizza</code>披萨，之前的厨师升级为厨师长（抽象工厂类），负责教那两位厨师（具体工厂类）烤披萨，自己则不用亲自动手烤披萨了。  </p>
<p>附上代码前先来看看完整的类图：  </p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/sjms2_2.jpg" alt=""></p>
<h2 id="代码示例讲解"><a href="#代码示例讲解" class="headerlink" title="代码示例讲解"></a>代码示例讲解</h2><p>下面是抽象产品的角色Pizza的源代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Pizza</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">bake</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">cut</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">box</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>下面是具体产品角色CheesePizza的源代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheesePizza</span> <span class="keyword">extends</span> <span class="title">Pizza</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"准备CheesePizza~"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bake</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"正在烤CheesePizza~"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cut</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"正在切CheesePizza~"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">box</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"正在打包CheesePizza~"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>下面是具体产品角色GreekPizza的源代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GreekPizza</span>  <span class="keyword">extends</span> <span class="title">Pizza</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"准备GreekPizza~"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bake</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"正在烤GreekPizza~"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cut</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"正在切GreekPizza~"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">box</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"正在打包GreekPizza~"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>下面是抽象工厂角色PizzaFactory的代码,这个角色是使用一个java接口实现，它声明了一个工厂方法，要求所有的具体工厂角色实现这个工厂方法:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PizzaFactory</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 工厂方法</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pizza <span class="title">createPizza</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>下面是具体工厂角色CheesePizzaFactory的代码，这个角色现实了抽象工厂角色PizzaFactory所声明的工厂方法:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheesePizzaFactory</span> <span class="keyword">implements</span> <span class="title">PizzaFactory</span></span>&#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pizza <span class="title">createPizza</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CheesePizza();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>下面是具体工厂角色GreekPizzaFactory的代码，这个角色现实了抽象工厂角色PizzaFactory所声明的工厂方法:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GreekPizzaFactory</span>  <span class="keyword">implements</span> <span class="title">PizzaFactory</span></span>&#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pizza <span class="title">createPizza</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> GreekPizza();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>下面是客户端角色的源代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderPizza</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        PizzaFactory factory=<span class="keyword">new</span> CheesePizzaFactory();</span><br><span class="line">        Pizza pizza=factory.createPizza();</span><br><span class="line">        pizza.prepare();</span><br><span class="line">        pizza.bake();</span><br><span class="line">        pizza.cut();</span><br><span class="line">        pizza.box();</span><br><span class="line">        factory=<span class="keyword">new</span> GreekPizzaFactory();</span><br><span class="line">        pizza=factory.createPizza();</span><br><span class="line">        pizza.prepare();</span><br><span class="line">        pizza.bake();</span><br><span class="line">        pizza.cut();</span><br><span class="line">        pizza.box();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>结果演示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#20934;&#22791;CheesePizza~&#10;&#27491;&#22312;&#28900;CheesePizza~&#10;&#27491;&#22312;&#20999;CheesePizza~&#10;&#27491;&#22312;&#25171;&#21253;CheesePizza~&#10;&#20934;&#22791;GreekPizza~&#10;&#27491;&#22312;&#28900;GreekPizza~&#10;&#27491;&#22312;&#20999;GreekPizza~&#10;&#27491;&#22312;&#25171;&#21253;GreekPizza~</span><br></pre></td></tr></table></figure></p>
<p>这里使用工厂方法模式的注意点：<br> <strong> 工厂方法创建对象</strong>：<br> 工厂方法不一定每一次都返还一个新的对象，但是它所返还的对象一定是它<code>自己创建</code>的。</p>
<p> <strong>工厂方法返还的类型</strong>：<br> 注意：工厂方法返还的应当是<code>抽象类型</code>，而不是具体类型，只有这样才能保证针对产品的多态性。当工厂方法模式发生上面的退化时，就不再是工厂方法模式了。</p>
<p> <strong>工厂等级结构</strong>：<br> 工厂对象应当有一个抽象的超类型。换言之，应当有数个具体工厂类作为一个抽象超类型的具体子类存在于工厂等级结构中。如果等级结构中只有一个具体工程类的话，那么抽象工厂角色也可以省略，这时候，工厂方法模式就发生了退化，这一退化表现为针对工厂角色的多态性的丧失。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><strong>工厂方法模式和简单工厂模式比较</strong>：<br>工厂方法模式跟简单工厂模式在结构上的不同是很明显的，工厂方法模式的核心是一个抽象工厂类，而简单工厂模式的核心在一个具体类。显而易见工厂方法模式这种结构更好扩展，权力下发，分布式比集中式更具优势。  </p>
<p>如果系统需要加入一个新的产品，那么所需要的就是向系统中加入一个这个产品类以及它所对应的工厂类。没有必要修改客户端，也没有必要修改抽象工厂角色或者其他已有的具体工厂角色。对于增加新的产品类而言，这个系统完全支持开闭原则。</p>
<hr>
<p>源码放百度网盘，有需要自己取，对应目录如下<br>simplefactory：简单工厂模式<br>methodFactory：工厂方法模式<br>AbstractFactory：抽象工厂模式<br>链接：<a href="http://pan.baidu.com/s/1kUNygBl" target="_blank" rel="external">http://pan.baidu.com/s/1kUNygBl</a><br>密码：vc9f</p>
<hr>
<p>最近撸了个java的公众号，学习资源超级多，视频，电子书，最新开发工具一个都不能少，已全部分享到百度云盘，求资源共享，打造一个学习方便，工作方便的java公众号，开源开源，有需求的可以关注~撒花<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/javaLearn.PNG" alt=""></p>
]]></content>
      
        <categories>
            
            <category> 设计模式 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[设计模式干货系列：（一）简单工厂模式【学习难度：★★☆☆☆，使用频率：★★★☆☆】]]></title>
      <url>http://tengj.top/2016/04/02/sjms1simpleFactory/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>面对设计模式这个高大上的敌人，如何找到一个脆弱可以下手的地方尤其重要，经过参考《JAVA与模式》后发现最容易下手但又及其重要的模式，那就是<code>简单工厂模式</code>，书里是这么介绍的：<code>简单工厂模式</code>是最简单的模式，有助于引出<code>工厂方法模式</code>，而<code>工厂方法模式</code>在后面的许多模式都有应用，它在模式的讨论里屡见不鲜。了解<code>工厂方法模式</code>是了解所有模式的起点。看了这段话，我热血澎湃，这么脆弱又及其重要的模式不打你打谁。</p>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>介绍简单工厂模式之前先通过一个披萨项目的例子来引出问题，然后给出简单工厂模式这种解决方案，然后随着披萨项目的不断扩展，遇到新的问题，引出工厂方法模式，然后又遇到新的问题，引出最终解决方案，抽象工厂模式。</p>
<h2 id="披萨项目介绍"><a href="#披萨项目介绍" class="headerlink" title="披萨项目介绍"></a>披萨项目介绍</h2><p>比如一个披萨店 ，店长一名，目前卖两种口味披萨，<code>GreekPizza</code>和<code>CheesePizza</code>，每个披萨都有<code>prePare()</code>,<code>bake()</code>,<code>cut()</code>,<code>box()</code>这4种步骤，原料，烘培，切割，打包，最后给用户吃。<br>把上述这个过程抽象后，设计如下：<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/sjms1_1.png" alt=""></p>
<p><strong>Pizza披萨抽象类</strong>:  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Pizza</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">bake</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">cut</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">box</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>GreekPizza披萨类</strong>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GreekPizza</span>  <span class="keyword">extends</span> <span class="title">Pizza</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span></span>&#123;</span><br><span class="line">       System.out.println(<span class="string">"准备GreekPizza~"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bake</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"正在烤GreekPizza~"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cut</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"正在切GreekPizza~"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">box</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"正在打包GreekPizza~"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>CheesePizza披萨类</strong>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheesePizza</span> <span class="keyword">extends</span> <span class="title">Pizza</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span></span>&#123;</span><br><span class="line">       System.out.println(<span class="string">"准备CheesePizza~"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bake</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"正在烤CheesePizza~"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cut</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"正在切CheesePizza~"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">box</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"正在打包CheesePizza~"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>客户端</strong>,店长根据客户点的餐生成不同的披萨：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">Pizza pizza;</span><br><span class="line"><span class="keyword">if</span>(<span class="string">"cheese"</span>.equal(orderType)) pizza = <span class="keyword">new</span> CheesePizza();</span><br><span class="line"><span class="keyword">if</span>(<span class="string">"greek"</span>.equal(orderType)) pizza = <span class="keyword">new</span> GreekPizza();</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>业务很简答，根据用户想买的披萨，生成不同的披萨。<br>传统的设置这样也没错，如果业务发展，会造成什么问题呢？<br>现在如果多了一种口味 <code>qiaokeliPizza</code>，正常办法是生成一个<code>QiaokeliPizza</code>类，继承于<code>Pizza</code>，然后在<code>OrderPizza</code>中，添加<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="string">"qiaokeli"</span>.equal(orderType)) pizza = <span class="keyword">new</span> QiaokeliPizza();</span><br></pre></td></tr></table></figure></p>
<p>如果后来披萨口味越来越多，负责点餐的店长会很不开心的，既要点餐又要做披萨，一个人忙不够来，希望请一个厨师来专门做披萨，那样他才会轻松点。<br>他所想的解决方案，简单工厂模式就可以做到。</p>
<h2 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h2><p>简单工厂模式是类的创建模式，又叫做静态工厂方法（<code>Static Factory Method</code>）模式。简单工厂模式是由一个工厂对象决定创建出哪一种产品类的实例。<br>简单工厂模式的结构如下：  </p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/sjms1_2.png" alt="">  </p>
<p>从图中可以看出，简单工厂模式涉及到工厂角色，抽象产品角色以及具体产品角色等三个角色：</p>
<ul>
<li>工厂类（<code>Factory</code>）角色：担任这个角色的是工厂方法模式的核心，含有与应用紧密相关的商业逻辑。</li>
<li>抽象产品（<code>Product</code>）角色：担任这个角色的类是由工厂方法模式所创建的对象的父类，或它们共同拥有的接口，这里指的就是<code>Pizza</code>这个类。</li>
<li>具体产品（<code>Concrete Product</code>）角色：工厂方法模式所创建的任务对象都是这个角色的实例，这里指<code>GreekPizza</code>和<code>CheesePizza</code>。  </li>
</ul>
<p>把上面的披萨项目用简单工厂模式来现实的话，无非就是创建一个工厂类（厨师）来接管店长之前要做得烤披萨的活，而店长只要告诉这个工厂类（厨师）他需要哪种披萨就好。<br><strong> 代码示例讲解 </strong>：<br>SimplePizzaFactory简单工厂类，根据传递的参数来准备不同的披萨：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimplePizzaFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Pizza <span class="title">CreatePizza</span><span class="params">(String orderType)</span></span>&#123;</span><br><span class="line">        Pizza pizza = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (orderType.equals(<span class="string">"cheese"</span>)) &#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> CheesePizza();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (orderType.equals(<span class="string">"greek"</span>)) &#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> GreekPizza();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pizza;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在使用时,店长只需要调用工厂类SimplePizzaFactory的静态方法CreatePizza()即可：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">Pizza pizza;</span><br><span class="line">pizza=SimplePizzaFactory.CreatePizza(<span class="string">"cheese"</span>);</span><br><span class="line">pizza=SimplePizzaFactory.CreatePizza(<span class="string">"greek"</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样设计后，店长就轻松多了，只要负责告诉工厂类（厨师）需要什么类型的披萨就可以，终于不要担心搞错了而负责任。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>上面用披萨项目的列子来讲解了简单工厂模式的使用，总结下优缺点：<br><strong> 简单工厂模式的优点：</strong><br>模式的核心是工厂类。这个类含有必要的判断逻辑，可以决定在什么时候创建哪一个产品类的实例。而客户端则可以免除直接创建对象的责任（比如那个服务员）。简单工厂模式通过这种做法实现了对责任的分割。  </p>
<p><strong> 简单工厂模式的缺点：</strong><br>这个工厂类集中了所以的创建逻辑，当有复杂的多层次等级结构时，所有的业务逻辑都在这个工厂类中实现。什么时候它不能工作了，整个系统都会受到影响。并且简单工厂模式违背了<strong>开闭原则</strong>（对扩展的开放，对修改的关闭）。  </p>
<p><strong> 适用场景：</strong><br> 在以下情况下可以考虑使用简单工厂模式：</p>
<ol>
<li>工厂类负责创建的对象比较少，由于创建的对象较少，不会造成工厂方法中的业务逻辑太过复杂。</li>
<li>客户端只知道传入工厂类的参数，对于如何创建对象并不关心。</li>
</ol>
<hr>
<p>源码放百度网盘，有需要自己取，对应目录如下<br>simplefactory：简单工厂模式<br>methodFactory：工厂方法模式<br>AbstractFactory：抽象工厂模式<br>链接：<a href="http://pan.baidu.com/s/1kUNygBl" target="_blank" rel="external">http://pan.baidu.com/s/1kUNygBl</a><br>密码：vc9f</p>
<hr>
<p>最近撸了个java的公众号，学习资源超级多，视频，电子书，最新开发工具一个都不能少，已全部分享到百度云盘，求资源共享，打造一个学习方便，工作方便的java公众号，开源开源，有需求的可以关注~撒花<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/javaLearn.PNG" alt=""></p>
]]></content>
      
        <categories>
            
            <category> 设计模式 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[设计模式干货系列：（总纲）总体介绍设计模式]]></title>
      <url>http://tengj.top/2016/04/01/sjmstotal/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>入行<code>java</code>几年，一直不敢尝试学习设计模式，总感觉自己能力不行，不敢接触这么高深的东西。这次难得的机会，参加了一场公司的培训，接触到设计模式，听过后发现其实设计模式也不是那样高深和难以理解，实际开发中其实都不由自主用到了。这次开篇，一是整理自己学习过程中的笔记，准备一天一个模式的分享；二是给自己压力和动力，希望自己坚持下来。后续博文皆是学习的整理笔记。没办法，人丑就要读书。</p>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="设计模式简介"><a href="#设计模式简介" class="headerlink" title="设计模式简介"></a>设计模式简介</h2><p>设计模式（<code>Design pattern</code>）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。</p>
<p>设计模式是一套被反复使用的、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是为了重用代码、让代码更容易被他人理解、保证代码可靠性。 毫无疑问，设计模式于己于他人于系统都是多赢的，设计模式使代码编制真正工程化，设计模式是软件工程的基石，如同大厦的一块块砖石一样。项目中合理地运用设计模式可以完美地解决很多问题，每种模式在现实中都有相应的原理来与之对应，每种模式都描述了一个在我们周围不断重复发生的问题，以及该问题的核心解决方案，这也是设计模式能被广泛应用的原因。</p>
<h2 id="设计模式的六大原则"><a href="#设计模式的六大原则" class="headerlink" title="设计模式的六大原则"></a>设计模式的六大原则</h2><p><img src="http://7xqch5.com1.z0.glb.clouddn.com/sjms0_3.jpg" alt=""><br><strong>1、开闭原则（Open Close Principle）</strong></p>
<p>开闭原则的意思是：<strong>对扩展开放，对修改关闭</strong>。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。简言之，是为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类，后面的具体设计中我们会提到这点。</p>
<p><strong>2、里氏代换原则（Liskov Substitution Principle）</strong></p>
<p>里氏代换原则是面向对象设计的基本原则之一。 里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。LSP 是继承复用的基石，只有当派生类可以替换掉基类，且软件单位的功能不受到影响时，基类才能真正被复用，而派生类也能够在基类的基础上增加新的行为。里氏代换原则是对开闭原则的补充。实现开闭原则的关键步骤就是抽象化，而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。</p>
<p><strong>3、依赖倒转原则（Dependence Inversion Principle）</strong></p>
<p>这个原则是开闭原则的基础，具体内容：针对对接口编程，依赖于抽象而不依赖于具体。</p>
<p><strong>4、接口隔离原则（Interface Segregation Principle）</strong></p>
<p>这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。它还有另外一个意思是：降低类之间的耦合度。由此可见，其实设计模式就是从大型软件架构出发、便于升级和维护的软件设计思想，它强调降低依赖，降低耦合。</p>
<p><strong>5、迪米特法则，又称最少知道原则（Demeter Principle）</strong></p>
<p>最少知道原则是指：一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立。</p>
<p><strong>6、合成复用原则（Composite Reuse Principle）</strong></p>
<p>合成复用原则是指：尽量使用合成/聚合的方式，而不是使用继承。</p>
<h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><p><img src="http://7xqch5.com1.z0.glb.clouddn.com/sjms0_1.png" alt="">  </p>
<p>学习顺序介绍：  </p>
<table>
<thead>
<tr>
<th style="text-align:center">学习顺序</th>
<th style="text-align:center">设计模式</th>
<th style="text-align:center">常用程度</th>
<th style="text-align:center">适用层次</th>
<th style="text-align:center">引入时机</th>
<th style="text-align:center">结构复杂度</th>
<th style="text-align:center">变化</th>
<th style="text-align:center">实现</th>
<th style="text-align:center">体现的原则</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">工厂模式（Factory Method）</td>
<td style="text-align:center">很常用</td>
<td style="text-align:center">代码级</td>
<td style="text-align:center">编码时</td>
<td style="text-align:center">简单</td>
<td style="text-align:center">子类的实例化</td>
<td style="text-align:center">对象的创建工作延迟到子类</td>
<td style="text-align:center">开闭原则</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">单例模式（Singleton）</td>
<td style="text-align:center">很常用</td>
<td style="text-align:center">代码级、应用级</td>
<td style="text-align:center">设计时、编码时</td>
<td style="text-align:center">简单</td>
<td style="text-align:center">唯一实例</td>
<td style="text-align:center">封装对象产生的个数</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">外观模式（Facade）</td>
<td style="text-align:center">很常用</td>
<td style="text-align:center">应用级、构架级</td>
<td style="text-align:center">设计时、编码时</td>
<td style="text-align:center">简单</td>
<td style="text-align:center">子系统的高层接口</td>
<td style="text-align:center">封装子系统</td>
<td style="text-align:center">开闭原则</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">模板模式（Template Method）</td>
<td style="text-align:center">很常用</td>
<td style="text-align:center">代码级</td>
<td style="text-align:center">编码时、重构时</td>
<td style="text-align:center">简单</td>
<td style="text-align:center">算法子步骤的变化</td>
<td style="text-align:center">封装算法结构</td>
<td style="text-align:center">依赖倒置原则</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">抽象工厂模式（Abstract Factory）</td>
<td style="text-align:center">比较常用</td>
<td style="text-align:center">应用级</td>
<td style="text-align:center">设计时</td>
<td style="text-align:center">比较复杂</td>
<td style="text-align:center">产品家族的扩展</td>
<td style="text-align:center">封装产品族系列内容的创建</td>
<td style="text-align:center">开闭原则</td>
</tr>
<tr>
<td style="text-align:center">6</td>
<td style="text-align:center">组合模式（Composite）</td>
<td style="text-align:center">比较常用</td>
<td style="text-align:center">代码级</td>
<td style="text-align:center">编码时、重构时</td>
<td style="text-align:center">比较复杂</td>
<td style="text-align:center">复杂对象接口的统一</td>
<td style="text-align:center">统一复杂对象的接口</td>
<td style="text-align:center">里氏代换原则</td>
</tr>
<tr>
<td style="text-align:center">7</td>
<td style="text-align:center">代理模式（Proxy）</td>
<td style="text-align:center">比较常用</td>
<td style="text-align:center">应用级、构架级</td>
<td style="text-align:center">设计时、编码时</td>
<td style="text-align:center">简单</td>
<td style="text-align:center">对象访问的变化</td>
<td style="text-align:center">封装对象的访问过程</td>
<td style="text-align:center">里氏代换原则</td>
</tr>
<tr>
<td style="text-align:center">8</td>
<td style="text-align:center">命令模式（Command）</td>
<td style="text-align:center">比较常用</td>
<td style="text-align:center">应用级</td>
<td style="text-align:center">设计时、编码时</td>
<td style="text-align:center">比较简单</td>
<td style="text-align:center">请求的变化</td>
<td style="text-align:center">封装行为对对象</td>
<td style="text-align:center">开闭原则</td>
</tr>
<tr>
<td style="text-align:center">9</td>
<td style="text-align:center">观察者模式（Observer）</td>
<td style="text-align:center">比较常用</td>
<td style="text-align:center">应用级、构架级</td>
<td style="text-align:center">设计时、编码时</td>
<td style="text-align:center">比较简单</td>
<td style="text-align:center">通讯对象的变化</td>
<td style="text-align:center">封装对象通知</td>
<td style="text-align:center">开闭原则</td>
</tr>
<tr>
<td style="text-align:center">10</td>
<td style="text-align:center">策略模式（Strategy）</td>
<td style="text-align:center">比较常用</td>
<td style="text-align:center">应用级</td>
<td style="text-align:center">设计时</td>
<td style="text-align:center">一般</td>
<td style="text-align:center">算法的变化</td>
<td style="text-align:center">封装算法</td>
<td style="text-align:center">里氏代换原则</td>
</tr>
<tr>
<td style="text-align:center">11</td>
<td style="text-align:center">建造者模式（Builder）</td>
<td style="text-align:center">一般</td>
<td style="text-align:center">代码级</td>
<td style="text-align:center">编码时</td>
<td style="text-align:center">一般</td>
<td style="text-align:center">对象组建的变化</td>
<td style="text-align:center">封装对象的组建过程</td>
<td style="text-align:center">开闭原则</td>
</tr>
<tr>
<td style="text-align:center">12</td>
<td style="text-align:center">适配器模式（Adapter）</td>
<td style="text-align:center">一般</td>
<td style="text-align:center">代码级</td>
<td style="text-align:center">重构时</td>
<td style="text-align:center">一般</td>
<td style="text-align:center">对象接口的变化</td>
<td style="text-align:center">接口的转换</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">13</td>
<td style="text-align:center">桥接模式（Bridge）</td>
<td style="text-align:center">一般</td>
<td style="text-align:center">代码级</td>
<td style="text-align:center">设计时、编码时</td>
<td style="text-align:center">一般</td>
<td style="text-align:center">对象的多维度变化</td>
<td style="text-align:center">分离接口以及实现</td>
<td style="text-align:center">开闭原则</td>
</tr>
<tr>
<td style="text-align:center">14</td>
<td style="text-align:center">装饰器模式（Decorator）</td>
<td style="text-align:center">一般</td>
<td style="text-align:center">代码级</td>
<td style="text-align:center">重构时</td>
<td style="text-align:center">比较复杂</td>
<td style="text-align:center">对象的组合职责</td>
<td style="text-align:center">在稳定接口上扩展</td>
<td style="text-align:center">开闭原则</td>
</tr>
<tr>
<td style="text-align:center">15</td>
<td style="text-align:center">迭代器模式（Iterator）</td>
<td style="text-align:center">一般</td>
<td style="text-align:center">代码级、应用级</td>
<td style="text-align:center">编码时、重构时</td>
<td style="text-align:center">比较简单</td>
<td style="text-align:center">对象内部集合的变化</td>
<td style="text-align:center">封装对象内部集合的使用</td>
<td style="text-align:center">单一职责原则</td>
</tr>
<tr>
<td style="text-align:center">16</td>
<td style="text-align:center">中介者模式（Mediator）</td>
<td style="text-align:center">一般</td>
<td style="text-align:center">应用级、构架级</td>
<td style="text-align:center">编码时、重构时</td>
<td style="text-align:center">一般</td>
<td style="text-align:center">对象交互的变化</td>
<td style="text-align:center">封装对象间的交互</td>
<td style="text-align:center">开闭原则</td>
</tr>
<tr>
<td style="text-align:center">17</td>
<td style="text-align:center">备忘录模式（Memento）</td>
<td style="text-align:center">一般</td>
<td style="text-align:center">代码级</td>
<td style="text-align:center">编码时</td>
<td style="text-align:center">比较简单</td>
<td style="text-align:center">状态的辅助保存</td>
<td style="text-align:center">封装对象状态的变化</td>
<td style="text-align:center">接口隔离原则</td>
</tr>
<tr>
<td style="text-align:center">18</td>
<td style="text-align:center">状态模式（State）</td>
<td style="text-align:center">一般</td>
<td style="text-align:center">应用级</td>
<td style="text-align:center">设计时、编码时</td>
<td style="text-align:center">一般</td>
<td style="text-align:center">对象状态的变化</td>
<td style="text-align:center">封装与状态相关的行为</td>
<td style="text-align:center">单一职责原则</td>
</tr>
<tr>
<td style="text-align:center">19</td>
<td style="text-align:center">访问者模式（Visitor）</td>
<td style="text-align:center">一般</td>
<td style="text-align:center">应用级</td>
<td style="text-align:center">设计时</td>
<td style="text-align:center">比较复杂</td>
<td style="text-align:center">对象操作变化</td>
<td style="text-align:center">封装对象操作变化</td>
<td style="text-align:center">开闭原则</td>
</tr>
<tr>
<td style="text-align:center">20</td>
<td style="text-align:center">原型模式（Prototype）</td>
<td style="text-align:center">不太常用</td>
<td style="text-align:center">应用级</td>
<td style="text-align:center">编码时、重构时</td>
<td style="text-align:center">比较简单</td>
<td style="text-align:center">实例化的类</td>
<td style="text-align:center">封装对原型的拷贝</td>
<td style="text-align:center">依赖倒置原则</td>
</tr>
<tr>
<td style="text-align:center">21</td>
<td style="text-align:center">享元模式（Flyweight）</td>
<td style="text-align:center">不太常用</td>
<td style="text-align:center">代码级、应用级</td>
<td style="text-align:center">设计时</td>
<td style="text-align:center">一般</td>
<td style="text-align:center">系统开销的优化</td>
<td style="text-align:center">封装对象的获取</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">22</td>
<td style="text-align:center">责任链模式（Chain of Resp）</td>
<td style="text-align:center">不太常用</td>
<td style="text-align:center">应用级、构架级</td>
<td style="text-align:center">设计时、编码时</td>
<td style="text-align:center">比较复杂</td>
<td style="text-align:center">对象的请求过程</td>
<td style="text-align:center">封装对象的责任范围</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">23</td>
<td style="text-align:center">解释器模式（Interpreter）</td>
<td style="text-align:center">不太常用</td>
<td style="text-align:center">应用级</td>
<td style="text-align:center">设计时</td>
<td style="text-align:center">比较复杂</td>
<td style="text-align:center">领域问题的变化</td>
<td style="text-align:center">封装特定领域的变化</td>
</tr>
</tbody>
</table>
<p>下面用一个图片来整体描述一下设计模式之间的关系：<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/sjms0_2.jpg" alt="设计模式之间的关系"></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>以上就是设计模式的大体介绍，是不是很乱，很迷糊。嘿嘿嘿嘿，我其实也不懂。但是没关系，把目标放小，一天就研究一个模式就行。顺序就按照创建模式,结构模式，行为模式学习下来，掐指一算加上现在这个开天辟地的立志贴，最后洋洋洒洒能产出24篇博文来。妈妈再也不用担心我博客内容太少了。</p>
<hr>
<p>最近撸了个java的公众号，学习资源超级多，视频，电子书，最新开发工具一个都不能少，已全部分享到百度云盘，求资源共享，打造一个学习方便，工作方便的java公众号，开源开源，有需求的可以关注~撒花<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/javaLearn.PNG" alt=""></p>
]]></content>
      
        <categories>
            
            <category> 设计模式 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[git干货系列：（六）公司内部搭建git服务器]]></title>
      <url>http://tengj.top/2016/03/29/git6gitlab/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>因为<code>gitHub</code>上的项目是公开的，不适合公司内部项目放在上面，而私人的需要收费，这绝非是我们愿意的。所以找了个跟<code>gitHub</code>很相似，但是又免费的<code>gitLab</code>。现在将搭建<code>gitLab</code>过程记录一下留作参考。</p>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="gitLab介绍"><a href="#gitLab介绍" class="headerlink" title="gitLab介绍"></a>gitLab介绍</h2><p><a href="https://about.gitlab.com/" target="_blank" rel="external">GitLab</a>是利用 <code>Ruby on Rails</code> 一个开源的版本管理系统，实现一个自托管的Git项目仓库，可通过Web界面进行访问公开的或者私人项目。它拥有与Github类似的功能，能够浏览源代码，管理缺陷和注释。可以管理团队对仓库的访问，它非常易于浏览提交过的版本并提供一个文件历史库。团队成员可以利用内置的简单聊天程序(Wall)进行交流。它还提供一个代码片段收集功能可以轻松实现代码复用，便于日后有需要的时候进行查找。  </p>
<p>依赖组件：ruby 1.9.3+，MySQL，git，redis， Sidekiq。<br>最低配置CPU 1G，RAM 1G+swap可以支持100用户。</p>
<h2 id="先连接SSH"><a href="#先连接SSH" class="headerlink" title="先连接SSH"></a>先连接SSH</h2><p>首先要确定<code>ubuntu</code>上安装并且启动了<code>ssh</code>服务,然后还要确保<code>linux</code>系统上的防火墙要关闭,<code>win8</code>的防火墙可以正常开启<br><code>SSH</code>(仿真终端工具有PUTTY，SecureCRT 以及Fterm等）可以<code>google</code>下载的了.<br>步骤:<br>1, 有人说首先要在<code>Virtual Network Editor</code>做<code>NAT</code>的端口映射,其实是不需要的;<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps <span class="operator">-e</span>|grep ssh</span><br></pre></td></tr></table></figure></p>
<p>如果结果中只有<code>ssh-agent</code>,那说明<code>ssh-server</code>还没有启动,一般<code>ubuntu</code>是默认安装<code>ssh</code>的,要是没有安装,可以通过<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install openssh-server</span><br></pre></td></tr></table></figure></p>
<p>安装ssh服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /etc/init.d/ssh start</span><br></pre></td></tr></table></figure></p>
<p>启动ssh服务</p>
<h2 id="初始化root密码"><a href="#初始化root密码" class="headerlink" title="初始化root密码"></a>初始化root密码</h2><p><code>ubuntn</code>刚安装时候<code>root</code>还没有密码，设置一个，使用命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo passwd</span><br></pre></td></tr></table></figure></p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/git6_1.png" alt=""></p>
<h2 id="安装gitlib整合包"><a href="#安装gitlib整合包" class="headerlink" title="安装gitlib整合包"></a>安装gitlib整合包</h2><p><a href="https://about.gitlab.com/downloads/" target="_blank" rel="external">官方有安装包</a>与脚本下载，<a href="https://about.gitlab.com/installation/" target="_blank" rel="external">官方安装指南</a>。同样GITHUB上有个社区非官方的<a href="https://github.com/gitlabhq/gitlab-recipes" target="_blank" rel="external">安装指南</a>。<br>但这儿里推荐<code>bitnami</code>下载打包安装版本 <a href="https://bitnami.com/stack/gitlab/installer" title="https://bitnami.com/stack/gitlab/installer" target="_blank" rel="external">https://bitnami.com/stack/gitlab/installer</a> ,省去很多时间。他们也提供相关<a href="http://wiki.bitnami.com/Applications/BitNami_GitLab" target="_blank" rel="external">WIKI</a><br>以<a href="http://www.ubuntu.com/download/" target="_blank" rel="external">ubuntu</a>为演示环境，来安装这个包，切换到<code>root</code>账户, 在终端运行：<br>如果没有权限，先授权账号：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod <span class="number">777</span> bitnami-gitlab-<span class="number">8.5</span>.<span class="number">7</span>-<span class="number">0</span>-linux-x64-installer.run</span><br></pre></td></tr></table></figure></p>
<p>然后切换<code>root</code>用户执行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bitnami-gitlab-<span class="number">8.5</span>.<span class="number">7</span>-<span class="number">0</span>-linux-x64-installer.run</span><br></pre></td></tr></table></figure></p>
<p>执行后就会弹出图形化界面，一步步确认就行，如下图<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/git6_2.jpg" alt="">  </p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/git6_3.jpg" alt="">  </p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/git6_4.jpg" alt="">  </p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/git6_5.jpg" alt="">  </p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/git6_6.jpg" alt="">  </p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/git6_7.jpg" alt="">  </p>
<h2 id="启动命令"><a href="#启动命令" class="headerlink" title="启动命令"></a>启动命令</h2><p>第一次安装好了就默认启动了<code>gitlab</code>，如果要手动启动的话有两种办法<br>1.找到安装好的路径<code>/opt/gitlab-8.5.7-0</code><br>需要<code>root</code>权限执行命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo ./ctlscript.sh start</span><br><span class="line">```  </span><br><span class="line">![](http://<span class="number">7</span>xqch5.com1.z0.glb.clouddn.com/git6_8.png)  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>.也可以查看`GUI`管理控制台，在`Manage Servers中`选择`Start All`启动所有</span><br><span class="line">``` bash</span><br><span class="line">sudo ./manager-linux-x64.run</span><br></pre></td></tr></table></figure></p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/git6_9.png" alt=""></p>
<h2 id="登陆系统"><a href="#登陆系统" class="headerlink" title="登陆系统"></a>登陆系统</h2><p>启动后，就可以访问系统页面了，这里先通过ifconfig命令获取当前的ip地址<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/git6_10.png" alt=""><br>我的是<code>192.168.153.128</code>，于是就可以在外面<code>window</code>系统浏览器访问  </p>
<p><a href="http://192.168.153.128/users/sign_in" target="_blank" rel="external">http://192.168.153.128/users/sign_in</a>  </p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/git6_11.png" alt="">  </p>
<p>使用我之前配置的<code>git</code>登陆,我之前安装的时候配置的管理员账号是<code>git</code>,密码12345678，<br>这里我登陆后发现跳转到<code>404</code>页面，把地址<code>http://192.168.153.128/users/sign_in</code><br>后面的<code>users/sign_in</code>删掉回车就行,就去后界面如下：  </p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/git6_12.png" alt="">  </p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/git6_13.png" alt=""></p>
<h2 id="创建项目前的设置"><a href="#创建项目前的设置" class="headerlink" title="创建项目前的设置"></a>创建项目前的设置</h2><p>如果你是自己一个人玩就直接创建项目即可，因为我这边是给团队使用的，所以需要创建一下用户组，以及添加组成员，配置权限等，下面来介绍这些配置</p>
<h2 id="配置服务器邮件"><a href="#配置服务器邮件" class="headerlink" title="配置服务器邮件"></a>配置服务器邮件</h2><p>添加人员或者自己注册的时候需要发邮件激活，所以要先配置服务器，我在<code>bitnami</code>提供的<a href="https://wiki.bitnami.com/Applications/BitNami_GitLab#How_to_configure_the_email_settings_of_GitLab.3f" target="_blank" rel="external">wiki</a>里面找到了办法，原文如下：</p>
<blockquote>
<p> <em>How to configure the email settings of GitLab?</em><br>You can configure the SMTP settings during the installation process. If you are using the Virtual Machine or AMI, you can configure it manually. For example, these are the options to configure it using a GMail account:<br>/opt/bitnami/apps/gitlab/htdocs/config/environments/production.rb<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">config.action_mailer.raise_delivery_errors = <span class="literal">true</span></span><br><span class="line">config.action_mailer.delivery_method = :smtp   </span><br><span class="line">config.action_mailer.perform_deliveries = <span class="literal">true</span></span><br><span class="line">config.action_mailer.smtp_settings = &#123;</span><br><span class="line">:address =&gt; <span class="string">"smtp.gmail.com"</span>,</span><br><span class="line">:port =&gt; <span class="number">587</span>,</span><br><span class="line">:domain =&gt; <span class="string">"gmail.com"</span>,</span><br><span class="line">:authentication =&gt; :plain,</span><br><span class="line">:user_name =&gt; <span class="string">"your_account@gmail.com"</span>,</span><br><span class="line">:，password =&gt; <span class="string">"your_password"</span>,</span><br><span class="line">:<span class="built_in">enable</span>_starttls_auto =&gt; <span class="literal">true</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
</blockquote>
<p>简单的说就是修改<code>/opt/bitnami/apps/gitlab/htdocs/config/environments/production.rb</code>文件，里面的内容，<code>address</code>，<code>domain</code>，<code>user_name</code>，<code>password</code>这几个配置成你自己的邮箱，记得你的邮箱必须要支持<code>smtp</code>。<code>port</code>端口我默认也是587，不需要修改。<br>配置好了邮箱，就要测试一下，我们在<code>http://192.168.153.128/users/sign_in</code> 首页，注册一个额用户，然后我收到邮件激活，然后就可以登陆系统了。<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/git6_141.png" alt="">  </p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/git6_15.jpg" alt="">  </p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/git6_16.png" alt="">  </p>
<p>可以看到，非管理员登陆右上角就没有<code>Admin Area</code>功能</p>
<h2 id="创建小组，添加组内成员"><a href="#创建小组，添加组内成员" class="headerlink" title="创建小组，添加组内成员"></a>创建小组，添加组内成员</h2><p>让组内成员自己注册账号激活后，我们就准备创建小组了，创建小组是为了方便管理，创建项目的时候直接指定小组，这样小组内的成员都可以看到项目  </p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/git6_17.png" alt="">  </p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/git6_18.png" alt="">  </p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/git6_19.png" alt="">  </p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/git6_20.png" alt="">  </p>
<h2 id="新增项目"><a href="#新增项目" class="headerlink" title="新增项目"></a>新增项目</h2><p>小组创建好了就可以新增一个项目了,这里创建的时候选择<code>edw</code>这个创建好的小组，并且项目宣称<code>private</code>私有项目。这样只有小组内的成员可以下载这个项目  </p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/git6_21.png" alt="">  </p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/git6_22.png" alt="">  </p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/git6_23.png" alt="">  </p>
<h2 id="配置SSH-key"><a href="#配置SSH-key" class="headerlink" title="配置SSH key"></a>配置SSH key</h2><p>这里切换到<code>tengj</code>用户登陆，发现已经有了<code>springmvctouchbaidu</code>项目  </p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/git6_24.png" alt=""><br>但是要下载到本地还需要配置<code>SSH key</code>,复制我们本地<code>\.ssh\id_rsa.pub</code>的内容黏贴到下面图中指定的即可。  </p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/git6_25.png" alt=""></p>
<h2 id="远程下载项目"><a href="#远程下载项目" class="headerlink" title="远程下载项目"></a>远程下载项目</h2><p>这里模拟<code>tengj</code>下载远程项目，在这之前我已经用管理员账号把项目传上去了，如图  </p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/git6_26.png" alt="">  </p>
<p>指定一个目录存放该项目，执行<code>git clone</code>命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone git@192.168.153.128:edw/springmvctouchbaidu.git&#10;Cloning into &#39;springmvctouchbaidu&#39;...&#10;The authenticity of host &#39;192.168.153.128 (192.168.153.128)&#39; can&#39;t be established.&#10;ECDSA key fingerprint is SHA256:1SgfW1DLmaZ9m/E82vVtWjBK1AaP+LMW5U4ng8nv6uE.&#10;Are you sure you want to continue connecting (yes/no)? yes&#10;Warning: Permanently added &#39;192.168.153.128&#39; (ECDSA) to the list of known hosts.&#10;remote: &#23545;&#35937;&#35745;&#25968;&#20013;: 339, &#23436;&#25104;.&#10;remote: &#21387;&#32553;&#23545;&#35937;&#20013;: 100% (242/242), &#23436;&#25104;.&#10;remote: Total 339 (delta 68), reused 339 (delta 68)&#10;Receiving objects: 100% (339/339), 12.97 MiB | 14.44 MiB/s, done.&#10;Resolving deltas: 100% (68/68), done.&#10;Checking connectivity... done.</span><br></pre></td></tr></table></figure></p>
<p>搞定，下载下来了。</p>
<h2 id="配置权限"><a href="#配置权限" class="headerlink" title="配置权限"></a>配置权限</h2><p>前面文章也说过，一般一个实际项目中<code>master</code>用来版本发布，一般不在这个分支上开发，所以除了<code>git</code>管理员用户可以提交代码到<code>master</code>外，其他组成员只能<code>push</code>代码到<code>dev</code>这个分支。<br>比如我添加<code>tengj</code>用户的时候选择的是<code>Developer</code>角色，只要在<code>Protected Branches</code>中这个勾不够上就行了。这样开发人员就无法<code>push</code>代码到<code>master</code>分支上。<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/git6_27.png" alt="">  </p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/git6_28.png" alt="">  </p>
<p>下面模拟一下tengj用户提交代码：  </p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/git6_29.png" alt="">  </p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>ok，花了三天时间终于搞定了，截图还是蛮累人的哈哈，算是比较详细的记录了我这次安装<code>gitlab</code>的过程，个人感觉比网络上的文章调理清晰多了。一开始查资料快累死了。希望对你有所帮助。</p>
<hr>
<p> 最近撸了个java的公众号，学习资源超级多，视频，电子书，最新开发工具一个都不能少，已全部分享到百度云盘，求资源共享，打造一个学习方便，工作方便的java公众号，开源开源，有需求的可以关注~撒花<br> <img src="http://7xqch5.com1.z0.glb.clouddn.com/javaLearn.PNG" alt=""></p>
]]></content>
      
        <categories>
            
            <category> git </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[git干货系列：（五）多人协同工作之分支管理]]></title>
      <url>http://tengj.top/2016/03/27/git5branch/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>分支就是科幻电影里面的平行宇宙，当你正在电脑前努力学习<code>Git</code>的时候，另一个你正在另一个平行宇宙里努力学习<code>SVN</code>。如果两个平行宇宙互不干扰，那对现在的你也没啥影响。不过，在某个时间点，两个平行宇宙合并了，结果，你既学会了<code>Git</code>又学会了<code>SVN</code>！<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/git5_14.png" alt=""></p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h2 id="分支简介"><a href="#分支简介" class="headerlink" title="分支简介"></a>分支简介</h2><p>为了真正理解 <code>Git</code> 处理分支的方式，我们需要回顾一下<code>Git</code>是如何保存数据的。<br>Git 保存的不是文件的变化或者差异，而是一系列不同时刻的文件快照。在进行提交操作时，<code>Git</code>会保存一个提交对象（<code>commit object</code>）。知道了<code>Git</code>保存数据的方式，我们可以很自然的想到——该提交对象会包含一个指向暂存内容快照的指针。 但不仅仅是这样，该提交对象还包含了作者的姓名和邮箱、提交时输入的信息以及指向它的父对象的指针。首次提交产生的提交对象没有父对象，普通提交操作产生的提交对象有一个父对象，而由多个分支合并产生的提交对象有多个父对象。  </p>
<p><code>Git</code>的分支，其实本质上仅仅是指向提交对象的可变指针。 <code>Git</code>的默认分支名字是 <code>master</code>。 在多次提交操作之后，你其实已经有一个指向最后那个提交对象的 <code>master</code> 分支。 它会在每次的提交操作中自动向前移动。  </p>
<blockquote>
<p><code>Git</code> 的 “master” 分支并不是一个特殊分支。它就跟其它分支完全没有区别。 之所以几乎每一个仓库&gt; 都有 master 分支，是因为 <code>git init</code> 命令默认创建它，并且大多数人都懒得去改动它。</p>
</blockquote>
<p>分支在实际中有什么用呢？假设你准备开发一个新功能，但是需要两周才能完成，第一周你写了50%的代码，如果立刻提交，由于代码还没写完，不完整的代码库会导致别人不能干活了。如果等代码全部写完再一次提交，又存在丢失每天进度的巨大风险。<br>现在有了分支，就不用怕了。你创建了一个属于你自己的分支，别人看不到，还继续在原来的分支上正常工作，而你在自己的分支上干活，想提交就提交，直到开发完毕后，再一次性合并到原来的分支上，这样，既安全，又不影响别人工作。<br>其他版本控制系统如SVN等都有分支管理，但是用过之后你会发现，这些版本控制系统创建和切换分支比蜗牛还慢，简直让人无法忍受，结果分支功能成了摆设，大家都不去用。<br>但<code>Git</code>的分支是与众不同的，无论创建、切换和删除分支，<code>Git</code>在1秒钟之内就能完成！无论你的版本库是1个文件还是1万个文件。</p>
<h2 id="分支创建"><a href="#分支创建" class="headerlink" title="分支创建"></a>分支创建</h2><p><code>Git</code>是怎么创建新分支的呢？ 很简单，它只是为你创建了一个可以移动的新的指针。 比如，创建一个 <code>testing</code>分支， 你需要使用 <code>git branch</code> 命令：  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch testing</span><br></pre></td></tr></table></figure>
<p>这会在当前所在的提交对象上创建一个指针。  </p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/git5_1.png" alt="两个指向相同提交历史的分支。">  </p>
<p>那么，<code>Git</code>又是怎么知道当前在哪一个分支上呢？ 也很简单，它有一个名为 <code>HEAD</code> 的特殊指针。 请注意它和许多其它版本控制系统（如 Subversion 或 CVS）里的 <code>HEAD</code> 概念完全不同。 在 <code>Git</code>中，它是一个指针，指向当前所在的本地分支（译注：将 <code>HEAD</code> 想象为当前分支的别名）。 在本例中，你仍然在<code>master</code> 分支上。 因为 <code>git branch</code> 命令仅仅 <em>创建</em> 一个新分支，并不会自动切换到新分支中去。  </p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/git5_2.png" alt="HEAD 指向当前所在的分支.">  </p>
<p>你可以简单地使用 <code>git log</code> 命令查看各个分支当前所指的对象。 提供这一功能的参数是 <code>--decorate</code>。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --oneline --decorate</span><br><span class="line">f30ab (HEAD, master, testing) add feature <span class="comment">#32 - ability to add new</span></span><br><span class="line"><span class="number">34</span>ac2 fixed bug <span class="comment">#1328 - stack overflow under certain conditions</span></span><br><span class="line"><span class="number">98</span>ca9 initial commit of my project</span><br></pre></td></tr></table></figure>
<p>正如你所见，当前 “master” 和 “testing” 分支均指向校验和以 <code>f30ab</code> 开头的提交对象。</p>
<h2 id="分支切换"><a href="#分支切换" class="headerlink" title="分支切换"></a>分支切换</h2><p>要切换到一个已存在的分支，你需要使用<code>git checkout</code>命令。 我们现在切换到新创建的 <code>testing</code> 分支去：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout testing</span><br></pre></td></tr></table></figure></p>
<p>这样 <code>HEAD</code> 就指向 <code>testing</code> 分支了。<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/git5_3.png" alt="HEAD 指向当前所在的分支."></p>
<p>上面的创建分支和切换分支命令可以合起来用下面这个命令来替代。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b testing</span><br></pre></td></tr></table></figure></p>
<p>那么，这样的实现方式会给我们带来什么好处呢？ 现在不妨再提交一次：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ vim test.rb</span><br><span class="line">$ git commit <span class="operator">-a</span> -m <span class="string">'made a change'</span></span><br></pre></td></tr></table></figure></p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/git5_4.png" alt="HEAD 分支随着提交操作自动向前移动."><br>如图所示，你的 <code>testing</code> 分支向前移动了，但是 <code>master</code> 分支却没有，它仍然指向运行 <code>git checkout</code> 时所指的对象。 这就有意思了，现在我们切换回 <code>master</code> 分支看看：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout master</span><br></pre></td></tr></table></figure></p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/git5_6.png" alt="检出时 HEAD 随之移动."><br>这条命令做了两件事。 一是使 HEAD 指回 <code>master</code> 分支，二是将工作目录恢复成 <code>master</code> 分支所指向的快照内容。 也就是说，你现在做修改的话，项目将始于一个较旧的版本。 本质上来讲，这就是忽略<code>testing</code> 分支所做的修改，以便于向另一个方向进行开发。<br>可以使用 <code>git branch</code>命令查看当前分支，注意前面带<code>*</code>的表示当前分支<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/git5_13.png" alt=""></p>
<hr>
<blockquote>
<p><strong>Note</strong><br><strong>分支切换会改变你工作目录中的文件</strong><br>在切换分支时，一定要注意你工作目录里的文件会被改变。 如果是切换到一个较旧的分支，你的工作目&gt; 录会恢复到该分支最后一次提交时的样子。 如果<code>Git</code>不能干净利落地完成这个任务，它将禁止切换分支。</p>
</blockquote>
<h2 id="合并分支（快速合并）"><a href="#合并分支（快速合并）" class="headerlink" title="合并分支（快速合并）"></a>合并分支（快速合并）</h2><p>假如我们在<code>testing</code>上的工作完成了，就可以把<code>testing</code>合并到<code>master</code>上。<code>Git</code>怎么合并呢？最简单的方法，就是直接把<code>master</code>指向<code>testing</code>的当前提交，就完成了合并，这里你需要使用<code>git merge</code>命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git merge testing</span><br><span class="line">Updating <span class="number">64</span>ba18a..<span class="number">760118</span>b</span><br><span class="line">Fast-forward</span><br><span class="line"> hello.txt | <span class="number">1</span> +</span><br><span class="line"> <span class="number">1</span> file changed, <span class="number">1</span> insertion(+)</span><br><span class="line"> create mode <span class="number">100644</span> hello.txt</span><br></pre></td></tr></table></figure></p>
<p><code>git merge</code>命令用于合并指定分支到当前分支。合并后，再查看内容，就可以看到，和<code>testing</code>分支的最新提交是完全一样的。<br>注意到上面的<code>Fast-forward</code>信息，<code>Git</code>告诉我们，这次合并是“快进模式”，也就是直接把<code>master</code>指向<code>testing</code>的当前提交，所以合并速度非常快。<br>当然，也不是每次合并都能<code>Fast-forward</code>，我们后面会讲其他方式的合并。<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/git5_7.png" alt=""></p>
<h2 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h2><p>合并完分支后，甚至可以删除<code>dev</code>分支。删除<code>dev</code>分支就是把<code>dev</code>指针给删掉，删掉后，我们就剩下了一条<code>master</code>分支,这里需要使用<code>git branch -d</code>命令来删除分支<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git branch <span class="operator">-d</span> testing</span><br><span class="line">Deleted branch testing (was <span class="number">760118</span>b).</span><br></pre></td></tr></table></figure></p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/git5_8.png" alt=""></p>
<h2 id="分支合并冲突"><a href="#分支合并冲突" class="headerlink" title="分支合并冲突"></a>分支合并冲突</h2><p>人生不如意之事十之八九，合并分支往往也不是一帆风顺的。<br>准备新的<code>dev</code>分支，继续我们的新分支开发：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b dev</span><br><span class="line">Switched to a new branch <span class="string">'dev'</span></span><br></pre></td></tr></table></figure></p>
<p>修改<code>README.md</code>内容，添加一样内容”day day up~”，在<code>dev</code>分支上提交：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -am <span class="string">"one commit"</span></span><br><span class="line">[dev <span class="number">6</span>a6a08e] one commit</span><br><span class="line"> <span class="number">1</span> file changed, <span class="number">1</span> insertion(+)</span><br></pre></td></tr></table></figure></p>
<p>切换到<code>master</code>分支：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout master</span><br><span class="line">Switched to branch <span class="string">'master'</span></span><br><span class="line">Your branch is up-to-date with <span class="string">'origin/master'</span>.</span><br></pre></td></tr></table></figure></p>
<p><code>Git</code>还会自动提示我们当前<code>master</code>分支比远程的<code>master</code>分支要超前1个提交。<br>在<code>master</code>分支上把<code>README.md</code>文件的最后改为 <code>good good study</code>,然后提价<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -am <span class="string">"two commit"</span></span><br><span class="line">[master <span class="number">75</span>d6f25] two commit</span><br><span class="line"> <span class="number">1</span> file changed, <span class="number">1</span> insertion(+)</span><br></pre></td></tr></table></figure></p>
<p>现在，<code>master</code>分支和<code>dev</code>分支各自都分别有新的提交，变成了这样：<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/git5_9.png" alt=""><br>这种情况下，Git无法执行“快速合并”，只能试图把各自的修改合并起来，但这种合并就可能会有冲突，我们试试看：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git merge dev</span><br><span class="line">Auto-merging README.md</span><br><span class="line">CONFLICT (content): Merge conflict <span class="keyword">in</span> README.md</span><br><span class="line">Automatic merge failed; fix conflicts and <span class="keyword">then</span> commit the result.</span><br></pre></td></tr></table></figure></p>
<p>果然冲突了！Git告诉我们， README.md文件存在冲突，必须手动解决冲突后再提交。<code>git status</code>也可以告诉我们冲突的文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Your branch is ahead of <span class="string">'origin/master'</span> by <span class="number">1</span> commit.</span><br><span class="line">  (use <span class="string">"git push"</span> to publish your <span class="built_in">local</span> commits)</span><br><span class="line">You have unmerged paths.</span><br><span class="line">  (fix conflicts and run <span class="string">"git commit"</span>)</span><br><span class="line"></span><br><span class="line">Unmerged paths:</span><br><span class="line">  (use <span class="string">"git add &lt;file&gt;..."</span> to mark resolution)</span><br><span class="line"></span><br><span class="line">        both modified:   README.md</span><br><span class="line"></span><br><span class="line">no changes added to commit (use <span class="string">"git add"</span> and/or <span class="string">"git commit -a"</span>)</span><br><span class="line">```  </span><br><span class="line">我们可以直接查看`README.md`的内容：  </span><br><span class="line">``` bash</span><br><span class="line">$ cat README.md</span><br><span class="line"><span class="comment">#gitLearn</span></span><br><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class="line">good good study</span><br><span class="line">=======</span><br><span class="line">day day up</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; dev</span><br></pre></td></tr></table></figure></p>
<p>Git用<code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>，<code>=======</code>，<code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code>标记出不同分支的内容，我们修改如下后保存：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#gitLearn&#10;good good study&#10;day day up</span><br></pre></td></tr></table></figure></p>
<p>再提交：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -am <span class="string">'merge commit'</span></span><br><span class="line">[master <span class="number">9</span>a4d00b] merge commit</span><br></pre></td></tr></table></figure></p>
<p>现在，<code>master</code>分支和<code>dev</code>分支变成了下图所示：  </p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/git5_10.png" alt="">  </p>
<p>用带参数的<code>git log</code>也可以看到分支的合并情况：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --graph --pretty=oneline --abbrev-commit</span><br><span class="line">*   <span class="number">9</span>a4d00b merge commit</span><br><span class="line">|\</span><br><span class="line">| * <span class="number">6</span>a6a08e one commit</span><br><span class="line">* | <span class="number">75</span>d6f25 two commit</span><br><span class="line">|/</span><br><span class="line">* ae06dcf <span class="number">123</span></span><br><span class="line">* <span class="number">760118</span>b <span class="built_in">test</span></span><br><span class="line">*   <span class="number">64</span>ba18a <span class="built_in">test</span></span><br><span class="line">|\</span><br><span class="line">| *   <span class="number">4392848</span> Accept Merge Request <span class="comment">#1 test : (dev -&gt; master)</span></span><br><span class="line">| |\</span><br><span class="line">| | * a430c4b update README.md</span><br><span class="line">| |/</span><br><span class="line">| * <span class="number">88</span>ec6d7 Initial commit</span><br><span class="line">* <span class="number">32</span>d11c8 update README.md</span><br><span class="line">* <span class="number">8</span>d5acc1 new file README</span><br><span class="line">* e02f115 Initial commit</span><br><span class="line"></span><br><span class="line">```  </span><br><span class="line">最后，删除`feature1`分支：  </span><br><span class="line">``` bash</span><br><span class="line">$ git branch <span class="operator">-d</span> dev</span><br><span class="line">Deleted branch dev (was <span class="number">6</span>a6a08e).</span><br></pre></td></tr></table></figure></p>
<h2 id="合并分支（普通合并）"><a href="#合并分支（普通合并）" class="headerlink" title="合并分支（普通合并）"></a>合并分支（普通合并）</h2><p>通常，合并分支时，如果可能，Git会用<code>Fast forward</code>模式，但这种模式下，删除分支后，会丢掉分支信息。<br>如果要强制禁用<code>Fast forward</code>模式，<code>Git</code>就会在<code>merge</code>时生成一个新的<code>commit</code>，这样，从分支历史上就可以看出分支信息。<br>下面我们实战一下<code>--no-ff</code>方式的<code>git merge</code>：<br>首先，仍然创建并切换<code>dev</code>分支：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b dev</span><br><span class="line">Switched to a new branch <span class="string">'dev'</span></span><br></pre></td></tr></table></figure></p>
<p>修改README.md文件，并提交一个新的commit：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -am <span class="string">'submit'</span></span><br><span class="line">[dev fee6025] submit</span><br><span class="line"> <span class="number">1</span> file changed, <span class="number">1</span> insertion(+)</span><br></pre></td></tr></table></figure></p>
<p>现在，我们切换回<code>master</code>：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout master</span><br><span class="line">Switched to branch <span class="string">'master'</span></span><br></pre></td></tr></table></figure></p>
<p>目前来说流程图是这样：  </p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/git5_11.png" alt="">    </p>
<p>准备合并<code>dev</code>分支，请注意<code>--no-ff</code>参数，表示禁用<code>Fast forward</code>：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git merge --no-ff -m <span class="string">"merge with no-ff"</span> dev</span><br><span class="line">Merge made by the <span class="string">'recursive'</span> strategy.</span><br><span class="line"> README.md | <span class="number">1</span> +</span><br><span class="line"> <span class="number">1</span> file changed, <span class="number">1</span> insertion(+)</span><br></pre></td></tr></table></figure></p>
<p>因为本次合并要创建一个新的commit，所以加上<code>-m</code>参数，把commit描述写进去。</p>
<p>合并后，我们用<code>git log</code>看看分支历史：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --graph --pretty=oneline --abbrev-commit</span><br><span class="line">*   b98f802 merge with no-ff</span><br><span class="line">|\</span><br><span class="line">| * fee6025 submit</span><br><span class="line">|/</span><br><span class="line">*   <span class="number">9</span>a4d00b merge commit</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p>
<p>可以看到，不使用<code>Fast forward</code>模式，merge后就像这样：<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/git5_12.png" alt="">  </p>
<h2 id="分支管理策略"><a href="#分支管理策略" class="headerlink" title="分支管理策略"></a>分支管理策略</h2><p>实际公司开发的时候一般3个分支就可以了：</p>
<ol>
<li>mster  主分支用来发布</li>
<li>dev    日常开发用的分支</li>
<li>bug    修改bug用的分支</li>
</ol>
<p>首先，<code>master</code>分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；<br>干活都在<code>dev</code>分支上，也就是说，<code>dev</code>分支是不稳定的，到某个时候，比如1.0版本发布时，再把<code>dev</code>分支合并到<code>master</code>上，在<code>master</code>分支发布1.0版本,你和你的小伙伴们每个人都在<code>dev</code>分支上干活，每个人都有自己的分支，时不时地往<code>dev</code>分支上合并就可以了；<br><code>bug</code>分支用来处理日常bug,搞定后合到dev分支即可；  </p>
<p>假设远程公共仓库，有一个<code>master</code>和一个<code>dev</code>分支，进行多人协作开发时候（每个人的公钥必须加入到远程账号下，否则无法<code>push</code>）， 每个人都应该<code>clone</code>一份到本地。 但是<code>clone</code>的只是<code>master</code>，如果远程的<code>master</code>和<code>dev</code>一样，没关系；如果不一致，则需要<code>clone</code>出<code>dev</code>分支 <code>git checkout -b dev origin/dev</code> 之后每个人在本地的<code>dev</code>分支上独自开发（最好不要在<code>mast</code>上开发）， 开发完成之后<code>push</code>到远程<code>dev</code>, <code>git push origin dev</code>。 之后审核人再确定是否合并<code>dev</code>到<code>master</code>。  </p>
<h2 id="团队多人开发协作"><a href="#团队多人开发协作" class="headerlink" title="团队多人开发协作"></a>团队多人开发协作</h2><p>当你从远程仓库克隆时，实际上Git自动把本地的<code>master</code>分支和远程的<code>master</code>分支对应起来了，并且，远程仓库的默认名称是<code>origin</code>。<br>要查看远程库的信息，用<code>git remote</code>：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git remote</span><br><span class="line">origin</span><br></pre></td></tr></table></figure></p>
<p>或者，用<code>git remote -v</code>显示更详细的信息：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git remote -v</span><br><span class="line">origin  git@git.coding.net:tengj/gitLearn.git (fetch)</span><br><span class="line">origin  git@git.coding.net:tengj/gitLearn.git (push)</span><br></pre></td></tr></table></figure></p>
<p>上面显示了可以抓取和推送的<code>origin</code>的地址。如果没有推送权限，就看不到push的地址。</p>
<h3 id="推送分支"><a href="#推送分支" class="headerlink" title="推送分支"></a>推送分支</h3><p>推送分支，就是把该分支上的所有本地提交推送到远程库。推送时，要指定本地分支，这样，<code>Git</code>就会把该分支推送到远程库对应的远程分支上：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin master</span><br></pre></td></tr></table></figure></p>
<p>如果要推送其他分支，比如<code>dev</code>，就改成：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin dev</span><br></pre></td></tr></table></figure></p>
<h3 id="抓取分支"><a href="#抓取分支" class="headerlink" title="抓取分支"></a>抓取分支</h3><p>多人协作时，大家都会往<code>master</code>和<code>dev</code>分支上推送各自的修改。<br>现在，模拟一个你的小伙伴，可以在另一台电脑（注意要把<code>SSH Key</code>添加到<code>GitHub</code>）或者同一台电脑的另一个目录下克隆：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> git@git.coding.net:tengj/gitStudy.git</span><br><span class="line">Cloning into <span class="string">'gitStudy'</span>...</span><br><span class="line">remote: Counting objects: <span class="number">3</span>, done.</span><br><span class="line">remote: Total <span class="number">3</span> (delta <span class="number">0</span>), reused <span class="number">0</span> (delta <span class="number">0</span>)</span><br><span class="line">Receiving objects: <span class="number">100</span>% (<span class="number">3</span>/<span class="number">3</span>), done.</span><br><span class="line">Checking connectivity... done.</span><br><span class="line">```  </span><br><span class="line">当你的小伙伴从远程库<span class="built_in">clone</span>时，默认情况下，你的小伙伴只能看到本地的`master`分支。不信可以用`git branch`命令看看：</span><br><span class="line">``` bash</span><br><span class="line">$ git branch</span><br><span class="line">* master</span><br></pre></td></tr></table></figure></p>
<p>现在，你的小伙伴要在<code>dev</code>分支上开发，就必须创建远程<code>origin</code>的<code>dev</code>分支到本地，于是他用这个命令创建本地<code>dev</code>分支（程分支dev要先创建）。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b dev</span><br><span class="line">git</span><br></pre></td></tr></table></figure></p>
<p>创建dev分之后，先同步远程服务器上的数据到本地<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git fetch origin</span><br><span class="line">From git.coding.net:tengj/gitStudy</span><br><span class="line"> * [new branch]      dev        -&gt; origin/dev</span><br></pre></td></tr></table></figure></p>
<p>现在，他就可以在<code>dev</code>上继续修改，然后，时不时地把<code>dev</code>分支<code>push</code>到远程：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -am &#39;test&#39;&#10;[dev c120ad6] test&#10; 1 file changed, 1 insertion(+)&#10;$ git push origin dev&#10;Counting objects: 3, done.&#10;Delta compression using up to 4 threads.&#10;Compressing objects: 100% (2/2), done.&#10;Writing objects: 100% (3/3), 262 bytes | 0 bytes/s, done.&#10;Total 3 (delta 0), reused 0 (delta 0)&#10;To git@git.coding.net:tengj/gitStudy.git&#10;   65c05aa..c120ad6  dev -&#62; dev</span><br></pre></td></tr></table></figure></p>
<p>你的小伙伴已经向<code>origin/dev</code>分支推送了他的提交，而碰巧你也对同样的文件作了修改，并试图推送：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin dev</span><br><span class="line">To git@git.coding.net:tengj/gitStudy.git</span><br><span class="line"> ! [rejected]        dev -&gt; dev (fetch first)</span><br><span class="line">error: failed to push some refs to <span class="string">'git@git.coding.net:tengj/gitStudy.git'</span></span><br><span class="line">hint: Updates were rejected because the remote contains work that you <span class="keyword">do</span></span><br><span class="line">hint: not have locally. This is usually caused by another repository pushing</span><br><span class="line">hint: to the same ref. You may want to first integrate the remote changes</span><br><span class="line">hint: (e.g., <span class="string">'git pull ...'</span>) before pushing again.</span><br><span class="line">hint: See the <span class="string">'Note about fast-forwards'</span> <span class="keyword">in</span> <span class="string">'git push --help'</span> <span class="keyword">for</span> details.</span><br></pre></td></tr></table></figure></p>
<p>推送失败，因为你的小伙伴的最新提交和你试图推送的提交有冲突，解决办法也很简单，Git已经提示我们，先用<code>git pull</code>把最新的提交从<code>origin/dev</code>抓下来，然后，在本地合并，解决冲突，再推送：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ git pull origin dev</span><br><span class="line">remote: Counting objects: <span class="number">3</span>, done.</span><br><span class="line">remote: Compressing objects: <span class="number">100</span>% (<span class="number">2</span>/<span class="number">2</span>), done.</span><br><span class="line">remote: Total <span class="number">3</span> (delta <span class="number">0</span>), reused <span class="number">0</span> (delta <span class="number">0</span>)</span><br><span class="line">Unpacking objects: <span class="number">100</span>% (<span class="number">3</span>/<span class="number">3</span>), done.</span><br><span class="line">From git.coding.net:tengj/gitStudy</span><br><span class="line"> * branch            dev        -&gt; FETCH_HEAD</span><br><span class="line">   b7b87f4..f636337  dev        -&gt; origin/dev</span><br><span class="line">Auto-merging a.txt</span><br><span class="line">CONFLICT (content): Merge conflict <span class="keyword">in</span> a.txt</span><br><span class="line">Automatic merge failed; fix conflicts and <span class="keyword">then</span> commit the result.</span><br></pre></td></tr></table></figure></p>
<p>因此，多人协作的工作模式通常是这样：</p>
<ol>
<li>首先，可以试图用<code>git push origin branch-name</code>推送自己的修改；</li>
<li>如果推送失败，则因为远程分支比你的本地更新，需要先用<code>git pull</code>试图合并；</li>
<li>如果合并有冲突，则解决冲突，并在本地提交；</li>
<li>没有冲突或者解决掉冲突后，再用<code>git push origin branch-name</code>推送就能成功！</li>
</ol>
<p>如果<code>git pull</code>提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令<code>git branch --set-upstream-to branch-name origin/branch-name</code>。<br>这就是多人协作的工作模式，一旦熟悉了，就非常简单。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>到此，<code>Git</code>分支管理就学完了，整理一下所学的命令，大体如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">git branch           查看当前分支</span><br><span class="line">git branch -v        查看每一个分支的最后一次提交</span><br><span class="line">git branch <span class="operator">-a</span>        查看本地和远程分支的情况</span><br><span class="line">git branch --merged  查看已经与当前分支合并的分支</span><br><span class="line">git branch --no-merged 查看已经与当前分支未合并的分支</span><br><span class="line">git branch -r        查看远程分支</span><br><span class="line">git branch dev       创建分支 dev</span><br><span class="line">git checkout dev     切换到分支dev</span><br><span class="line">git checkout -b dev  创建并切换分支dev</span><br><span class="line">git merge dev        名称为dev的分支与当前分支合并</span><br><span class="line">git branch <span class="operator">-d</span> dev    删除分支dev</span><br></pre></td></tr></table></figure></p>
<hr>
<p>最近撸了个java的公众号，学习资源超级多，视频，电子书，最新开发工具一个都不能少，已全部分享到百度云盘，求资源共享，打造一个学习方便，工作方便的java公众号，开源开源，有需求的可以关注~撒花<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/javaLearn.PNG" alt=""></p>
]]></content>
      
        <categories>
            
            <category> git </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[git干货系列：（四）我要连接远程仓库（github，coding）]]></title>
      <url>http://tengj.top/2016/03/25/git4remote/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>Git</code>本地操作的熟练了后，就可以尝试连接远程仓库了，目前国内外比较出名的提供<code>Git</code>仓库远程托管的有国外的<code>github</code>，国内的<code>开源中国</code>以及<code>coding</code>。这里我以<code>coding</code>为例子介绍如何操作远程仓库。</p>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>假如你现在本地有一个<code>gitLearn</code>的项目，想托管到<code>coding</code>上面，那么你先进入<code>coding</code>创建一个仓库，如图。  </p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/git4_1.png" alt=""><br><img src="http://7xqch5.com1.z0.glb.clouddn.com/git4_2.png" alt="">  </p>
<p>创建完后复制远程仓库的SSH方式的地址。</p>
<h2 id="连接远仓库命令"><a href="#连接远仓库命令" class="headerlink" title="连接远仓库命令"></a>连接远仓库命令</h2><p>现进入本地<code>gitLearn</code>的目录，执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure></p>
<p>初始化你的项目，然后提交你的代码到本地库，执行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add readme.txt</span><br><span class="line">git commit -m <span class="string">"first submit"</span></span><br></pre></td></tr></table></figure></p>
<p>此时你的代码已经在本地库了，执行命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@git.coding.net:tengj/gitLearn.git</span><br></pre></td></tr></table></figure>
<p>就连上了远程的<code>gitLearn</code>项目。远程库的名字就是<code>origin</code>，这是Git默认的叫法，也可以改成别的，但是<code>origin</code>这个名字一看就知道是远程库。</p>
<h2 id="列出远端别名"><a href="#列出远端别名" class="headerlink" title="列出远端别名"></a>列出远端别名</h2><p>我们可以使用<code>git remote</code>来列出远端别名，如果没有任何参数，<code>Git</code>会列出它存储的远端仓库别名了事。默认情况下，如果你的项目是克隆的（与本地创建一个新的相反）， <code>Git</code>会自动将你的项目克隆自的仓库添加到列表中，并取名“<code>origin</code>”。 如果你执行时加上 <code>-v</code> 参数，你还可以看到每个别名的实际链接地址。  </p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/git4_3.png" alt=""></p>
<h2 id="推送内容到远程库"><a href="#推送内容到远程库" class="headerlink" title="推送内容到远程库"></a>推送内容到远程库</h2><p>连上之后就可以推送代码到远程仓库了，执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure></p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/git4_4.png" alt="">  </p>
<p>由于远程库是空的，我们第一次推送<code>master</code>分支时，加上了<code>-u</code>参数，<code>Git</code>不但会把本地的<code>master</code>分支内容推送的远程新的<code>master</code>分支，还会把本地的<code>master</code>分支和远程的<code>master</code>分支关联起来，在以后的推送或者拉取时就可以简化命令，直接用<code>git push origin master</code>。<br>推送完后，可以查看远程仓库上多了<code>readme.txt</code>文件。  </p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/git4_8.png" alt=""></p>
<p>如果你使用上面命令出现如下错误提示：  </p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/git4_5.png" alt="">  </p>
<p>不用紧张，那是因为你<code>HEAD</code>区域还是空的，记得先用<code>git add</code>和<code>git commit</code>命令提交你想提交的文件到<code>HEAD</code>。然后在用<code>git push -u origin master</code>就可以了。</p>
<h2 id="从远程仓库下载项目到本地"><a href="#从远程仓库下载项目到本地" class="headerlink" title="从远程仓库下载项目到本地"></a>从远程仓库下载项目到本地</h2><p>在网上看到别人的项目了，想要下载下来该如何，用<code>git clone</code><br>比如我想在我电脑<code>E:\gitRepository</code>目录下面下载这个远程仓库项目<br>直接使用命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@git.coding.net:tengj/gitLearn.git</span><br></pre></td></tr></table></figure></p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/git4_6.png" alt="">  </p>
<p>就会下载项目到<code>E:\gitRepository</code>下面，如图，大家看到了<code>gitLean</code>了没，这个就是远程的仓库项目，<code>gitLean</code>是我远程仓库项目的项目名。</p>
<h2 id="从远端仓库提取数据并尝试合并到当前分支"><a href="#从远端仓库提取数据并尝试合并到当前分支" class="headerlink" title="从远端仓库提取数据并尝试合并到当前分支"></a>从远端仓库提取数据并尝试合并到当前分支</h2><p>如果你跟别人一起连着一个远程仓库项目，别人提交了代码，你想更新成最新的代码怎么办。<br>使用<code>git pull</code>命令即可</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin master</span><br></pre></td></tr></table></figure>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/git4_7.png" alt=""></p>
<h2 id="删除跟远程仓库的连接"><a href="#删除跟远程仓库的连接" class="headerlink" title="删除跟远程仓库的连接"></a>删除跟远程仓库的连接</h2><p>如果你需要删除一个远端 —— 不再需要它了、项目已经没了，等等 —— 你可以使用 <code>git remote rm [alias]</code> 把它删掉。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote rm origin</span><br></pre></td></tr></table></figure></p>
<p>注意，断开跟远程的连接后，如果还想连上，则需要再来一次<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@git.coding.net:tengj/gitLearn.git</span><br></pre></td></tr></table></figure></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这次<code>Git</code>连接远程仓库教程到此为止,总结如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote               &#26597;&#30475;&#36828;&#31243;&#24211;&#30340;&#20449;&#24687;  &#10;git remote -v            &#26174;&#31034;&#26356;&#35814;&#32454;&#30340;&#20449;&#24687;  &#10;git remote add origin git@git.coding.net:tengj/gitLearn.git  &#36830;&#25509;&#36828;&#31243;&#20179;&#24211;  &#10;git clone git@git.coding.net:tengj/gitLearn.git            &#22797;&#21046;&#19968;&#20221;&#36828;&#31243;&#20179;&#24211;&#39033;&#30446;&#21040;&#26412;&#22320;  &#10;git remote rm origin     &#20851;&#38381;&#36830;&#25509;&#36828;&#31243;&#20179;&#24211;  &#10;git push origin master   &#25512;&#36865;&#20998;&#25903;  &#10;git pull origin master   &#25235;&#21462;&#26356;&#26032;</span><br></pre></td></tr></table></figure></p>
<hr>
<p>最近撸了个java的公众号，学习资源超级多，视频，电子书，最新开发工具一个都不能少，已全部分享到百度云盘，求资源共享，打造一个学习方便，工作方便的java公众号，开源开源，有需求的可以关注~撒花<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/javaLearn.PNG" alt=""></p>
]]></content>
      
        <categories>
            
            <category> git </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[git干货系列：（三）我提交错了我想撤销或者回退版本]]></title>
      <url>http://tengj.top/2016/03/24/git3reset/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前面给大家普及了暂存区的概念以及展示的工作区、版本库中的暂存区和版本库之间的关系，如果大家都理解的话，那么今天的课程就很简单了。<br>在上图大家回顾一下，看这里<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/git2_1.png" alt=""></p>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="撤销操作"><a href="#撤销操作" class="headerlink" title="撤销操作"></a>撤销操作</h2><h3 id="git-checkout-–-file"><a href="#git-checkout-–-file" class="headerlink" title="git checkout – [file]"></a>git checkout – [file]</h3><p>如果你文件只是在工作区修改了，但是还没提交到暂存区的时候，你可以用<code>git checkout -- [file]</code>来撤销。简单的说就是暂存区覆盖工作区。这里模拟一下，比如现在<code>readme.txt</code>里面内容是<code>first day</code>，并且已经提交到暂存区了，此时修改<code>readme.txt</code>，内容改成<code>second day.</code>，然后执行<code>git checkout -- readme.txt</code>命令,你会发现<code>readme.txt</code>内容又变成<code>first day</code>了<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/git3_1.png" alt=""></p>
<h3 id="git-reset-HEAD"><a href="#git-reset-HEAD" class="headerlink" title="git reset HEAD"></a>git reset HEAD</h3><p>如果你文件在工作区修改了,并且也执行<code>git add</code>命令提交给暂存区了，那么执行上面的<code>git checkout -- [file]</code>已经无效了，因为工作区跟暂存区已经一样了，再怎么覆盖内容也一样，这时候就应该使用<code>git reset HEAD</code>命令来撤销，简单的说就是让<code>HEAD</code>覆盖暂存区，因为此时的<code>HEAD</code>这边的文件内容还是上次提交时的内容。现在模拟一下，现在有<code>readme.txt</code>跟<code>hello.txt</code>两个文件，都经过修改<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/git3_2.png" alt=""><br>如图可以看到，使用<code>git status -s</code>来查看的时候，红色的M表示这2个文件都经过修改，使用<code>git add .</code>提交后在查看，发现都是绿色的M，表示都提交到暂存区了，这时候执行<code>git reset HEAD hello.txt</code>后在查看，发现<code>hello.txt</code>变成红色M了，说明hello.txt从暂存区撤销了。如果还想把工作区间的文件也撤回，就继续执行上面的<code>git reset HEAD readme.txt</code>就行。</p>
<h3 id="git-checkout-HEAD-file"><a href="#git-checkout-HEAD-file" class="headerlink" title="git checkout HEAD [file]"></a>git checkout HEAD [file]</h3><p><code>git checkout HEAD [file]</code>命令是<code>git checkout -- [file]</code>和<code>git reset HEAD</code>的合成体，直接用HEAD覆盖工作区,暂存区。如下图中所示，一开始 工作区暂存区以及HEAD中文件内容都是<code>first day.</code>,此时修改<code>readme.txt</code>内容为<code>second day.</code>，然后执行<code>git add .</code>提交到暂存区，接着执行<code>git checkout HEAD readme.txt</code>命令，再查看<code>readme.txt</code>内容的时候你会发现变成了<code>first day.</code><br><img src="http://7xqch5.com1.z0.glb.clouddn.com/git3_3.png" alt=""></p>
<h2 id="版本回退以及切换"><a href="#版本回退以及切换" class="headerlink" title="版本回退以及切换"></a>版本回退以及切换</h2><h3 id="git-reset-–hard-HEAD"><a href="#git-reset-–hard-HEAD" class="headerlink" title="git reset –hard HEAD^"></a>git reset –hard HEAD^</h3><p>首先，<code>Git</code>必须知道当前版本是哪个版本，在<code>Git</code>中，用<code>HEAD</code>表示当前版本，也就是最新的提交<code>3628164...882e1e0</code>（注意我的提交ID和你的肯定不一样），上一个版本就是<code>HEAD^</code>，上上一个版本就是<code>HEAD^^</code>，当然往上100个版本写100个<code>^</code>比较容易数不过来，所以写成<code>HEAD~100</code>。<br>先查看当前版本记录，发现最近的两个版本为<code>b520a36 第一次提交</code>和<code>479c6fd 第二次提交</code><br><img src="http://7xqch5.com1.z0.glb.clouddn.com/git3_4.png" alt=""></p>
<p>当前版本是<code>b520a36 第一次提交</code>,现在我们来执行<code>git reset --hard HEAD^</code>来回退到<code>479c6fd 第二次提交</code>版本,如图：<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/git3_5.png" alt=""></p>
<h3 id="git-reset-–hard-commit-id"><a href="#git-reset-–hard-commit-id" class="headerlink" title="git reset –hard commit_id"></a>git reset –hard commit_id</h3><p>如果你回退版本后又后悔了，想恢复最后那个版本怎么办，通过<code>git reset --hard commit_id</code>命令可以搞定，注意这里的<code>commit_id</code>是版本号，只要记得版本号，你想切换到哪个版本都行，如果你忘记了刚才最后一个的版本号，可以通过<code>git reflog</code>来查看，这里我们记得最后那次版本号为<code>b520a36</code>，执行<code>git reset --hard b520a36</code><br><img src="http://7xqch5.com1.z0.glb.clouddn.com/git3_6.png" alt=""></p>
<h2 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h2><p>这里介绍一下<code>git</code>中的删除操作命令，以及意外删除了该如何还原。</p>
<h3 id="git-rm"><a href="#git-rm" class="headerlink" title="git rm"></a>git rm</h3><p>执行<code>git rm</code>命令会同时删除工作区跟暂存区中的指定文件，要慎重处理。</p>
<p>但是如果你意外删除了也是可以恢复的。不过要分成2种情况处理：</p>
<ol>
<li><p>还未执行<code>git commit</code>提交到<code>HEAD</code>的时候删除文件，这时候直接使用<code>git checkout HEAD [file]</code>就能还原。<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/git3_7.png" alt=""></p>
</li>
<li><p>执行<code>git commit</code>提交到<code>HAED</code>后时候才删除文件，这时候就只能执行<code>git reset --hard HEAD^</code>回退上一个版本。<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/git3_8.png" alt=""></p>
</li>
</ol>
<h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>总结一下上面所学的：</p>
<p>场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令<code>git checkout -- file</code>。<br>场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令<code>git reset HEAD file</code>，就回到了场景1，第二步按场景1操作。<br>场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，使用<code>git reset --hard HEAD^</code>。</p>
<hr>
<p>最近撸了个java的公众号，学习资源超级多，视频，电子书，最新开发工具一个都不能少，已全部分享到百度云盘，求资源共享，打造一个学习方便，工作方便的java公众号，开源开源，有需求的可以关注~撒花<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/javaLearn.PNG" alt=""></p>
]]></content>
      
        <categories>
            
            <category> git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[git干货系列：（二）深入学习之前先理解git暂存区]]></title>
      <url>http://tengj.top/2016/03/23/git2konwindex/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>暂存区<code>（stage, index）</code>是<code>Git</code>最重要的概念之一，理解了这个概念很多 <code>Git</code> 命令就不再那么神秘了。下面几个验证例子一开始看不懂没关系，工作区、版本库中的暂存区和版本库之间的关系图先理解先。</p>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>下面这个图展示了工作区、版本库中的暂存区和版本库之间的关系。<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/git2_1.png" alt=""><br>在这个图中，我们可以看到部分 <code>Git</code>命令是如何影响工作区和暂存区<code>（stage, index）</code>的。</p>
<ul>
<li>图中左侧为工作区，右侧为版本库。在版本库中标记为 <code>index</code> 的区域是暂存区<code>（stage, index）</code>，标记为 <code>master</code> 的是 <code>master</code> 分支所代表的目录树。</li>
<li>图中我们可以看出此时<code>HEAD</code>实际是指向<code>master</code>分支的一个“游标”。所以图示的命令中出现<code>HEAD</code>的地方可以用<code>master</code>来替换。</li>
<li>图中的<code>objects</code>标识的区域为<code>Git</code>的对象库，实际位于<code>.git/objects</code>目录下，我们会在后面的章节重点介绍。</li>
<li>当对工作区修改（或新增）的文件执行<code>git add</code>命令时，暂存区的目录树被更新，同时工作区修改（或新增）的文件内容被写入到对象库中的一个新的对象中，而该对象的<code>ID</code> 被记录在暂存区的文件索引中。</li>
<li>当执行提交操作<code>（git commit）</code>时，暂存区的目录树写到版本库（对象库）中，<code>master</code>分支会做相应的更新。即<code>master</code>指向的目录树就是提交时暂存区的目录树。</li>
<li>当执行 <code>git reset HEAD</code> 命令时，暂存区的目录树会被重写，被 master 分支指向的目录树所替换，但是工作区不受影响。</li>
<li>当执行 <code>git checkout .</code> 或者 <code>git checkout -- [file]</code> 命令时，会用暂存区全部或指定的文件替换工作区的文件。这个操作很危险，会清除工作区中未添加到暂存区的改动。</li>
<li>当执行 <code>git checkout HEAD .</code> 或者 <code>git checkout HEAD [file]</code> 命令时，会用 <code>HEAD</code> 指向的 <code>master</code> 分支中的全部或者部分文件替换暂存区和以及工作区中的文件。这个命令也是极具危险性的，因为不但会清除工作区中未提交的改动，也会清除暂存区中未提交的改 动。</li>
<li>当执行 <code>git rm --cached [file]</code>命令时，会直接从暂存区删除文件，工作区则不做出改变。</li>
<li>当执行 <code>git rm file</code>命令时，会同时删除暂存区和工作区的文件。</li>
<li>当执行 <code>rm file</code>命令时，只会删除工作区的文件。</li>
</ul>
<hr>
<h2 id="下面举例子来证明以上观点"><a href="#下面举例子来证明以上观点" class="headerlink" title="下面举例子来证明以上观点"></a>下面举例子来证明以上观点</h2><p>假设：<br>工作区：a<br>暂存区（index）:b<br>HEAD:C</p>
<p>git diff命令结论<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git diff           比较a跟b</span><br><span class="line">git diff --cached  比较b跟c</span><br><span class="line">git diff HEAD      比较a跟c</span><br></pre></td></tr></table></figure></p>
<p>git reset跟 git checkout结论</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD              c覆盖b</span><br><span class="line">git checkout -- &lt;file&gt;      b覆盖a</span><br><span class="line">git checkout HEAD &lt;file&gt;    c覆盖a,b</span><br></pre></td></tr></table></figure>
<p>git rm命令结论<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git rm          删除a跟b</span><br><span class="line">git rm --cached 只删除b</span><br><span class="line">rm file         只删除a</span><br></pre></td></tr></table></figure></p>
<h2 id="证明git-diff结论"><a href="#证明git-diff结论" class="headerlink" title="证明git diff结论"></a>证明git diff结论</h2><p>例子，默认新建一个<code>readme.txt</code>，里面输入内容<code>one</code>然后add并且<code>commit</code>一次。</p>
<p>1：修改<code>readme.txt</code>，新增内容<code>two</code>，这时候a内容改变了,多了<code>two</code>，而b跟c内容不变，都只有<code>one</code>。<br>执行<code>git diff readme.txt</code>查看效果  </p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/git2_2.png" alt="">  </p>
<p>结论：如图看出，内容有修改， a跟b比较了</p>
<hr>
<p>执行<code>git diff --cached readme.txt</code>查看效果  </p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/git2_3.png" alt="">  </p>
<p>结论：如图看出，没有变化，因为b跟c内容一样。</p>
<hr>
<p>执行<code>git diff HEAD readme.txt</code>查看效果  </p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/git2_4.png" alt="">  </p>
<p>如图所示：内容有修改，a跟c比较了</p>
<hr>
<p>2.这时候执行<code>git add readme.txt</code>,这时候a，b内容都多了two，而c内容不变，只有<code>one</code><br>执行<code>git diff readme.txt</code>查看效果  </p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/git2_5.png" alt="">  </p>
<p>结论：如图看出，没有变化， 因为a跟b内容一样。</p>
<hr>
<p>执行git diff –cached readme.txt查看效果  </p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/git2_6.png" alt="">  </p>
<p>结论：如图看出，内容有修改，b跟c比较了</p>
<hr>
<p>执行<code>git diff HEAD readme.txt</code>查看效果  </p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/git2_7.png" alt="">  </p>
<p>结论：如图看出，内容有修改，a跟c比较了</p>
<p>3.最后使用<code>git commit</code>提交一次，这时候a,b,c内容都一样，都包含<code>two</code>。  </p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/git2_8.png" alt="">  </p>
<p>结论，如图看出，没有变化，说明a,b,c内容一样</p>
<hr>
<p>根据上面的实例再一次证明了如下观点：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git diff           比较工作区跟暂存区</span><br><span class="line">git diff --cached  比较暂存区跟HEAD</span><br><span class="line">git diff HEAD      比较工作区跟HEAD</span><br></pre></td></tr></table></figure></p>
<h2 id="证明git-reset跟-git-checkout结论"><a href="#证明git-reset跟-git-checkout结论" class="headerlink" title="证明git reset跟 git checkout结论"></a>证明git reset跟 git checkout结论</h2><p>例子，默认新建一个<code>readme.txt</code>，里面输入内容<code>one</code>然后add并且<code>commit</code>一次，这时候a,b,c内容都是<code>one</code></p>
<hr>
<p>1.修改<code>readme.txt</code>，新增内容<code>two</code>，执行<code>git add readme.txt</code>操作，这时候a ,b内容都多了<code>two</code>,c还是只有<code>one</code>.<br>执行<code>git reset HEAD -- readme.txt</code>命令后，c覆盖b,这时候b内容也变成只有<code>one</code>了，使用<code>git diff  readme.txt</code>命令可以看到，有内容修改，a跟b内容不一样。  </p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/git2_9.png" alt=""></p>
<hr>
<p>2.此时a内容有two,b和c都只有one，执行<code>git checkout -- readme.txt</code>后，b覆盖a,此时a,b,c都是one。执行<code>git diff readme.txt</code>命令可以看到，没有改变。  </p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/git2_10.png" alt=""></p>
<hr>
<p>3.此时a,b,c都只有<code>one</code>，修改一下，添加内容<code>two</code>，执行<code>git add readme.txt</code>和<code>git commit -m &quot;two&quot;</code>.再修改一次<code>readme.txt</code>,添加内容<code>three</code>,然后会执行<code>git add readme.txt</code>，此时a跟b都包含three，而c只包含one跟two。执行<code>git checkout HEAD readme.txt</code>后，c覆盖a和b,a,b里面内容都只有one跟two。分别使用命令<code>git diff --cached</code>和<code>git diff HEAD</code>来查看b跟c，a跟c的比对，发现都一样。  </p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/git2_11.png" alt=""></p>
<hr>
<p>根据上面的实例再一次证明了如下观点：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD              HEAD覆盖暂存区</span><br><span class="line">git checkout -- &lt;file&gt;      暂存区覆盖工作区</span><br><span class="line">git checkout HEAD &lt;file&gt;    HEAD覆盖暂存区和工作区</span><br></pre></td></tr></table></figure></p>
<hr>
<h2 id="证明git-rm-结论"><a href="#证明git-rm-结论" class="headerlink" title="证明git rm 结论"></a>证明git rm 结论</h2><p>默认新建一个<code>readme.txt</code>，里面输入内容<code>one</code>，然后使用<code>git add readme.txt</code>命令。<br>1.执行git rm readme.txt命令，发现文件被删除了。</p>
<p>2.再新建一个一个<code>readme.txt</code>，里面输入内容 one，然后使用<code>git add readme.txt</code>命令。执行<code>git rm --cached readme.txt</code>命令，发现文件内<code>readme.txt</code>还在，然后执行<code>git status</code>命令，发现是<code>Untracked</code>状态，也就是未<code>add</code>，这就说明暂存区被删除了。  </p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/git2_12.png" alt=""></p>
<hr>
<p>根据上面的实例再一次证明了如下观点：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git rm file      会将文件从缓存区和你的硬盘中（工作区）删除</span><br><span class="line">git rm --cached  只删除暂存区，不删除工作区</span><br><span class="line">rm file          只删除工作区</span><br></pre></td></tr></table></figure></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>暂存区的原理需要大家重复的加深了解，基础打牢了后面学起来就轻松很多，上面几个例子都自己验证一遍，加深印象。</p>
<hr>
<p>最近撸了个java的公众号，学习资源超级多，视频，电子书，最新开发工具一个都不能少，已全部分享到百度云盘，求资源共享，打造一个学习方便，工作方便的java公众号，开源开源，有需求的可以关注~撒花<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/javaLearn.PNG" alt=""></p>
]]></content>
      
        <categories>
            
            <category> git </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[提高办事效率-奇妙清单]]></title>
      <url>http://tengj.top/2016/03/22/apprecommend1/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近我认识了一个小伙伴，奇妙清单，使用起来感觉萌萌哒。良心推荐，提高效率的神器。</p>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="奇妙清单是什么"><a href="#奇妙清单是什么" class="headerlink" title="奇妙清单是什么"></a>奇妙清单是什么</h2><p>奇妙清单是一款待办类的To-do云端任务管理工具,用来管理我们日常所要做的事情的清单。一目了然，便于管理。<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/app1_1.jpg" alt=""></p>
<h2 id="为什么人人都需要一份清单"><a href="#为什么人人都需要一份清单" class="headerlink" title="为什么人人都需要一份清单"></a>为什么人人都需要一份清单</h2><h3 id="你的记忆没你想象的可靠"><a href="#你的记忆没你想象的可靠" class="headerlink" title="你的记忆没你想象的可靠"></a>你的记忆没你想象的可靠</h3><p>现代生活中大大小小的琐事越来越多，经常很忙的时候就会忘记一些很重要的事情，事后才来后悔。随着年龄的增长，我们的记忆会慢慢的衰退，它并没有我们想象得可靠，所以借助一款应用来充当我们额外的第二大脑，俗话说【好记忆不如烂笔头】。</p>
<h3 id="清单可以帮你理清思路，做出规划"><a href="#清单可以帮你理清思路，做出规划" class="headerlink" title="清单可以帮你理清思路，做出规划"></a>清单可以帮你理清思路，做出规划</h3><p><strong>一方面</strong>，清单充当了思维导图的角色，但你把不同的事项分别存放在不同的清单列表中，实际上已经是对这些事项的第一次梳理，明确了大致分类，方便对自己的日程和时间作出具体的分配和规划。<br><strong>另一方面</strong>，清单可以督促我们的行动。很多实验都已经证明了，无论你有没有强迫症，在清单上留有尚待完成的事项，都会激发一个人的行动欲，提高我们的办事效率。</p>
<h2 id="为什么要使用奇妙清单"><a href="#为什么要使用奇妙清单" class="headerlink" title="为什么要使用奇妙清单"></a>为什么要使用奇妙清单</h2><p>以前我也接触过一些To-do类型的App，但是都是用过一段时间就丢那边了，感觉并不能帮助到我什么。直到我遇到奇妙清单这款应用。<br>我概括了奇妙清单的优点如下：</p>
<h3 id="因为它【恰到好处】"><a href="#因为它【恰到好处】" class="headerlink" title="因为它【恰到好处】"></a>因为它【恰到好处】</h3><p>任何一款软件如果使用起来太麻烦，都不会获取用户的喜欢。而奇妙清单这款应用，个人觉得很简约，入门极快，它的层级只有「清单 - 事项 - 子任务」三级，它只支持设置到期时间和一次提醒（邮件提醒），它只可以对优先级高的任务打上星标……</p>
<h3 id="因为它跨了所有平台"><a href="#因为它跨了所有平台" class="headerlink" title="因为它跨了所有平台"></a>因为它跨了所有平台</h3><p>这是很棒的一个功能，跨平台，你可以在电脑、手机、平板上使用，让你随时随地可以管理自己的清单，并且各个平台数据都是同步的。</p>
<h3 id="因为它支持团队协作"><a href="#因为它支持团队协作" class="headerlink" title="因为它支持团队协作"></a>因为它支持团队协作</h3><p>团队协作是个很棒的功能，适合项目组间协同办公。列好一天内需要完成的清单任务，然后 指派分配任务， 大家都能看到，领导也能很好的把控项目进度。 彼此之间可以留言通知，一切都让沟通无所阻碍。</p>
<h3 id="因为它免费"><a href="#因为它免费" class="headerlink" title="因为它免费"></a>因为它免费</h3><p>免费，免费，免费。重要的事情说三遍。</p>
<h2 id="我是如何使用奇妙清单的"><a href="#我是如何使用奇妙清单的" class="headerlink" title="我是如何使用奇妙清单的"></a>我是如何使用奇妙清单的</h2><p>我个人是3月份开始使用奇妙清单这款应用的，也算刚入门。我的清单是根据我个人的需求定制的，我主要列了如下几个清单：<br>【今日待办】，【工作重要事情】，【个人idea】，【2016年阅读统计】</p>
<blockquote>
<p>【今日代办】是我每天早上上班的时候会花上五分钟时间想好今天要处理的事情，根据时间排序。<br>【工作重要事情】是工作方面临时有任务但是不是今天马上要完成，统一记录在这个清单，后续可以安排处理。<br>【个人idea】是我突然有灵感或者想做一些事情的时候记录下来这个主意。<br>【2016年阅读统计】用来汇总我今年想读的书或者已经度过的书籍。  </p>
</blockquote>
<p>以上只是我个人使用中的一些心得，你可以根据自己实际情况增删清单。<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/app1_2.png" alt=""></p>
<h2 id="奇妙清单带给我什么好处"><a href="#奇妙清单带给我什么好处" class="headerlink" title="奇妙清单带给我什么好处"></a>奇妙清单带给我什么好处</h2><p>以前我做事情会丢三落四，毕竟年纪大了记忆力慢慢就不好了，还经常拖延症发作，想做的事情一大堆，但是都无从下手。 自从用奇妙清单以来，发现自己效率提高了。不用再花时间去思考我接下来要干嘛，迷茫的时候看看清单。要做的事情那么多，哪里还有空在发呆。</p>
<h1 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h1><p>我之所以推荐这款应用，因为我在使用它的过程中确实感觉到了我的进步。不在拖延，不再迷茫。希望大家也一起使用起来，提高工作效率，可以花更多的时间在生活和家庭上。</p>
]]></content>
      
        <categories>
            
            <category> app推荐 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[git干货系列：（一）我是小白，我想要搭建git仓库]]></title>
      <url>http://tengj.top/2016/03/20/git1creategit/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>咳，小白你好，我是老白。比你早那么一段时间接触<code>git</code>，不知道你之前是否跟我一样是使用<code>SVN</code>来进行版本管理的，在这里，我不会告诉你<code>git</code>的历史,发展以及优势，既然你想学<code>git</code>，我就当你已经懂了这些。我只能告诉你我为什么要学<code>git</code>，因为我觉得它十分的高大上，外加可以装逼~~</p>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h2><p>正式开搞了，紧张不。本系列是在window系统上搞的，所以我只介绍window系统如何安装<br>下载路径：<a href="http://git-scm.com/download" target="_blank" rel="external">Git客户端</a><br>安装后再任意地方鼠标右键就会出现如下，<code>Git Bash Here</code>就是我们的客户端<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/git1_1.jpg" alt=""><br><img src="http://7xqch5.com1.z0.glb.clouddn.com/git1_2.png" alt=""></p>
<h2 id="初次运行-Git-前的配置"><a href="#初次运行-Git-前的配置" class="headerlink" title="初次运行 Git 前的配置"></a>初次运行 Git 前的配置</h2><p>当安装完<code>Git</code>应该做的第一件事就是设置你的用户名称与邮件地址。 这样做很重要，因为每一个<code>Git</code>的提交都会使用这些信息，并且它会写入到你的每一次提交中，不可更改：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &#34;tengj&#34;&#10;git config --global user.email johndoe@example.com</span><br></pre></td></tr></table></figure></p>
<p>再次强调，如果使用了 <code>--global</code> 选项，那么该命令只需要运行一次，因为之后无论你在该系统上做任何事情， Git 都会使用那些信息。 当你想针对特定项目使用不同的用户名称与邮件地址时，可以在那个项目目录下运行没有 <code>--global</code> 选项的命令来配置。</p>
<h2 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h2><p>指定一个目录作为你的仓库地址，我这里使用<code>E:\gitRepository</code>作为我后期所有项目的总空间。<br>创建我的第一个项目名~起名叫做<code>gitDemo</code>，这个直接在window新建一个文件夹就行。<br>然后在<code>gitDemo</code>目录里面，右键鼠标打开<code>git</code>客户端，输入创建版本库命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure></p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/git1_3.png" alt=""><br>瞬间Git就把仓库建好了，而且告诉你是一个空的仓库（empty Git repository），细心的读者可以发现当前目录下多了一个<code>.git</code>的目录，这个目录是<code>Git</code>来跟踪管理版本库的，没事千万不要手动修改这个目录里面的文件，不然改乱了，就把Git仓库给破坏了。如果你没有看到<code>.git</code>目录，那是因为这个目录默认是隐藏的,自己麻利的改下目录属性吧。</p>
<h2 id="添加文件到版本库"><a href="#添加文件到版本库" class="headerlink" title="添加文件到版本库"></a>添加文件到版本库</h2><p>上面把<code>git</code>仓库搭建好了，现在就来试试添加文件到版本库里面。<br>创建一个<code>txt</code>文档起名叫做<code>readme.txt</code>，往里面添加一点内容<code>hello git</code>.<br>注意，最好不要用系统自带的<code>txt</code>来编写，因为这里需要文件是<code>UTF-8</code>格式的，所以我使用<code>EditPlus</code>这种可以把文件另存为<code>UTF-8</code>格式的编辑器的。<br>创建好文件后，添加到仓库只需要2个操作：<br>第一步，用命令<code>git add</code>告诉<code>Git</code>，把本地代码托送到暂存区<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add readme.txt</span><br></pre></td></tr></table></figure></p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/git1_4.png" alt=""><br>第二步，用命令<code>git commit</code>告诉<code>Git</code>，把文件提交到仓库：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">"first commit"</span></span><br></pre></td></tr></table></figure></p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/git1_5.png" alt=""></p>
<p><code>-m</code> 参数是用来注释你提交的信息的，这样以后才知道这次提交时用来干嘛</p>
<h2 id="查看当前新增或者修改的文件"><a href="#查看当前新增或者修改的文件" class="headerlink" title="查看当前新增或者修改的文件"></a>查看当前新增或者修改的文件</h2><p>实际使用中你不止只有一个文件，或新增或修改多个文件，可能时间一久就忘了有多少文件需要提交<br>这里模拟一下，首先新建一个<code>hello.txt</code>的文件，然后修改<code>readme.txt</code>内容，添加一句<code>come on baby</code>.<br>这样就有2个文件需要提交了。<br>我们使用<code>git status</code>命令来查看当前状态,是否有未提交的文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure></p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/git1_6.png" alt=""></p>
<p>如图，可以看到红色的字体显示的一个<code>readme.txt</code>被修改过了，但还没有准备提交的修改，另外一个是<code>Untracked files: hello.txt</code>，表示新增的文件。</p>
<p>这时候准备把上面2个文件都提交，使用命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add readme.txt</span><br><span class="line">git add hello.txt</span><br></pre></td></tr></table></figure></p>
<p>或者你嫌弃文件太多，一次次add感觉很麻烦，那么可以试试使用<code>git add .</code>提交，<code>.</code>表示提交当前目录所有文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure></p>
<p>提交后再使用<code>git status</code>命令查看下<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/git1_7.png" alt=""><br>你会看到这2个文件都变成绿色了，表示添加到暂存区成功了<br>然后使用<code>git commit</code>提交后，在使用<code>git status</code>查看<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">"second commit"</span></span><br></pre></td></tr></table></figure></p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/git1_8.png" alt=""><br>如图，可以看到文件提交到仓库了，并且<code>git status</code>后提示<code>nothing to commit, working directory clean</code>，说明当前没有需要提交的修改，工作目录是干净。</p>
<h2 id="比较当前文件跟版本文件内容"><a href="#比较当前文件跟版本文件内容" class="headerlink" title="比较当前文件跟版本文件内容"></a>比较当前文件跟版本文件内容</h2><p>假如你休假两周从国外回来，第一天上班时，已经记不清上次怎么修改的<code>readme.txt</code>，所以，需要用<code>git diff</code>这个命令看看：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff readme.txt</span><br></pre></td></tr></table></figure></p>
<p>额我发现什么反应都没有。。原来是我<code>readme.txt</code>已经<code>commit</code>提交到版本库了。内容一样当然没有啥好比对的。这里我们往<code>readme.txt</code>添加一条内容<code>day day up</code>。<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/git1_9.png" alt=""><br>如图，最后一行绿色的<code>+day day up.</code>表示是新增的。</p>
<h2 id="查看历史提交记录"><a href="#查看历史提交记录" class="headerlink" title="查看历史提交记录"></a>查看历史提交记录</h2><p>有时候你想看看之前提交的历史纪录~那么就需要使用到<code>git log</code>命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br></pre></td></tr></table></figure></p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/git1_10.png" alt=""><br>如图，可以看到我们提交的2次历史，<code>first commit</code>和<code>second commit</code>。历史纪录是根据时间倒叙排列的。<br>如果觉得代码太多了，加点过滤就行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> --pretty=oneline</span><br></pre></td></tr></table></figure></p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/git1_11.png" alt=""><br>其中，里面那一串常常字符串作用很重要，介绍版本回退的时候详细说明。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>好了，今天小白入门到此就结束了，如果你看完了这篇教程，说明你已经入门<code>git</code>了，恭喜。接下去就是继续深入学习。今天所涉及的命令整理下如下：</p>
<blockquote>
<p>git init    初始化仓库<br>git add     添加文件到暂存区<br>git commit  提交文件到仓库<br>git diff    比对本地和版本库里面的文件<br>git log     查看历史提交记录</p>
</blockquote>
<p>注意，文中多次提到的暂存区，在<code>git</code>中是个很重要的概念，弄懂了暂存区才算真正懂了<code>git</code>。我暂时还不是很懂，毕竟我也刚学习，这篇教程说白了是我自己的学习笔记，一起努力吧，下篇就来介绍暂存区概念。</p>
<hr>
<p>最近撸了个java的公众号，学习资源超级多，视频，电子书，最新开发工具一个都不能少，已全部分享到百度云盘，求资源共享，打造一个学习方便，工作方便的java公众号，开源开源，有需求的可以关注~撒花<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/javaLearn.PNG" alt=""></p>
]]></content>
      
        <categories>
            
            <category> git </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[git干货系列：（总纲）根据使用场景介绍git]]></title>
      <url>http://tengj.top/2016/03/20/gitTotalMsg/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本人搭建独立博客的时候需要使用到<code>github</code>，<code>coding</code>以及<code>开源中国</code>，发现全部使用<code>git</code>来进行版本控制。了解之后发<code>现git</code>很棒，所以决定学。学习过程中做了一些笔记，经过整理就有了这个系列的文章，其实是我自己的学习笔记整理，如果你也是新手就跟着我一起学习，如果你是大神，那么希望您能指出我的错误，让我学习更进一步，这也是我写这系列笔记的初衷。</p>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="学习环境"><a href="#学习环境" class="headerlink" title="学习环境"></a>学习环境</h2><p>本人是使用window系统来学习的，linux以及Mac的同学自行安装软件哦~</p>
<h2 id="书写方式"><a href="#书写方式" class="headerlink" title="书写方式"></a>书写方式</h2><p>网上<code>git</code>教程也很多，我想记录我自己学习使用过程中的点滴，不单单是个教程，我想把它当成工具来写，根据实际使用场景来分类，这样方便以后自己快速查找。</p>
<h2 id="系列博文整理"><a href="#系列博文整理" class="headerlink" title="系列博文整理"></a>系列博文整理</h2><p>整理了下git系列的文章，发现写系列博客感觉还是很棒的：<br><a href="http://tengj.top/2016/03/20/git1creategit/">git干货系列：（一）我是小白，我想要搭建git仓库</a><br><a href="http://tengj.top/2016/03/23/git2konwindex/">git干货系列：（二）深入学习之前先理解git暂存区</a><br><a href="http://tengj.top/2016/03/24/git3reset/">git干货系列：（三）我提交错了我想撤销或者回退版本</a><br><a href="http://tengj.top/2016/03/25/git4remote/">git干货系列：（四）我要连接远程仓库（github，coding）</a><br><a href="http://tengj.top/2016/03/27/git5branch/">git干货系列：（五）多人协同工作之分支管理</a><br><a href="http://tengj.top/2016/03/29/git6gitlab/">git干货系列：（六）公司内部搭建git服务器</a></p>
<h2 id="所有学习git资源"><a href="#所有学习git资源" class="headerlink" title="所有学习git资源"></a>所有学习git资源</h2><p>学习过程中我参考了许许多多的教程，分享跟大家：<br><a href="http://www.yiibai.com/git/" target="_blank" rel="external">git教程</a><br><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">廖雪峰git教程</a><br><a href="http://rogerdudler.github.io/git-guide/index.zh.html" target="_blank" rel="external">git–简易指南</a><br><a href="http://backlogtool.com/git-guide/cn/" target="_blank" rel="external">猴子都能懂的GIT入门</a><br><a href="http://gitref.justjavac.com/" target="_blank" rel="external">Git参考手册</a>  </p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>上面列出的目录是我接下来打算写的文章~学习跨度1-2周，一般两三天写一篇，希望自己不要拖延~动起来小伙伴们，跟我一起学会了装逼。</p>
<hr>
<p>最近撸了个java的公众号，学习资源超级多，视频，电子书，最新开发工具一个都不能少，已全部分享到百度云盘，求资源共享，打造一个学习方便，工作方便的java公众号，开源开源，有需求的可以关注~撒花<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/javaLearn.PNG" alt=""></p>
]]></content>
      
        <categories>
            
            <category> git </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[hexo干货系列：（八）hexo文章自动隐藏侧边栏]]></title>
      <url>http://tengj.top/2016/03/20/hexo8hidewidgets/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>使用Jacman主题的时候发现打开具体文章后，侧边栏还是会展示，我想要的效果是自动隐藏侧边栏，并且展示目录。但是当我修改了主题配置文件里面<code>close_aside</code>属性为<code>true</code>的时候，发现侧边栏隐藏了，但是目录没出来。于是就有了这篇文章，让我带你一步步明白原理并解决问题~</p>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="侧边栏的代码结构"><a href="#侧边栏的代码结构" class="headerlink" title="侧边栏的代码结构"></a>侧边栏的代码结构</h2><p><img src="http://7xqch5.com1.z0.glb.clouddn.com/hexo8_1.jpg" alt=""><br><img src="http://7xqch5.com1.z0.glb.clouddn.com/hexo8_2.png" alt="">  </p>
<p>如图：</p>
<ol>
<li>为显示侧边栏按钮,对应的是openaside，默认隐藏</li>
<li>为文章目录,对应的是to和toc-aside，默认隐藏</li>
<li>为侧边栏,对应的是asidepart，默认是展示</li>
</ol>
<h2 id="实现自动隐藏侧边栏"><a href="#实现自动隐藏侧边栏" class="headerlink" title="实现自动隐藏侧边栏"></a>实现自动隐藏侧边栏</h2><p>那我们现在要做得就是打算一打开具体文章，默认先显示成文字目录，而不是侧边栏<br>要实现这个就要通过js来改变，我查找了对应的文件，发现在  <code>\themes\jacman\layout\_partial\after_footer.ejs</code>这里有相关代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> m = $(<span class="string">'#main'</span>),</span><br><span class="line">    a = $(<span class="string">'#asidepart'</span>), <span class="comment">//侧边栏</span></span><br><span class="line">    c = $(<span class="string">'.closeaside'</span>),<span class="comment">//隐藏侧边栏</span></span><br><span class="line">    o = $(<span class="string">'.openaside'</span>); <span class="comment">//显示侧边栏</span></span><br><span class="line">c.click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  a.addClass(<span class="string">'fadeOut'</span>).css(<span class="string">'display'</span>, <span class="string">'none'</span>);</span><br><span class="line">  o.css(<span class="string">'display'</span>, <span class="string">'block'</span>).addClass(<span class="string">'fadeIn'</span>);</span><br><span class="line">  m.addClass(<span class="string">'moveMain'</span>);</span><br><span class="line">&#125;);  </span><br><span class="line"><span class="comment">//*******************************</span></span><br><span class="line"> 中间还有一些代码。。这里不展示</span><br><span class="line"> <span class="comment">//******************************</span></span><br><span class="line">&lt;% <span class="keyword">if</span> (is_post() &amp;&amp; theme.close_aside) &#123; %&gt;</span><br><span class="line">      getSize();</span><br><span class="line">      <span class="keyword">if</span> (myWidth &gt;= <span class="number">1024</span>) &#123;</span><br><span class="line">        c.click();</span><br><span class="line">      &#125;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>
<p>上面代码可以看出来<br><code>is_post()</code>用来判断当前是否post布局，大家记住我们博文详情页默认是<code>post</code>布局，所以为<code>true</code>.<br><code>theme.close_aside</code>这个是在主题配置文件<code>_config.yml</code>下面对应的配置：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">close_aside: <span class="literal">true</span>  <span class="comment">#close sidebar in post page if true</span></span><br><span class="line">mathjax: <span class="literal">false</span>      <span class="comment">#enable mathjax if true</span></span><br></pre></td></tr></table></figure></p>
<p>我这边<code>close_aside</code>就设置了<code>true</code>，在<code>post</code>布局里面默认关闭侧边栏<br>如果页面宽度大于1024就触发<code>c.click()</code>，也就是触发了隐藏侧边栏的方法。<br>原本的代码<code>c.click(function(){})</code>里面只是简单的隐藏和显示了图标，最关键的目录对应的<code>&lt;div id=&quot;toc&quot; class=&quot;toc-aside&quot;&gt;</code>没有显示，因为默认隐藏的。<br><strong>没错，这就是问题的关键所在</strong>，所以我这里添加上了显示这个<code>div</code>的代码，正确代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> m = $(<span class="string">'#main'</span>),</span><br><span class="line">    a = $(<span class="string">'#asidepart'</span>), <span class="comment">//侧边栏</span></span><br><span class="line">    c = $(<span class="string">'.closeaside'</span>),<span class="comment">//隐藏侧边栏</span></span><br><span class="line">    o = $(<span class="string">'.openaside'</span>); <span class="comment">//显示侧边栏</span></span><br><span class="line">c.click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  a.addClass(<span class="string">'fadeOut'</span>).css(<span class="string">'display'</span>, <span class="string">'none'</span>);</span><br><span class="line">  o.css(<span class="string">'display'</span>, <span class="string">'block'</span>).addClass(<span class="string">'fadeIn'</span>);</span><br><span class="line">   <span class="keyword">var</span> m = $(<span class="string">'#main'</span>),</span><br><span class="line">    a = $(<span class="string">'#asidepart'</span>), <span class="comment">//侧边栏</span></span><br><span class="line">    c = $(<span class="string">'.closeaside'</span>),<span class="comment">//隐藏侧边栏</span></span><br><span class="line">    o = $(<span class="string">'.openaside'</span>); <span class="comment">//显示侧边栏</span></span><br><span class="line">c.click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  a.addClass(<span class="string">'fadeOut'</span>).css(<span class="string">'display'</span>, <span class="string">'none'</span>);</span><br><span class="line">  o.css(<span class="string">'display'</span>, <span class="string">'block'</span>).addClass(<span class="string">'fadeIn'</span>);</span><br><span class="line">  $(<span class="string">'#toc.toc-aside'</span>).css(<span class="string">'display'</span>, <span class="string">'block'</span>).addClass(<span class="string">'fadeIn'</span>); <span class="comment">//这个是我新加的，修改点</span></span><br><span class="line">  m.addClass(<span class="string">'moveMain'</span>);</span><br><span class="line">&#125;);  </span><br><span class="line"><span class="comment">//*******************************</span></span><br><span class="line"> 中间还有一些代码。。这里不展示</span><br><span class="line"> <span class="comment">//******************************</span></span><br><span class="line">&lt;% <span class="keyword">if</span> (is_post() &amp;&amp; theme.close_aside) &#123; %&gt;</span><br><span class="line">      getSize();</span><br><span class="line">      <span class="keyword">if</span> (myWidth &gt;= <span class="number">1024</span>) &#123;</span><br><span class="line">        c.click();</span><br><span class="line">      &#125;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure></p>
<p>好了搞定,默认打开文章的效果如下：  </p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/hexo8_3.jpg" alt=""></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>如果你没看懂的话也没关系，概括起来就修改两个地方</p>
<ol>
<li><code>\themes\jacman\_config.yml</code>里面修改<code>close_aside</code>属性为<code>true</code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">close_aside: <span class="literal">true</span>  <span class="comment">#close sidebar in post page if true</span></span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line"><span class="number">2</span>. `\themes\jacman\layout\_partial\after_footer.ejs`里面添加下面的代码，具体添加在哪里，看看文章里面有提到</span><br><span class="line">``` bash</span><br><span class="line"> $(<span class="string">'#toc.toc-aside'</span>).css(<span class="string">'display'</span>, <span class="string">'block'</span>).addClass(<span class="string">'fadeIn'</span>); //这个是我新加的，修改点</span><br></pre></td></tr></table></figure>
</li>
</ol>
<hr>
<p>最近撸了个java的公众号，学习资源超级多，视频，电子书，最新开发工具一个都不能少，已全部分享到百度云盘，求资源共享，打造一个学习方便，工作方便的java公众号，开源开源，有需求的可以关注~撒花<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/javaLearn.PNG" alt=""></p>
]]></content>
      
        <categories>
            
            <category> hexo干货系列 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hexo干货系列：（七）hexo安装统计插件]]></title>
      <url>http://tengj.top/2016/03/17/hexo7count/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前面介绍了如何让百度和谷歌收录我们的博客，那如何查看自己的博客每天被多少人访问呢~ 这里我介绍下<code>hexo</code>中如何使用统计插件，每天看到自己的博客访问量越来越高也是一种享受。</p>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="开启统计功能"><a href="#开启统计功能" class="headerlink" title="开启统计功能"></a>开启统计功能</h2><p>我使用的<code>Jacman</code>主题的配置文件中就有配置有统计插件，有谷歌，百度以及<code>CNZZ</code>，我最终选择的是<code>CNZZ</code>,原因是<code>CNZZ</code>有手机版，比较好随时查看。百度的一开始我也有安装，不过下载的手机软件我打开时空白的，我是<code>IOS</code>版本的，最终CNZZ整体上让我比较满意<br>对应的配置如下，开启<code>cnzz_tongji</code>对应的<code>enable</code>属性改成<code>true</code>,<code>siteid</code>就从注册的<code>cnzz</code>控制台获取。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#### Analytics</span></span><br><span class="line">google_analytics:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">false</span></span><br><span class="line">  id:        <span class="comment">## e.g. UA-46321946-2 your google analytics ID.</span></span><br><span class="line">  site:      <span class="comment">## e.g. wuchong.me your google analytics site or set the value as auto.</span></span><br><span class="line"><span class="comment">## You MUST upgrade to Universal Analytics first!</span></span><br><span class="line"><span class="comment">## https://developers.google.com/analytics/devguides/collection/upgrade/?hl=zh_CN</span></span><br><span class="line">baidu_tongji:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">false</span></span><br><span class="line">  sitecode: e6d1f421bbc9962127a50488f9ed37d1  <span class="comment">## e.g. e6d1f421bbc9962127a50488f9ed37d1 your baidu tongji site code</span></span><br><span class="line">cnzz_tongji:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  siteid: <span class="number">1253575964</span>   <span class="comment">## e.g. 1253575964 your cnzz tongji site id</span></span><br></pre></td></tr></table></figure></p>
<h2 id="注册CNZZ"><a href="#注册CNZZ" class="headerlink" title="注册CNZZ"></a>注册CNZZ</h2><p>进入<a href="http://tongji.cnzz.com/" target="_blank" rel="external">CNZZ</a>注册一下，然后添加你的站点，如下</p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/hexo7_1.png" alt="">  </p>
<p>添加完后，点击下图的统计代码  </p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/hexo7_2.png" alt="">  </p>
<p>siteid在地址栏上面就可以获取，复制下来，配置在上文提到的<code>_config.yml</code>中，CNZZ提供了许多样式，看你个人喜欢  </p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/hexo7_3.png" alt="">  </p>
<p><code>Jacman</code>默认对应的是第一种文字样式，我是用默认的。如果你想替换其他的样式，复制js代码。替换 <code>\themes\jacman\layout\_partial\analytics.ejs</code>中的代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;% <span class="keyword">if</span> (theme.cnzz_tongji.enable)&#123; %&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"><span class="keyword">var</span> cnzz_protocol = ((<span class="string">"https:"</span> == <span class="built_in">document</span>.location.protocol) ? <span class="string">" https://"</span> : <span class="string">" http://"</span>);<span class="built_in">document</span>.write(<span class="built_in">unescape</span>(<span class="string">"%3Cspan id='cnzz_stat_icon_1257841330'%3E%3C/span%3E%3Cscript src='"</span> + cnzz_protocol + <span class="string">"s11.cnzz.com/z_stat.php%3Fid%3D1257841330%26online%3D1%26show%3Dline' type='text/javascript'%3E%3C/script%3E"</span>));</span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">%</span> &#125; %&gt;</span></span></span><br></pre></td></tr></table></figure></p>
<h2 id="配置密码"><a href="#配置密码" class="headerlink" title="配置密码"></a>配置密码</h2><p>上面配置好后，部署博客，你会发现在博客的最下面会出现统计的样式，如图：  </p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/hexo7_4.jpg" alt="">  </p>
<p>点击站长统计就能查看了，但是如果你不想被人查看，可以设置密码，这样就只有你自己能查看：  </p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/hexo7_5.png" alt=""><br><img src="http://7xqch5.com1.z0.glb.clouddn.com/hexo7_6.png" alt=""><br><img src="http://7xqch5.com1.z0.glb.clouddn.com/hexo7_7.png" alt=""></p>
<h2 id="手机端截图"><a href="#手机端截图" class="headerlink" title="手机端截图"></a>手机端截图</h2><p>下载手机端的CNZZ，查看起来更加轻松，截几个手机端的图，如下：  </p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/hexo7_8.jpg" alt=""></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>到此，就搞定了统计功能，整个博客基本上功能也就齐全了。每天晚上看看自己博客的流量那种感觉蛮爽哇卡卡。后续打算介绍下<code>markdown</code>写法，只需要掌握一点点就可以写出很棒的排版，真的很方便。相见恨晚~~</p>
<hr>
<p>最近撸了个java的公众号，学习资源超级多，视频，电子书，最新开发工具一个都不能少，已全部分享到百度云盘，求资源共享，打造一个学习方便，工作方便的java公众号，开源开源，有需求的可以关注~撒花<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/javaLearn.PNG" alt=""></p>
]]></content>
      
        <categories>
            
            <category> hexo干货系列 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[百度链接提交主动推送后不收录的原因]]></title>
      <url>http://tengj.top/2016/03/14/baidunoshouluresson/</url>
      <content type="html"><![CDATA[<h1 id="前言-（转载）"><a href="#前言-（转载）" class="headerlink" title="前言 （转载）"></a>前言 （转载）</h1><p>自从百度站长平台开放了百度链接主动推送接口以后，很多站长都开始使用百度开放的这个主动推送接口来推送网站的最新内容，但是在使用这个推送接口的时候，大家肯定也发现了不少问题，比如推送的内容不收录、推送的链接数量 和 站长平台显示的主动提交数量不符等等 ，今天小编就针对这些问题给大家做一个详细的说明。</p>
<h2 id="主动推送不一定百分百收录"><a href="#主动推送不一定百分百收录" class="headerlink" title="主动推送不一定百分百收录"></a>主动推送不一定百分百收录</h2><p>虽然说百度链接主动推送在收录速度上要优先于sitemap 和 网页提交，但是提交的内容是否收录还要取决你内容本身，如果你提交的网页内容质量较低，属于采集内容或者违规内容，那么这样的内容及时你使用主动推送提交也不一定能够百分百收录。</p>
<p>百度的主动推送只是给站长们提供一个能够更快让百度发现网页链接的接口，但是内容是否会被收录依然要经过百度数据库的对比检测以后，符合收录标准的内容才会被收录。</p>
<h2 id="主动推送并非立马出现在搜索结果快照中"><a href="#主动推送并非立马出现在搜索结果快照中" class="headerlink" title="主动推送并非立马出现在搜索结果快照中"></a>主动推送并非立马出现在搜索结果快照中</h2><p>很多站长朋友们使用的百度的主动推送接口以后，都错误的以为通过百度主动推送接口推送的内容都可以在第一时间内显示在百度搜索结果的快照中，其实这是错误的理解，因为你推送的内容仅仅是进入了百度搜索的数据库中，是否会在搜索结果快照中显示还需要百度爬虫的进一步检测和处理，一般收录以后的内容1-5天才会出现在快照中。当然，如果你的网站质量较高，或者你的网站属于新闻源类型的网站，一般主动推送以后的内容确实是立刻就能出现在搜索引擎结果中的。</p>
<p>但是对于大部分的企业网站或者个人网站来说，主动推送的内容也不是立马在快照中显示的，所以大家在主动推送以后不要急着去查询快照结果，很多人查询不到快照结果就会不断重新提交相同的页面，这样对于网站的排名其实是非常不好的，因为百度的主动推送是为了让大家推送最新产生的网页，而不是不断提交相同的旧网页，如果重复提交之前提交过的网页，有可能会被搜索引擎错误的认为是作弊行为，可能会给网站带来更多的负面作用。</p>
<h2 id="站长平台显示的主动提交数量和推送数量不符"><a href="#站长平台显示的主动提交数量和推送数量不符" class="headerlink" title="站长平台显示的主动提交数量和推送数量不符"></a>站长平台显示的主动提交数量和推送数量不符</h2><p>这个问题相信也有一些站长已经发现了，比如我们5月30号使用百度主动推送接口推送了2000条内容，但是等到过几天，去百度站长平台的后天查看时，发现百度站长平台显示的主动提交数量可能就是几条或者几十条，并非2000条内容，遇到这样的情况以后，很多站长都会感觉可能是百度主动推送接口出问题了。</p>
<p>其实并非如此，如果你推送的2000条内容全部为最新产生的链接，那么百度站长平台看到的提交数量就是2000条，如果你主动推送的2000条内容中有很多都是之前已经被百度收录的内容，那么百度站长平台显示的主动提交数量就是你推送的总数量减去百度之前收录的网页数量的一个结果。</p>
<p>也就是说百度站长平台显示的主动提交数量统计的是网站最新产生并且提交到百度的数量，并非你推送的真实数量，从这一点我们也不难看出，百度主动推送存在的目的就是让站长们推送最新产生的链接，而不是推送之前已经收录的内容。</p>
<p>以上这三个方面就是百度主动推送接口最近可能大家遇到的一些问题，如果大家在使用百度主动推送接口时还遇到过什么其他的奇怪问题，欢迎一起讨论，让我们共同学习，一起进步！</p>
<hr>
<p>最近撸了个java的公众号，学习资源超级多，视频，电子书，最新开发工具一个都不能少，已全部分享到百度云盘，求资源共享，打造一个学习方便，工作方便的java公众号，开源开源，有需求的可以关注~撒花<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/javaLearn.PNG" alt=""></p>
]]></content>
      
        <categories>
            
            <category> SEO </category>
            
        </categories>
        
        
        <tags>
            
            <tag> SEO </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hexo干货系列：（六）hexo提交搜索引擎（百度+谷歌）]]></title>
      <url>http://tengj.top/2016/03/14/hexo6seo/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>能看到这里，说明大家都跟我一样，已经把博客搭起来并洋洋洒洒写了几篇博文，正春风得意感觉良好的时候，搭建博客有屎以来最大的危机出现在没有准备的我面前，百度+谷歌都无法搜索到我的博客。装逼还没几天就这样，真是不能忍。于是就研究了几天，鼓捣出了这篇文章。教大家如何脱坑。</p>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>下面准备分别介绍谷歌和百度如何提交搜索引擎，其中有一些共同的地方，这里先说明</p>
<h2 id="先确认博客是否被收录"><a href="#先确认博客是否被收录" class="headerlink" title="先确认博客是否被收录"></a>先确认博客是否被收录</h2><p>在百度或者谷歌上面输入下面格式来判断，如果能搜索到就说明被收录，否则就没有，用你的域名替代我的tengj.top<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">site:tengj.top</span><br></pre></td></tr></table></figure></p>
<p>我目前搜索结果如图：<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/hexo6_1.png" alt=""><br><img src="http://7xqch5.com1.z0.glb.clouddn.com/hexo6_2.png" alt=""></p>
<h2 id="验证网站"><a href="#验证网站" class="headerlink" title="验证网站"></a>验证网站</h2><p>两个搜索引擎入口：</p>
<ul>
<li><a href="https://www.google.com/webmasters/tools/home?hl=zh-CN" target="_blank" rel="external">Google搜索引擎提交入口</a></li>
<li><a href="http://www.baidu.com/search/url_submit.htm" target="_blank" rel="external">百度搜索引擎入口</a></li>
</ul>
<blockquote>
<p><a href="http://zhanzhang.baidu.com/college/courseinfo?id=267&amp;page=1#h2_article_title3" target="_blank" rel="external">为什么要验证网站</a>　　<br>站长平台推荐站长添加主站（您网站的链接也许会使用www 和非 www 两种网址，建议添加用户能够真实访问到的网址），添加并验证后，可证明您是该域名的拥有者，可以快捷批量添加子站点，查看所有子站数据，无需再一一验证您的子站点。<br><a href="http://zhanzhang.baidu.com/college/courseinfo?id=267&amp;page=1#h2_article_title13" target="_blank" rel="external">如何验证网站</a><br>首先如果您的网站已使用了百度统计，您可以使用统计账号登录平台，或者绑定站长平台与百度统计账号，站长平台支持您批量导入百度统计中的站点，您不需要再对网站进行验证。<br>百度站长平台为未使用百度统计的站点提供三种验证方式：<strong>文件验证、html标签验证、CNAME验证</strong>。<br>　　1.文件验证：您需要下载验证文件，将文件上传至您的服务器，放置于域名根目录下。<br>　　2.html标签验证：将html标签添加至网站首页html代码的<head>标签与</head>标签之间。<br>　　3.CNAME验证：您需要登录域名提供商或托管服务提供商的网站，添加新的DNS记录。<br>验证完成后，我们将会认为您是网站的拥有者。为使您的网站一直保持验证通过的状态，请保留验证的文件、html标签或CNAME记录，我们会去定期检查验证记录。<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/hexo6_16.png" alt=""><br>不管谷歌还是百度都要先添加域名，然后验证网站，这里统一都使用文件验证，就是下载对应的html文件，放到域名根目录下，也就收博客根目录下的source下面  </p>
</blockquote>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/hexo6_3.png" alt=""></p>
<p>然后部署到服务器,输入地址：<a href="http://tengj.top/googlead0e22632f59a368.html">http://tengj.top/googlead0e22632f59a368.html</a> 能访问到就可以点验证按钮。  </p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/hexo6_4.png" alt=""></p>
<blockquote>
<p>站点地图是一种文件，您可以通过该文件列出您网站上的网页，从而将您网站内容的组织架构告知Google和其他搜索引擎。Googlebot等搜索引擎网页抓取工具会读取此文件，以便更加智能地抓取您的网站。  </p>
</blockquote>
<p>我们要先安装一下，打开你的hexo博客根目录，分别用下面两个命令来安装针对谷歌和百度的插件  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save</span><br><span class="line">npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure>
<p>在博客目录的_config.yml中添加如下代码(我不加也可以)  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 自动生成sitemap</span></span><br><span class="line">sitemap:</span><br><span class="line">path: sitemap.xml</span><br><span class="line">baidusitemap:</span><br><span class="line">path: baidusitemap.xml</span><br></pre></td></tr></table></figure>
<p>编译你的博客  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure>
<p>如果你在你的博客根目录的<code>public</code>下面发现生成了<code>sitemap.xml</code>以及<code>baidusitemap.xml</code>就表示成功了。<br>这时候<code>sitemap.xml</code>跟<code>baidusitemap.xml</code>里面的内容一样，但是文章链接都是tengj.github.io的，这里我就很奇怪了，我博客同时对应github和coding的，为啥生成的<code>sitemap.xml</code>对应的域名都指向了github，<code>sitemap.xml</code>我是要提交谷歌的，对应github的域名没问题，但是<code>baidusitemap.xml</code>里面域名还对应github问题就大了，因为github禁止了百度爬虫，提交了百度也是不会访问的。所以我把<code>baidusitemap.xml</code>里面的改成了我的个人域名tengj.top，因为国内用户访问tengj.top其实是访问coding上面。<br>部署后你分别访问<br><a href="http://tengj.top/sitemap.xml">http://tengj.top/sitemap.xml</a><br><a href="http://tengj.top/baidusitemap.xml">http://tengj.top/baidusitemap.xml</a><br>效果如下图：<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/hexo6_6.png" alt=""><br><img src="http://7xqch5.com1.z0.glb.clouddn.com/hexo6_7.png" alt=""></p>
<h2 id="让谷歌收录我们的博客"><a href="#让谷歌收录我们的博客" class="headerlink" title="让谷歌收录我们的博客"></a>让谷歌收录我们的博客</h2><p>谷歌操作比较简单，就是向<a href="https://www.google.com/webmasters/tools" target="_blank" rel="external">Google站长工具</a>提交sitemap  </p>
<p>登录Google账号，添加了站点验证通过后，选择站点，之后在<code>抓取</code>——<code>站点地图</code>中就能看到<code>添加/测试站点地图</code>，如下图：  </p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/hexo6_5.png" alt="">  </p>
<p>谷歌我提交过了一天就能搜索到我的博客了，效率很高。</p>
<h2 id="让百度收录我们的博客"><a href="#让百度收录我们的博客" class="headerlink" title="让百度收录我们的博客"></a>让百度收录我们的博客</h2><p>谷歌很好搞定，百度就感觉很难，我从提交百度到现在写这篇博客，在百度那边也只能搜索到一条我的博客，真不容易。<br>正常情况，是要等百度爬虫来爬到你的网站，才会被收录。<br>但是github屏蔽了百度爬虫目前，所以我们要主动出击，我们自己把网站提交给百度。<br>这就要使用到<a href="http://zhanzhang.baidu.com/" target="_blank" rel="external">百度站长平台</a></p>
<h3 id="验证网站-1"><a href="#验证网站-1" class="headerlink" title="验证网站"></a>验证网站</h3><hr>
<p>验证网站最上面提过了，这里直接截图<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/hexo6_8.png" alt=""><br><img src="http://7xqch5.com1.z0.glb.clouddn.com/hexo6_9.png" alt=""><br><img src="http://7xqch5.com1.z0.glb.clouddn.com/hexo6_10.png" alt=""></p>
<h3 id="网页抓取"><a href="#网页抓取" class="headerlink" title="网页抓取"></a>网页抓取</h3><p>上面步骤成功后，进入站点管理，找到网页抓取这边详情点进去<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/hexo6_11.png" alt=""></p>
<p>我们主动提交博客文章链接</p>
<blockquote>
<p>如何选择链接提交方式<br>1、主动推送：最为快速的提交方式，推荐您将站点当天新产出链接立即通过此方式推送给百度，以保证新链接可以及时被百度收录。<br>2、自动推送：最为便捷的提交方式，请将自动推送的JS代码部署在站点的每一个页面源代码中，部署代码的页面在每次被浏览时，链接会被自动推送给百度。可以与主动推送配合使用。<br>3、sitemap：您可以定期将网站链接放到sitemap中，然后将sitemap提交给百度。百度会周期性的抓取检查您提交的sitemap，对其中的链接进行处理，但收录速度慢于主动推送。<br>4、手动提交：一次性提交链接给百度，可以使用此种方式。</p>
</blockquote>
<p>一般主动提交比手动提交效果好，这里介绍主动提交的三种方法  </p>
<p>从效率上来说：</p>
<blockquote>
<p><strong>主动推送&gt;自动推送&gt;sitemap</strong></p>
</blockquote>
<h4 id="主动推送"><a href="#主动推送" class="headerlink" title="主动推送"></a>主动推送</h4><p>主动推送是百度搜索为站长们快速提交数据针对性开发的最快捷工具，但是也最难，没有代码功底的小伙伴估计就不会了。<br>没事，博主既然写了这篇博客就表示博主找到方法了，我自己用java写了个post的推送示例，部署到了coding，我也不知道能部署多久，好像部署在coding的演示那边每天都会扣除码币。<br>地址：<a href="http://tengj.oschina.mopaasapp.com/sendBaidu/view" target="_blank" rel="external">戳我</a></p>
<p><strong>说明</strong>：  </p>
<blockquote>
<p>选择数据类型，默认推送数据，也有更新数据，删除数据。后面2个一般用不到<br>填写站点，也就是你的域名，我的是tengj.top<br>填写token,token在主动推送例子那边有一串。实在找不到就按下<code>CTRL+F</code>查找token<br>填写文章地址，填写你要提交的文章链接，每行一条记录</p>
</blockquote>
<p>成功提示： </p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/hexo6_12.png" alt="">  </p>
<p>地址错误提示：  </p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/hexo6_13.png" alt="">  </p>
<h4 id="自动推送"><a href="#自动推送" class="headerlink" title="自动推送"></a>自动推送</h4><p>自动推送很简单，就是在你代码里面嵌入自动推送JS代码，在页面被访问时，页面URL将立即被推送给百度<br>代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> bp = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">    bp.src = <span class="string">'//push.zhanzhang.baidu.com/push.js'</span>;</span><br><span class="line">    <span class="keyword">var</span> s = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"script"</span>)[<span class="number">0</span>];</span><br><span class="line">    s.parentNode.insertBefore(bp, s);</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>
<p>我是放在<code>\themes\jacman\layout\_partial\after_footer.ejs</code>中，添加到下面就行。</p>
<h4 id="sitemap提交"><a href="#sitemap提交" class="headerlink" title="sitemap提交"></a>sitemap提交</h4><p><code>sitemap</code>提交最上面提过了，直接提交<a href="http://tengj.top/baidusitemap.xml">http://tengj.top/baidusitemap.xml</a> 就行，大家看下图就知道，一开始我是提交 <code>sitemap.xml</code>，里面是指向<code>github</code>的，结果主域校验失败了，后来切换到指向<code>tengj.top</code>域名的<code>baidusitemap.xml</code>就提交成功。  </p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/hexo6_14.png" alt=""></p>
<p>最后大家看下我最近提交的情况  </p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/hexo6_15.png" alt=""></p>
<blockquote>
<p><strong>为什么自动推送可以更快的将页面推送给百度搜索？</strong>基于自动推送的实现原理问题，当新页面每次被浏览时，页面URL会自动推送给百度，无需站长汇总URL再进行主动推送操作。<br>借助用户的浏览行为来触发推送动作，省去了站长人工操作的时间。<br><strong>自动推送和链接提交有什么区别？</strong>已经在使用链接提交的网站还需要再部署自动推送代码吗？<br>二者之间互不冲突，互为补充。已经使用主动推送的站点，依然可以部署自动推送的JS代码，二者一起使用。<br><strong>什么样的网站更适合使用自动推送？</strong>自动推送由于实现便捷和后续维护成本低的特点，适合技术能力相对薄弱，无能力支持全天候实时主动推送程序的站长。<br>站长仅需一次部署自动推送JS代码的操作，就可以实现新页面被浏览即推送的效果，低成本实现链接自动提交。<br>同时，我们也支持主动推送和自动推送代码配合使用，二者互不影响。</p>
</blockquote>
<p><a href="http://tengj.top/2016/03/14/baidunoshouluresson/">百度链接提交主动推送后不收录的原因</a></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://selfboot.cn/2014/12/21/add_blog_to_google/" target="_blank" rel="external"># 博客推广——提交搜索引擎</a></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>写了3个小时终于写差不多了，很早就想写这篇的，结果百度不给力，一直不给收录所以拖到今天，昨天花了点时间写了下主动推送的接口方便大家，地址上面有。<br>3月8号 分别用<code>sitemap</code>和<code>baidusitemap</code>提交到谷歌和百度<br>3月9号 谷歌的收录了，可以搜索到我的博客<br>3月10号 百度收录了</p>
<hr>
<p>最近撸了个java的公众号，学习资源超级多，视频，电子书，最新开发工具一个都不能少，已全部分享到百度云盘，求资源共享，打造一个学习方便，工作方便的java公众号，开源开源，有需求的可以关注~撒花<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/javaLearn.PNG" alt=""></p>
]]></content>
      
        <categories>
            
            <category> hexo干货系列 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[springMVC干货系列：从零搭建springMVC+mybatis（一）：maven WEB项目的搭建]]></title>
      <url>http://tengj.top/2016/03/13/springmvcseries1/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>今天手把手来教大家如何搭建基于Maven的SpringMVC WEB项目。</p>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="开发环境介绍"><a href="#开发环境介绍" class="headerlink" title="开发环境介绍"></a>开发环境介绍</h2><blockquote>
<p>IDE: MyEclipse 2014<br>jdk: 1.7<br>maven：apache-maven-3.1.1  </p>
</blockquote>
<p>好了，基本环境只要上面这些就行，maven不需要安装，只要有解压包就行。MyEclipse 2014有自带的插件，我们只要指定下路径就行。</p>
<h2 id="MyEclipse-2014中Maven的配置"><a href="#MyEclipse-2014中Maven的配置" class="headerlink" title="MyEclipse 2014中Maven的配置"></a>MyEclipse 2014中Maven的配置</h2><p>打开myeclipse中的 <code>Window=&gt;Preferences=&gt;Myeclipse=&gt;Maven4Myeclipse</code><br>配置jdk，这里我们选择1.7<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/springmvc1_1.png" alt="">  </p>
<p>配置好maven路径，也就是你之前存放maven解压包的路径<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/springmvc1_2.png" alt="">  </p>
<p>指定<code>User Settings</code>,对应settings.xml以及本地仓库地址，我这边是建在盘，路径为<code>E:\m2\repository</code>。<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/springmvc1_3.png" alt="">  </p>
<h2 id="创建WEB项目"><a href="#创建WEB项目" class="headerlink" title="创建WEB项目"></a>创建WEB项目</h2><p>新建一个web项目  </p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/springmvc1_4.jpg" alt="">  </p>
<p>配置项目基本信息，项目名，java EE,java版本，其中记得要勾上Add maven support，这样才会生成带有maven的工程。  </p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/springmvc1_5.png" alt="">  </p>
<p>创建成功后出正确的项目结构应该是这样,如果不是下图中这样，src下面没有以下这些包也没事，自己创建<code>src/main/java</code>,<code>src/main/resources</code>,<code>src/test/java</code>,<code>src/test/resources</code>,然后指定以下这些包为source就行。  </p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/springmvc1_6.png" alt="">  </p>
<h2 id="配置需要的安装包"><a href="#配置需要的安装包" class="headerlink" title="配置需要的安装包"></a>配置需要的安装包</h2><p>下面列出目前需要用到包，直接在pom.xl里面添加就行<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">project</span> <span class="attribute">xmlns</span>=<span class="value">"http://maven.apache.org/POM/4.0.0"</span> </span><br><span class="line">		<span class="attribute">xmlns:xsi</span>=<span class="value">"http://www.w3.org/2001/XMLSchema-instance"</span> </span><br><span class="line">		<span class="attribute">xsi:schemaLocation</span>=<span class="value">"http://maven.apache.org/POM/4.0.0 </span><br><span class="line">		http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="title">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>SpringMVCMybatis<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>SpringMVCMybatis<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="title">packaging</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">name</span>&gt;</span>SpringMVCMybatis<span class="tag">&lt;/<span class="title">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">description</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">properties</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="title">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="title">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">  		<span class="tag">&lt;<span class="title">spring.version</span>&gt;</span>4.1.1.RELEASE<span class="tag">&lt;/<span class="title">spring.version</span>&gt;</span></span><br><span class="line">  		<span class="tag">&lt;<span class="title">cxf.version</span>&gt;</span>2.7.15<span class="tag">&lt;/<span class="title">cxf.version</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="title">slf4j-version</span>&gt;</span>1.7.12<span class="tag">&lt;/<span class="title">slf4j-version</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="title">log4j-version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="title">log4j-version</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="title">mybatis-version</span>&gt;</span>3.3.0<span class="tag">&lt;/<span class="title">mybatis-version</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="title">mybatis-spring-version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="title">mybatis-spring-version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">properties</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">dependencies</span>&gt;</span></span><br><span class="line">  	<span class="comment">&lt;!-- 日志配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">version</span>&gt;</span>$&#123;log4j-version&#125;<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">version</span>&gt;</span>$&#123;slf4j-version&#125;<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">version</span>&gt;</span>$&#123;slf4j-version&#125;<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="title">version</span>&gt;</span>3.3<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="title">version</span>&gt;</span>1.2.1<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 数据源配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>com.mchange<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">version</span>&gt;</span>0.9.5.1<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--数据库相关, mysql, mybatis--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">version</span>&gt;</span>5.1.37<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">version</span>&gt;</span>$&#123;mybatis-spring-version&#125;<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">version</span>&gt;</span>$&#123;mybatis-version&#125;<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>mybatis-generator-core<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- spring用到的包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">version</span>&gt;</span>4.1.1.RELEASE<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--测试--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="title">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">version</span>&gt;</span>4.1.1.RELEASE<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="title">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>javax<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>javaee-api<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">version</span>&gt;</span>7.0<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="title">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.glassfish.web<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>javax.servlet.jsp.jstl<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">version</span>&gt;</span>1.2.2<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">version</span>&gt;</span>2.3.2<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">configuration</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">source</span>&gt;</span>1.7<span class="tag">&lt;/<span class="title">source</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">target</span>&gt;</span>1.7<span class="tag">&lt;/<span class="title">target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">configuration</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="title">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>maven-war-plugin<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">configuration</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">version</span>&gt;</span>3.1<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">failOnMissingWebXml</span>&gt;</span>false<span class="tag">&lt;/<span class="title">failOnMissingWebXml</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">configuration</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="title">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">project</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="配置SpringMVC需要的配置文件"><a href="#配置SpringMVC需要的配置文件" class="headerlink" title="配置SpringMVC需要的配置文件"></a>配置SpringMVC需要的配置文件</h2><p>xml配置，注意里面配置springMVC需要用到的<code>DispatcherServlet</code>，指向的地址是<code>classpath:spring/applicationContext.xml</code>，当然此时还没创建这个<code>applicationCVontext.xml</code>,下一个步骤来创建</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">web-app</span> <span class="attribute">version</span>=<span class="value">"2.4"</span> <span class="attribute">xmlns</span>=<span class="value">"http://java.sun.com/xml/ns/j2ee"</span></span><br><span class="line">    <span class="attribute">xmlns:xsi</span>=<span class="value">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">    <span class="attribute">xsi:schemaLocation</span>=<span class="value">"http://java.sun.com/xml/ns/j2ee</span><br><span class="line">    http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">display-name</span>&gt;</span>springmvctouchbaidu<span class="tag">&lt;/<span class="title">display-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">servlet-name</span>&gt;</span>springmvctouchbaidu<span class="tag">&lt;/<span class="title">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="title">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="title">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">param-value</span>&gt;</span>classpath:spring/applicationContext.xml<span class="tag">&lt;/<span class="title">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="title">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">servlet-name</span>&gt;</span>springmvctouchbaidu<span class="tag">&lt;/<span class="title">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="title">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="title">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="title">filter-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="title">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="title">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">param-name</span>&gt;</span>forceEncoding<span class="tag">&lt;/<span class="title">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="title">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="title">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="title">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">session-config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">session-timeout</span>&gt;</span>60<span class="tag">&lt;/<span class="title">session-timeout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">session-config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在<code>src/main/resources</code>下面创建个spring目录用来存放<code>applicationContext.xml</code><br>后期会用的的配置很多，所以我一般会根据不同用途创建不同别名的spring配置文件，然后用<code>applicationContext.xml</code>统一起来。<br>这里我创建了 <code>applicationContext.xml</code>以及<code>applicationContext-mvc.xml</code><br>applicationContext.xml配置：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">beans</span> <span class="attribute">xmlns</span>=<span class="value">"http://www.springframework.org/schema/beans"</span></span><br><span class="line">	   <span class="attribute">xmlns:xsi</span>=<span class="value">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">	   <span class="attribute">xsi:schemaLocation</span>=<span class="value">"http://www.springframework.org/schema/beans</span><br><span class="line">	   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd"</span>&gt;</span></span><br><span class="line">	 <span class="tag">&lt;<span class="title">import</span> <span class="attribute">resource</span>=<span class="value">"classpath:spring/applicationContext-mvc.xml"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">beans</span> <span class="attribute">xmlns</span>=<span class="value">"http://www.springframework.org/schema/beans"</span></span><br><span class="line">       <span class="attribute">xmlns:xsi</span>=<span class="value">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">       <span class="attribute">xmlns:context</span>=<span class="value">"http://www.springframework.org/schema/context"</span></span><br><span class="line">       <span class="attribute">xmlns:mvc</span>=<span class="value">"http://www.springframework.org/schema/mvc"</span></span><br><span class="line">       <span class="attribute">xsi:schemaLocation</span>=<span class="value">"http://www.springframework.org/schema/beans </span><br><span class="line">       http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</span><br><span class="line">       http://www.springframework.org/schema/context </span><br><span class="line">       http://www.springframework.org/schema/context/spring-context-3.0.xsd </span><br><span class="line">       http://www.springframework.org/schema/mvc </span><br><span class="line">       http://www.springframework.org/schema/mvc/spring-mvc.xsd"</span></span><br><span class="line">       <span class="attribute">default-lazy-init</span>=<span class="value">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">context:component-scan</span> <span class="attribute">base-package</span>=<span class="value">"com.tengj.demo"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">mvc:resources</span> <span class="attribute">location</span>=<span class="value">"/WEB-INF/pages/"</span> <span class="attribute">mapping</span>=<span class="value">"/pages/**"</span>/&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">class</span>=<span class="value">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"prefix"</span> <span class="attribute">value</span>=<span class="value">"/WEB-INF/pages/"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"suffix"</span> <span class="attribute">value</span>=<span class="value">".jsp"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">bean</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 默认的注解映射的支持 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">mvc:message-converters</span> <span class="attribute">register-defaults</span>=<span class="value">"true"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">class</span>=<span class="value">"com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"supportedMediaTypes"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="title">list</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="title">value</span>&gt;</span>text/plain;charset=utf-8<span class="tag">&lt;/<span class="title">value</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="title">value</span>&gt;</span>application/json;charset=utf-8<span class="tag">&lt;/<span class="title">value</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="title">value</span>&gt;</span>application/x-www-form-urlencoded<span class="tag">&lt;/<span class="title">value</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="title">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="title">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">mvc:message-converters</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">mvc:annotation-driven</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>其中一些重要的配置下篇文章详细的说明</p>
<blockquote>
<p>context:component-scan 用来扫描指定的路径下的包，来加载组件用的<br>mvc:resources  指定静态资源路径</p>
</blockquote>
<h2 id="实现一个简单的springMVC请求"><a href="#实现一个简单的springMVC请求" class="headerlink" title="实现一个简单的springMVC请求"></a>实现一个简单的springMVC请求</h2><p>配置文件配置好了，我们就来测试一下，写一个controller来实现前后台交互<br>在src/main/java下面创建如下格式的文件夹。这是我习惯的写法。</p>
<blockquote>
<p>common用来存放公共的类<br>controller控制层<br>service层用来处理业务逻辑<br>dao层用来处理数据库操作<br>dto层用来存放mybatis根据表自动生成的实体对象  </p>
</blockquote>
<p>具体结构如下图：<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/springmvc1_7.png" alt=""></p>
<p>在<code>controller包</code>下面创建一个类<code>SendToBaiduController</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tengj.demo.controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"></span><br><span class="line"><span class="annotation">@Controller</span></span><br><span class="line"><span class="annotation">@RequestMapping</span>(value=<span class="string">"/sendBaidu"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendToBaiduController</span> </span>&#123;</span><br><span class="line">    <span class="annotation">@RequestMapping</span>(value=<span class="string">"/view"</span>,method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"进来了"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>index.jsp</code>代码：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">%@</span> <span class="attribute">page</span> <span class="attribute">language</span>=<span class="value">"java"</span> <span class="attribute">import</span>=<span class="value">"java.util.*"</span> <span class="attribute">pageEncoding</span>=<span class="value">"UTF-8"</span><span class="value">%</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">%</span></span><br><span class="line"><span class="attribute">String</span> <span class="attribute">path</span> = <span class="attribute">request.getContextPath</span>();</span><br><span class="line"><span class="attribute">String</span> <span class="attribute">basePath</span> = <span class="attribute">request.getScheme</span>()+"<span class="attribute">:</span>//"+<span class="attribute">request.getServerName</span>()+"<span class="attribute">:</span>"+<span class="attribute">request.getServerPort</span>()+<span class="attribute">path</span>+"/";</span><br><span class="line">%&gt;</span></span><br><span class="line"><span class="doctype">&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">base</span> <span class="attribute">href</span>=<span class="value">"&lt;%=basePath%&gt;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">title</span>&gt;</span>My JSP 'index.jsp' starting page<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">http-equiv</span>=<span class="value">"pragma"</span> <span class="attribute">content</span>=<span class="value">"no-cache"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">http-equiv</span>=<span class="value">"cache-control"</span> <span class="attribute">content</span>=<span class="value">"no-cache"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">http-equiv</span>=<span class="value">"expires"</span> <span class="attribute">content</span>=<span class="value">"0"</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">http-equiv</span>=<span class="value">"keywords"</span> <span class="attribute">content</span>=<span class="value">"keyword1,keyword2,keyword3"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">http-equiv</span>=<span class="value">"description"</span> <span class="attribute">content</span>=<span class="value">"This is my page"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">        跳转进来，表示springMVC流程成功！</span><br><span class="line">  <span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>部署到tomcat启动服务看看 输入地址是否控制台会打印“进来了”这3字，并跳转到index界面<br><a href="http://localhost:8080/springmvctouchbaidu/sendBaidu/view" target="_blank" rel="external">http://localhost:8080/springmvctouchbaidu/sendBaidu/view</a><br>大家看，如图表示springMVC整体流程成功了<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/springmvc1_8.png" alt=""><br><img src="http://7xqch5.com1.z0.glb.clouddn.com/springmvc1_9.png" alt=""></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>到此，基于Maven的SpringMVC WEB项目搭建算是成功了，后续会基于这个基础添加其他的功能，比如整合数据库框架mybatis，多数据源处理，定时任务等等。下篇文章将整体上介绍springMVC的配置文件以及注解标签的使用。  </p>
<p>我是嘟嘟MD，我为这篇文章代言。  </p>
<blockquote>
<p>欢迎转载，但希望您能注明出处，毕竟没啥人气囧</p>
</blockquote>
<hr>
<p>最近撸了个java的公众号，学习资源超级多，视频，电子书，最新开发工具一个都不能少，已全部分享到百度云盘，求资源共享，打造一个学习方便，工作方便的java公众号，开源开源，有需求的可以关注~撒花<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/javaLearn.PNG" alt=""></p>
]]></content>
      
        <categories>
            
            <category> springMVC干货系列 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> springMVC </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用高级搜索指令提高搜索效率（百度，谷歌）]]></title>
      <url>http://tengj.top/2016/03/12/hightsearchline/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我们普通人平时都会用到搜索引擎，但也只是简单的输入名称查询而已，这里介绍几个比较简单但是又及其好用的高级搜索指令，能让你搜索效率提高好几倍。</p>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><blockquote>
<p>高级搜索指令<br>这么理解：一般人不知道的，能够提高搜索效率以及精度的一些特殊指令。</p>
</blockquote>
<h2 id="双引号（搜索：“关键词”）"><a href="#双引号（搜索：“关键词”）" class="headerlink" title="双引号（搜索：“关键词”）"></a>双引号（搜索：“关键词”）</h2><p>把搜索词汇放在双引号中，代表完全匹配搜索，也就是说搜索出来的结果页面都是保护双引号中所出现的所有词汇，连顺序也是完全匹配的。百度和Google都是支持这个指令的。</p>
<h2 id="减号（搜索：关键词-不需要的关键词）"><a href="#减号（搜索：关键词-不需要的关键词）" class="headerlink" title="减号（搜索：关键词  -不需要的关键词）"></a>减号（搜索：关键词  -不需要的关键词）</h2><p>减号代表搜索引擎显示不包括减号后面词汇的页面。使用这个指令时减号前面必须是空格，减号后面没有空格，要紧跟着需要排除的词。Google和百度都支持这个指令。使用减号高级指令可以更加准确的找到需要的文件，尤其是某些词语有多重意义的时候。</p>
<h2 id="星号-（搜索：搜索-擎）"><a href="#星号-（搜索：搜索-擎）" class="headerlink" title="星号 （搜索：搜索*擎）"></a>星号 （搜索：搜索*擎）</h2><p>星号是常用的通配符，也可以使用在搜索引擎中。百度不支持<em>号指令。比如在Google中搜索“ 搜索</em>擎”，其中*代表任何文字、出现的结果就不仅仅是包含“搜索引擎”的页面了。</p>
<h2 id="inurl：（搜索：inurl：任意字符串）"><a href="#inurl：（搜索：inurl：任意字符串）" class="headerlink" title="inurl：（搜索：inurl：任意字符串）"></a>inurl：（搜索：inurl：任意字符串）</h2><p>inurl：指令用于搜索查询词出现在URL中的页面，可以按英文字面意思理解。百度和Google都是支持inurl：指令的。inurl：指令不仅支持英文，还支持中文。<br>高级搜索指令inurl的语法格式为：inurl：xxx（xxx可以为任意字符串）。此命令是查找url中包含xxx的网页。<br>如果你是做SEO的，那么inurl：指令对你会很有用，因为你可以快速的找到竞争对手（因为关键词出现在URL中对排名有一定的影响）。</p>
<h2 id="intitle：返回的是页面title中包含关键词的页面"><a href="#intitle：返回的是页面title中包含关键词的页面" class="headerlink" title="intitle：返回的是页面title中包含关键词的页面"></a>intitle：返回的是页面title中包含关键词的页面</h2><p>百度和谷歌都支持intitle。 title是目前页面优化最重要的因素。无论是什么网站，基本都会把关键词放入title中。<br>详细用法：<a href="http://jingyan.baidu.com/article/3f16e003c21c162591c103a6.html" target="_blank" rel="external">http://jingyan.baidu.com/article/3f16e003c21c162591c103a6.html</a></p>
<h2 id="filetype：搜索特定文件格式的时候使用"><a href="#filetype：搜索特定文件格式的时候使用" class="headerlink" title="filetype：搜索特定文件格式的时候使用"></a>filetype：搜索特定文件格式的时候使用</h2><p>例如：filetype:pdf 视频教程，显示的是包含“视频教程”的所有PDF文件。filetype指令可以用来搜索特定的资源，比如PDF电子书、Word文件等。Google和百度都是支持filetype：指令的。<br>详细用法：<a href="http://jingyan.baidu.com/article/73c3ce28f23d8de50343d9ac.html" target="_blank" rel="external">http://jingyan.baidu.com/article/73c3ce28f23d8de50343d9ac.html</a>  </p>
<h2 id="site：这个高级搜索指令用来搜索某个域名下面的所有文件"><a href="#site：这个高级搜索指令用来搜索某个域名下面的所有文件" class="headerlink" title="site：这个高级搜索指令用来搜索某个域名下面的所有文件"></a>site：这个高级搜索指令用来搜索某个域名下面的所有文件</h2><p>比如搜索“site：www.zhihu.com“ ，出现的就是 www.zhihu.com 这个域名下面的所有页面，可以说这个高级指令是查询网站收入页面数量最直接的方法。site：指令也可以用于子域名。但site：并不准确，特别是在Google中，出现的收入页面经常有大幅度波动，只能用于参考，但不能完全相信。<br>之前有人用“site:yun.baidu.com  ”资源关键词这个搜网盘里面的资源，现在貌似不大顶用了，等下给出替代方案。<br>高级搜索指令大全诸位可自行百度，补充一点是，这些指令很多都可以互相搭配使用影响最后的结果。可以有很复杂的组合结果，好消息是有人帮我们封装好做写成了特殊的搜索引擎供我们使用。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这些高级搜索指令我也是最近刚知道，也都尝试了一番，确实比我平时只会用但一个名称查询来的快捷，精确多了。 希望对大家有帮助。</p>
<hr>
<p>最近撸了个java的公众号，学习资源超级多，视频，电子书，最新开发工具一个都不能少，已全部分享到百度云盘，求资源共享，打造一个学习方便，工作方便的java公众号，开源开源，有需求的可以关注~撒花<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/javaLearn.PNG" alt=""></p>
]]></content>
      
        <categories>
            
            <category> SEO </category>
            
        </categories>
        
        
        <tags>
            
            <tag> SEO </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hexo干货系列：（五）hexo添加站内搜索]]></title>
      <url>http://tengj.top/2016/03/11/hexo5Swiftype/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本来想用百度站内搜索，但是没成功，所以改用swiftype，用起来还是很棒的，这里分享一下我的安装步骤</p>
<a id="more"></a> 
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h2><p>去swiftype<a href="https://swiftype.com/" target="_blank" rel="external">官网</a>注册个账号，然后登陆，对了不要去在意30天试用，30天过了还能继续使用，网站给的是30天高级账户的使用（那种有可以建立多个搜索引擎、多账户共同管理、一个引擎index多个域名的功能的账户），降级成为免费的账户类型，但是还能使用。</p>
<h2 id="Create-an-engine"><a href="#Create-an-engine" class="headerlink" title="Create an engine"></a>Create an engine</h2><p>登陆后选择开始开干，步骤大概如下</p>
<ol>
<li>点击Create an engine  </li>
<li>给你的网站建立一个索引  </li>
<li>输入你的网址  </li>
<li>起个名字  </li>
</ol>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/hexo5_1.png" alt="" title="点击Create an engine"><br><img src="http://7xqch5.com1.z0.glb.clouddn.com/hexo5_2.png" alt="" title="给你的网站建立一个索引"><br><img src="http://7xqch5.com1.z0.glb.clouddn.com/hexo5_3.png" alt="3" title="输入你的网址"><br><img src="http://7xqch5.com1.z0.glb.clouddn.com/hexo5_4.png" alt="" title="起个名字"></p>
<p>上面配置好后开始抓取你网站的数据，大概等了几分钟后，查看Manage下面的Content，就能看到抓取的一些目录和tag数据过来，如果你不想要的话可以手动删除。<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/hexo5_5.png" alt="">  </p>
<h2 id="install-Search"><a href="#install-Search" class="headerlink" title="install Search"></a>install Search</h2><p>接下来就是重头戏，如何安装插件，首先点击左下方的<code>install Search</code>，就会弹出插件的代码，先复制一下。这个就是一会要用到的插件代码。  </p>
<blockquote>
<p>说明一下，<code>swiftype</code>提供两种方式，一种是弹出的方式，一种是新开一个页面的方式。前者默认就行，后者还要配置另外一推东西。我之前也按照网上别人帖子参考的写，结果一直不行。干脆不用了，用默认简单方便。</p>
</blockquote>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/hexo5_6.png" alt=""></p>
<h2 id="hexo的Pacman主题配置"><a href="#hexo的Pacman主题配置" class="headerlink" title="hexo的Pacman主题配置"></a>hexo的Pacman主题配置</h2><p>接下来都是hexo这边配置，首先打开pacman主题下的_config.yml文件在末尾添加如下代码<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">swift_search:</span><br><span class="line"><span class="built_in">enable</span>:  <span class="literal">true</span></span><br></pre></td></tr></table></figure></p>
<p>然后再切换的到\themes\jacman\layout_partial目录下，最后需要做的收尾工作全部都在这个目录下。<br>先打开header.ejs，找到<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;%  &#125;  else  if(theme.baidu_search.enable)&#123; %&gt;</span><br><span class="line">    &lt;form class="search" action="&lt;%- theme.baidu_search.site %&gt;" target="_blank"&gt;</span><br><span class="line">&lt;label&gt;Search&lt;/label&gt;</span><br><span class="line">    &lt;input name="s" type="hidden" value= &lt;%= theme.baidu_search.id %&gt; &gt;&lt;input type="text" name="q" size="30" placeholder="&lt;%= __('search') %&gt;"&gt;&lt;br&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure></p>
<p>直接替换成<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">%</span> &#125; <span class="attribute">else</span> <span class="attribute">if</span>(<span class="attribute">theme.swift_search.enable</span>)&#123; %&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">form</span> <span class="attribute">class</span>=<span class="value">"search"</span> <span class="attribute">action</span>=<span class="value">"&lt;%- config.root %&gt;search/index.html"</span> <span class="attribute">method</span>=<span class="value">"get"</span> <span class="attribute">accept-charset</span>=<span class="value">"utf-8"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">label</span>&gt;</span>Search<span class="tag">&lt;/<span class="title">label</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">id</span>=<span class="value">"search"</span> <span class="attribute">class</span>=<span class="value">"st-default-search-input"</span> <span class="attribute">maxlength</span>=<span class="value">"20"</span> <span class="attribute">placeholder</span>=<span class="value">"Search"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="title">form</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>反正我也不会用baidu_search，所以直接替换无所谓，你要是还想保留，就直接添加else判断吧。<br>最后打开footer.ejs（其实header也行，随便你），在最后一个<code>div</code>标签之前添加一开始拷贝的那段js代码，我的是：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params">w,d,t,u,n,s,e</span>)</span>&#123;w[<span class="string">'SwiftypeObject'</span>]=n;w[n]=w[n]||<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  (w[n].q=w[n].q||[]).push(<span class="built_in">arguments</span>);&#125;;s=d.createElement(t);</span><br><span class="line">  e=d.getElementsByTagName(t)[<span class="number">0</span>];s.async=<span class="number">1</span>;s.src=u;e.parentNode.insertBefore(s,e);</span><br><span class="line">  &#125;)(<span class="built_in">window</span>,<span class="built_in">document</span>,<span class="string">'script'</span>,<span class="string">'//s.swiftypecdn.com/install/v2/st.js'</span>,<span class="string">'_st'</span>);</span><br><span class="line">  </span><br><span class="line">  _st(<span class="string">'install'</span>,<span class="string">'Ts_hz24x26ZaNWfhsYwW'</span>,<span class="string">'2.0.0'</span>);</span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>
<p>大功告成，来看看什么效果吧，自己发布后打开<a href="http://tengj.top">博客</a>,查询一个博客文章中出现的内容，效果如下：<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/hexo5_7.png" alt=""></p>
<p>上面查询的列表其实是之前在swiftype那边解析的文章列表，如果Content那边没有东西。那你这边查询不会有用的。  </p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>好了，站内搜索搞定了，要不要使用你们自己决定。希望这篇文章对你有帮助~下篇计划写个网站统计插件的教程，我用的CNZZ。写完这篇已经凌晨1点了，明天还要上班，洗洗睡。  </p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://www.jerryfu.net/post/search-engine-for-hexo-with-swiftype-v2.html" target="_blank" rel="external">利用swiftype为hexo添加站内搜索v2.0</a></p>
<p>我是嘟嘟MD，我为这篇文章代言。  </p>
<blockquote>
<p>欢迎转载，但希望您能注明出处，毕竟没啥人气囧</p>
</blockquote>
<hr>
<p>最近撸了个java的公众号，学习资源超级多，视频，电子书，最新开发工具一个都不能少，已全部分享到百度云盘，求资源共享，打造一个学习方便，工作方便的java公众号，开源开源，有需求的可以关注~撒花<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/javaLearn.PNG" alt=""></p>
]]></content>
      
        <categories>
            
            <category> hexo干货系列 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ajax一个很好的加载效果]]></title>
      <url>http://tengj.top/2016/03/10/jqueryLoading/</url>
      <content type="html"><![CDATA[<p>推荐一个常用的jquery加载效果插件,很适合开发中使用。</p>
<h2 id="要引入这个插件的css和js"><a href="#要引入这个插件的css和js" class="headerlink" title="要引入这个插件的css和js:"></a>要引入这个插件的css和js:</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">link</span> <span class="attribute">href</span>=<span class="value">"&lt;%=path %&gt;/css/showLoading.css"</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">media</span>=<span class="value">"screen"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span> <span class="attribute">src</span>=<span class="value">"&lt;%=path %&gt;/js/jquery.showLoading.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="使用的时候代码如下"><a href="#使用的时候代码如下" class="headerlink" title="使用的时候代码如下:"></a>使用的时候代码如下:</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">".wrapper"</span>).showLoading();  <span class="comment">//展示加载效果 wrapper为你需要加载效果的div， 也可以用body</span></span><br><span class="line">$(<span class="string">".wrapper"</span>).hideLoading();  <span class="comment">//取消加载效果</span></span><br></pre></td></tr></table></figure>
<h2 id="ajax完整效果"><a href="#ajax完整效果" class="headerlink" title="ajax完整效果"></a>ajax完整效果</h2><p>搭配ajaX的beforeSend提高用户体验：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 提交表单数据到后台处理</span></span><br><span class="line">$.ajax(&#123;</span><br><span class="line">    type: <span class="string">"post"</span>,</span><br><span class="line">    data: studentInfo,</span><br><span class="line">    dataType:<span class="string">"json"</span>,</span><br><span class="line">    url: <span class="string">"/Home/Submit"</span>,</span><br><span class="line">    beforeSend: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 禁用按钮防止重复提交</span></span><br><span class="line">        $(<span class="string">".wrapper"</span>).showLoading();</span><br><span class="line">        $(<span class="string">"#submit"</span>).attr(&#123; disabled: <span class="string">"disabled"</span> &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (data == <span class="string">"Success"</span>) &#123;</span><br><span class="line">            <span class="comment">//清空输入框</span></span><br><span class="line">            clearBox();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    complete: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="string">".wrapper"</span>).hideLoading();</span><br><span class="line">        $(<span class="string">"#submit"</span>).removeAttr(<span class="string">"disabled"</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    error: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.info(<span class="string">"error: "</span> + data.responseText);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<h2 id="jquery介绍"><a href="#jquery介绍" class="headerlink" title="jquery介绍"></a>jquery介绍</h2><p> jQuery是经常使用的一个开源js框架，其中的$.ajax请求中有一个beforeSend方法，用于在向服务器发送请求前执行一些动作。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">	beforeSend: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	 <span class="comment">// Handle the beforeSend event</span></span><br><span class="line">	&#125;,</span><br><span class="line">	complete: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	 <span class="comment">// Handle the complete event</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// ......</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> jQuery </category>
            
        </categories>
        
        
        <tags>
            
            <tag> jQuery </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hexo干货系列：（四）将hexo博客同时托管到github和coding]]></title>
      <url>http://tengj.top/2016/03/06/hexo4/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>之前我们把hexo托管在github，但是毕竟github是国外的，访问速度上还是有点慢，所以想也部署一套在国内的托管平台，之前查资料听说gitcafe,但是听说gitcafe已经被coding收购了，所以就决定部署到coding。查询了多方资料，终于鼓捣出了本地一次部署，同时更新到github以及coding。<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/hexo4_13.jpg" alt=""></p>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="config-yml配置"><a href="#config-yml配置" class="headerlink" title="_config.yml配置"></a>_config.yml配置</h2><p>想要同时部署到2个平台，就要修改博客根目录下面的_config.yml文件中的deploy如下<br>根据Hexo官方文档需要修改成下面的形式<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  message: [message]</span><br><span class="line">  repo:</span><br><span class="line">    github: &lt;repository url&gt;,[branch]</span><br><span class="line">    gitcafe: &lt;repository url&gt;,[branch]</span><br></pre></td></tr></table></figure></p>
<p>所以我的是这样：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo:</span><br><span class="line">	  github: git@github.com:tengj/tengj.github.io.git,master</span><br><span class="line">	  coding: git@git.coding.net:tengj/hexoblob.git,master</span><br></pre></td></tr></table></figure></p>
<p>这里要注意一下：上面这段代码左边的-号只能有2个(如下图红圈)，如果超过2个一般就是会被认定为填写格式有问题。我是在repo下面两行用tab键缩进就行，之前没注意这里一直报错。<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/hexo4_1.png" alt="">  </p>
<p>我这边提交采用的SSH密钥，这个方法有个好处，提交的时候不用输入用户名和密码。如果你习惯用http的方式，只要将地址改成相应的http地址即可。</p>
<h2 id="coding上创建一个新项目"><a href="#coding上创建一个新项目" class="headerlink" title="coding上创建一个新项目"></a>coding上创建一个新项目</h2><p>这里只介绍coding上面如何创建项目，以及把本地hexo部署到coding上面，还不懂如何创建hexo的请看我之前的系类文章。首先我们创建一个项目，创建后进入项目的代码模块，获取到这个项目的ssh地址，我的是<a href="https://git.coding.net/tengj/hexoblob.git" target="_blank" rel="external">https://git.coding.net/tengj/hexoblob.git</a><br><img src="http://7xqch5.com1.z0.glb.clouddn.com/hexo4_2.png" alt="">  </p>
<h2 id="同步本地hexo到coding上"><a href="#同步本地hexo到coding上" class="headerlink" title="同步本地hexo到coding上"></a>同步本地hexo到coding上</h2><p>把获取到了ssh配置在上面的<code>_config.yml</code>文件中的<code>deploy</code>下，如果是第一次使用coding的话，需要设置SSH公钥，生成的方法可以参考<a href="https://coding.net/help/doc/git/ssh-key.html" target="_blank" rel="external">coding帮助中心</a><br>如果你看过我第一篇文章，里面也有介绍如果如果生成，我这里直接使用之前部署github时已经生成的公钥。<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/hexo4_3.png" alt="">  </p>
<p>本地打开 <code>id_rsa.pub</code> 文件，复制其中全部内容，填写到<code>SSH_RSA公钥</code>key下的一栏，公钥名称可以随意起名字。完成后点击“添加”，然后输入密码或动态码即可添加完成。<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/hexo4_4.png" alt="">  </p>
<p>添加后，在<code>git bash</code>命令输入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@git.coding.net</span><br></pre></td></tr></table></figure></p>
<p>如果得到下面提示就表示公钥添加成功了：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Coding.net Tips : [Hello ! You<span class="string">'ve conected to Coding.net by SSH successfully! ]</span></span><br></pre></td></tr></table></figure></p>
<p>最后使用部署命令就能把博客同步到coding上面：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy -g</span><br></pre></td></tr></table></figure></p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/hexo4_5.png" alt="">  </p>
<h2 id="pages服务方式部署"><a href="#pages服务方式部署" class="headerlink" title="pages服务方式部署"></a>pages服务方式部署</h2><p>部署博客方式有两种，第一种就是pages服务的方式，也推荐这种方式，因为可以绑定域名，而第二种演示的方式必须升级会员才能绑定自定义域名。pages方式也很简单<br>就是在source/需要创建一个空白文件，至于原因，是因为 coding.net需要这个文件来作为以静态文件部署的标志。就是说看到这个Staticfile就知道按照静态文件来发布。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="built_in">source</span>/</span><br><span class="line">touch Staticfile  <span class="comment">#名字必须是Staticfile</span></span><br></pre></td></tr></table></figure></p>
<p>分支选择master，因为前面配置的分支是master,因此开启之后，也需要是master。然后看起之后就可访问了。  </p>
<p><strong>注意</strong>：</p>
<blockquote>
<p>如果你的项目名称跟你<code>coding</code>的用户名一样，比如我的用户是叫<code>tengj</code>,博客项目名也叫<code>tengj</code><br>那直接访问 <code>tengj.coding.me</code>就能访问博客，否则就要带上项目名：<code>tengj.coding.me/项目名</code> 才能访问<br>推荐项目名跟用户名一样，这样就可以省略项目名了  </p>
</blockquote>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/hexo4_15.png" alt=""></p>
<h2 id="演示方式部署"><a href="#演示方式部署" class="headerlink" title="演示方式部署"></a>演示方式部署</h2><p>当你把你的静态网站上传到Coding之后，就可以着手部署演示了，Coding的演示平台支持静态网页，所以其实非常简单。在开启演示模式之前，会提醒你没有检测到环境，你直接强制开启就可以了。<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/hexo4_6.png" alt=""> </p>
<ul>
<li>部署版本我没有填，默认是master</li>
<li>运行环境一定要选择HTML</li>
<li>自动部署要勾上，为后面配置自动部署做准备</li>
<li>访问域名根据你自己喜爱填写，填好要点急后面的确认按钮</li>
<li>应用内存也根据自己喜好填写，填好要点急后面的确认按钮</li>
</ul>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/hexo4_7.png" alt=""><br>以上都配置好了，就可以按下一键部署的按钮了，部署成功后输入地址：tengj.coding.io就能访问<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/hexo4_8.jpg" alt="">  </p>
<h2 id="设置自动部署"><a href="#设置自动部署" class="headerlink" title="设置自动部署"></a>设置自动部署</h2><p>如果你是演示方式的话，就需要设置自动部署，很奇怪，我勾选上了自动部署，但是同步新文章的时候，tengj.coding.io访问没有自动更新最新的。查了资料发现还要配置WebHook才行  </p>
<ul>
<li>找到项目设置那边的WebHook,然后点击新建 Hook </li>
<li>第一个输入框中是填你的博客域名，然后在后面加上 /_ </li>
<li>第二个输入框是输入一个 token ，我们直接填写 <code>{ { TOKEN } }</code> 就可以了,TOKEN两边的大括号见的空格记得去掉</li>
<li>回到演示里，在左边的栏目中找到环境变量,变量名填写为 <code>WEBHOOK_TOKEN</code> ，值为 <code>{ { TOKEN } }</code> ，接着重新启动应用就 ok 了！<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/hexo4_9.png" alt=""><br><img src="http://7xqch5.com1.z0.glb.clouddn.com/hexo4_10.png" alt=""><br>最后一步我们要测试一下是否 push 代码的时候就会自动部署。我们回到命令行创建一个新的文章（可以什么都不写），然后生成静态页面 push 到仓库去：  <pre><code class="bash">hexo n codingPage
hexo deploy -g
</code></pre>
我们回到浏览器在输入博客的地址，如果那篇新写好的文章出现在首页了，说明我们自动部署成功了。以后再也不用自己去手动部署一次了！  </li>
</ul>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/hexo4_11.jpg" alt="">  </p>
<h2 id="个人域名绑定"><a href="#个人域名绑定" class="headerlink" title="个人域名绑定"></a>个人域名绑定</h2><p>我在万网上面购买了tengj.top域名，第一年只要4元哈哈，个人用的就不用com这种超级贵的域名了。现在要实现国内的走coding，海外的走github，只要配置2个CNAME就行。域名解析如下：<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/hexo4_16.png" alt=""><br>过几分钟后检测tengj.top看到的解析是正确的，国内解析到Coding，国外解析到Github，如图：<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/hexo4_17.png" alt="">  </p>
<p>我现在访问<code>tengj.top</code>是跳转到coding上面<br>直接访问<code>tengj.github.io</code>地址会跳转到<code>tengj.top</code>,但是内容也是coding上面<br>直接访问<code>tengj.coding.me</code>发现不会跳转到<code>tengj.top</code>这个域名，原因我发帖问过别人，答案如下：  </p>
<blockquote>
<p>github只能绑定一个域名，所以访问<code>tengj.github.io</code>时，github的服务器知道要往<code>tengj.top</code>跳转。coding可以绑定多个域名，当绑定多个域名时，访问<code>tengj.coding.me,coding</code>的服务器不知道要往哪里跳转，所以干脆就不跳转了。但是当绑定一个时，为什么不跳转，可能是coding觉得麻烦，就不跳转了。这些都是coding定的，我们没办法改变。<br>你先想一个问题：那么多人都要在<code>github</code>上搞博客，还要自定义域名。github哪来这么多ip给你们用？所以办法就是仅仅提供一个ip，这样必然导致这个服务器上发着所有人的博客文件，那么如何区分特定的域名应该展示谁的博客呢？答案就是在仓库里面新建一个CNAME文件，里面写上你博客想用的域名，github的服务器会根据当前http请求的Host头部（即域名），查找对应的包含相同的CNAME内容的目录，从而显示其中的页面。这就是为什么要在仓库里面创建一个CNAME原因。<br>不过，事情还没完，一个ip的问题是世界各地不同地点的访问速度不同，有些地方可能很慢，所以需要一组ip来分担一下。最早github好像只有2个ip，后来ip变多了。再后来，github支持域名解析的时候，通过alias来。比如在域名商那边设置成<code>www.tengj.com ---&gt; tengj.github.io</code>，由于github无法控制你如何配置域名和ip的关系，但他可以控制<code>tengj.github.io</code>的最终ip解析，所以<code>github</code>推荐大家使用<code>alias</code>解析，可以为博主提供就近ip访问。这就是你在域名商那边配置<code>CNAME</code>或者<code>alias</code>的原理。这里的<code>CNAME</code>跟上面提到的<code>CNAME</code>作用不同，不是一个概念，不要混淆。</p>
</blockquote>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://hexo-demo-d281b.coding.io/2014/12/04/hexo-demo/" target="_blank" rel="external">使用Cover主题，在Coding上搭建Hexo博客</a><br><a href="http://opiece.me/2015/04/28/push-hexo-to-github-and-gitcafe/" target="_blank" rel="external">将hexo博客同时托管到github和gitcafe</a><br><a href="https://segmentfault.com/q/1010000004557073?_ea=651524" target="_blank" rel="external">个人域名如何同时绑定 github 和 coding 上的博客</a></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p> 到此为止，终于可以实现部署一次，github和coding两个同步都搞定了。访问速度也是唰唰唰的快，忙乎了大半个月终于搭好了独立博客。希望对还在搭建hexo独立博客的小伙伴有帮助。下一篇研究下如何让百度能收录我的博客。</p>
<hr>
<p>最近撸了个java的公众号，学习资源超级多，视频，电子书，最新开发工具一个都不能少，已全部分享到百度云盘，求资源共享，打造一个学习方便，工作方便的java公众号，开源开源，有需求的可以关注~撒花<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/javaLearn.PNG" alt=""></p>
]]></content>
      
        <categories>
            
            <category> hexo干货系列 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hexo干货系列：（三）hexo的Jacman主题优化]]></title>
      <url>http://tengj.top/2016/03/06/hexo3/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>上一篇介绍了Jacman主题的安装和配置，今天根据上次的基础做了些优化，让博客看起来很舒服。</p>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="首页文章展示摘要"><a href="#首页文章展示摘要" class="headerlink" title="首页文章展示摘要"></a>首页文章展示摘要</h2><p>该主题首页文章列表默认是全部展开，感觉不好，我关闭掉了，只展示少量摘要。<br>修改<code>\themes\jacman</code>下面<code>_config.yml</code>中的<code>expand</code>改成<code>false</code>即可<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">index:</span><br><span class="line">  expand: <span class="literal">false</span>           <span class="comment">## default is unexpanding,so you can only see the short description of each post.</span></span><br><span class="line">  excerpt_link: Read More</span><br></pre></td></tr></table></figure></p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/hexo3_4.png" alt=""></p>
<h2 id="主题背景色修改"><a href="#主题背景色修改" class="headerlink" title="主题背景色修改"></a>主题背景色修改</h2><p>我给主题添加了个背景图片，看清来很文艺<br>修改<code>\themes\jacman\source\css\_base</code>下的<code>public.styl</code>，找到body，添加<code>background-image url(&#39;/img/bg.jpg&#39;)</code>，图片放在<code>\themes\jacman\source\img</code>即可<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">body</span><br><span class="line">  background color-background</span><br><span class="line">  background-image url('/img/bg.jpg')</span><br><span class="line">  font-family font-default</span><br><span class="line">  font-size font-size</span><br><span class="line">  color color-font</span><br><span class="line">  line-height line-height</span><br><span class="line">  min-height: 100vh</span><br><span class="line">  display: -webkit-flex</span><br><span class="line">  display: flex</span><br><span class="line">  -webkit-flex-direction: column</span><br><span class="line">  flex-direction: column</span><br></pre></td></tr></table></figure></p>
<h2 id="文章内容选中颜色修改"><a href="#文章内容选中颜色修改" class="headerlink" title="文章内容选中颜色修改"></a>文章内容选中颜色修改</h2><p>内容选中默认是蓝色的，偶然看到推酷网站上面是绿色的，很喜欢就打算把自己博客也改改。<br>打开<code>\themes\jacman\source\css\_partial</code>下面的<code>index.styl</code>在最下面添加如下代码，需要配置选中背景色和字体颜色<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="pseudo">::selection</span></span><br><span class="line">    <span class="tag">background</span> <span class="id">#33a183</span></span><br><span class="line">    <span class="tag">color</span> <span class="id">#fff</span></span><br><span class="line"><span class="pseudo">::-moz-selection</span></span><br><span class="line">    <span class="tag">background</span> <span class="id">#33a183</span></span><br><span class="line">    <span class="tag">color</span> <span class="id">#fff</span></span><br><span class="line"><span class="pseudo">::-webkit-selection</span></span><br><span class="line">    <span class="tag">background</span> <span class="id">#33a183</span></span><br><span class="line">    <span class="tag">color</span> <span class="id">#fff</span></span><br></pre></td></tr></table></figure></p>
<p>重新部署一下点开一篇文章查看下效果，如图</p>
<h2 id="顶部头像修改"><a href="#顶部头像修改" class="headerlink" title="顶部头像修改"></a>顶部头像修改</h2><p>默认的黑桃感觉不好看，我自己找了张图片替代，并且图片弄成圆形效果<br>修改\themes\jacman下_config.yml中的imglogo的src属性，我这里使用gif会动的图<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">imglogo:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span>             <span class="comment">## display image logo true/false.</span></span><br><span class="line">  src: img/dudu.gif        <span class="comment">## `.svg` and `.png` are recommended,please put image into the theme folder `/jacman/source/img`.</span></span><br><span class="line">favicon: img/favicon.ico   <span class="comment">## size:32px*32px,`.ico` is recommended,please put image into the theme folder `/jacman/source/img`.     </span></span><br><span class="line">apple_icon: img/jacman.jpg <span class="comment">## size:114px*114px,please put image into the theme folder `/jacman/source/img`.</span></span><br><span class="line">author_img: img/author.jpg <span class="comment">## size:220px*220px.display author avatar picture.if don't want to display,please don't set this.</span></span><br><span class="line">banner_img: <span class="comment">#img/banner.jpg ## size:1920px*200px+. Banner Picture</span></span><br></pre></td></tr></table></figure></p>
<p>这时候头像还是正方形的。修改<code>\themes\jacman\source\css\_partial</code>下的<code>header.styl</code>，在<code>#imglogo</code>这个下面新增border-radius 100%属性<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#imglogo</span></span><br><span class="line">  <span class="built_in">float</span> left</span><br><span class="line">  width <span class="number">4</span>em</span><br><span class="line">  height <span class="number">4</span>em</span><br><span class="line">  @media mini</span><br><span class="line">    width @width+<span class="number">1</span></span><br><span class="line">  @media tablet</span><br><span class="line">    width @width+<span class="number">1.5</span></span><br><span class="line">  img</span><br><span class="line">    width <span class="number">4</span>em</span><br><span class="line">    border-radius <span class="number">100</span>%</span><br><span class="line">    @media mini</span><br><span class="line">      width @width+<span class="number">1.5</span></span><br><span class="line">    @media tablet</span><br><span class="line">      width @width+<span class="number">2</span></span><br></pre></td></tr></table></figure></p>
<h2 id="开启多说评论"><a href="#开启多说评论" class="headerlink" title="开启多说评论"></a>开启多说评论</h2><p>修改<code>\themes\jacman</code>下<code>_config.yml</code>中的<code>duoshuo_shortname</code>属性，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#### Comment</span></span><br><span class="line">duoshuo_shortname: rlovep <span class="comment">## e.g. wuchong   your duoshuo short name.</span></span><br><span class="line">disqus_shortname:    <span class="comment">## e.g. wuchong   your disqus short name.</span></span><br></pre></td></tr></table></figure></p>
<p>关于获取<code>shoutname</code>，大家注意了，<code>shoutname</code>不是你登陆的用户昵称，而是应该去<a href="http://duoshuo.com" target="_blank" rel="external">多说首页</a>点击我要安装，注册你的多说二级域名。去掉 .duoshuo.com 部分 就是你的<code>shoutname</code>，下图中<code>tengj</code>就是我的<code>shoutname</code>。  </p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/hexo3_2.jpg" alt=""></p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/hexo3_1.png" alt=""></p>
<h2 id="配置文章模板"><a href="#配置文章模板" class="headerlink" title="配置文章模板"></a>配置文章模板</h2><p>我们可以修改根目录下\scaffolds\post.md文件，配置好基本的信息，比如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">categories: </span><br><span class="line">tags: </span><br><span class="line">---</span><br></pre></td></tr></table></figure></p>
<h2 id="配置RSS"><a href="#配置RSS" class="headerlink" title="配置RSS"></a>配置RSS</h2><p>RSS是个好东西，可以让别人订阅你，这里先只介绍如何安装，以后专门写篇介绍RSS一些资料。<br>安装步骤如下：</p>
<ol>
<li><p>安装插件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure>
</li>
<li><p>根目录下面_config.yml配置文件中添加如下       </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">feed:</span><br><span class="line">  <span class="built_in">type</span>: atom</span><br><span class="line">  path: atom.xml</span><br><span class="line">  <span class="built_in">limit</span>: <span class="number">20</span></span><br><span class="line">  hub:</span><br></pre></td></tr></table></figure>
</li>
<li><p>themes\jacman下的_config.yml默认会有下面代码，如果你的没有就添加</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#### RSS &#10;rss: /atom.xml ## RSS address.</span><br></pre></td></tr></table></figure>
</li>
<li><p>编译部署</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy -g</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>5.查看是否成功，输入你的博客域名，后面加上/atom.xml,比如我的是<a href="http://tengj.top/atom.xml">http://tengj.top/atom.xml</a> 如果打开有下面数据就表示成功。<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/hexo3_3.png" alt=""></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>暂时先优化这么多，已经感觉很不错了。我们关心的应该是内容，而不是死命折腾博客本身，总觉得它会被我们玩坏。冏</p>
<hr>
<p>最近撸了个java的公众号，学习资源超级多，视频，电子书，最新开发工具一个都不能少，已全部分享到百度云盘，求资源共享，打造一个学习方便，工作方便的java公众号，开源开源，有需求的可以关注~撒花<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/javaLearn.PNG" alt=""></p>
]]></content>
      
        <categories>
            
            <category> hexo干货系列 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hexo干货系列：（二）hexo主题下载及配置]]></title>
      <url>http://tengj.top/2016/02/26/hexo2/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><hr>
<p>上一篇文章介绍了hexo+gitHub简易搭建属于自己的个人独立博客，但是主题是默认的landscape，略显简单，今天的教程推荐Jacman主题。<br>Jacman是一款为Hexo打造的一款扁平化，有着响应式设计的主题，个人感觉还不错就使用了。</p>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><hr>
<h2 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h2><hr>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/wuchong/jacman.git themes/jacman</span><br></pre></td></tr></table></figure>
<h2 id="启用"><a href="#启用" class="headerlink" title="启用"></a>启用</h2><hr>
<p>修改你的博客根目录下的<code>config.yml</code>配置文件中的<code>theme</code>属性，将其设置为<code>jacman</code>。</p>
<h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><hr>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> themes/jacman</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure>
<p>请先备份你的<code>_config.yml</code>文件后再升级<br>更新好后，本地启动起来效果</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server -g  <span class="comment">#生成加预览</span></span><br></pre></td></tr></table></figure>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/1hexo2.png" style="margin:0;"></p>
<h2 id="hexo文目录"><a href="#hexo文目录" class="headerlink" title="hexo文目录"></a>hexo文目录</h2><hr>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── <span class="built_in">source</span></span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure>
<p><code>_config.yml</code>:网站的 配置 信息，您可以在此配置大部分的参数。<br><code>package.json</code>:应用程序的信息。<br><code>scaffolds</code>:模版文件夹。当您新建文章时，Hexo会根据scaffold 来建立文件。<br><code>source</code>:资源文件夹是存放用户资源的地方。除<em>posts文件夹之外，开头命名为</em>(下划线)的文件/文件夹和隐藏的文件将会被忽略。Markdown和HTML文件会被解析并放到public文件夹，而其他文件会被拷贝过去。<br><code>themes</code>:主题 文件夹。Hexo会根据主题来生成静态页面。  </p>
<h2 id="hexo的-config-yml配置"><a href="#hexo的-config-yml配置" class="headerlink" title="hexo的_config.yml配置"></a>hexo的_config.yml配置</h2><hr>
<p>您可以在hexo安装文件目录下的<code>_config.yml</code>中修改大部份的配置，我做了中文注释，一看就懂<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Hexo Configuration</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/configuration.html</span></span><br><span class="line"><span class="comment">## Source: https://github.com/hexojs/hexo/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Site 网站</span></span><br><span class="line">title: 嘟嘟独立博客		<span class="comment">#网站标题</span></span><br><span class="line">subtitle: 爱生活爱编码		<span class="comment">#网站副标题</span></span><br><span class="line">description: hello,every body!~	<span class="comment">#网站描述</span></span><br><span class="line">author: Tengj Jun		<span class="comment">#您的名字</span></span><br><span class="line">language: zh-CN			<span class="comment">#网站使用的语言</span></span><br><span class="line">timezone:			<span class="comment">#网站时区。Hexo 默认使用您电脑的时区</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># URL 网址</span></span><br><span class="line"><span class="comment">## 如果您的网站存放在子目录中，例如 http://yoursite.com/blog，则请将您的 url 设为 http://yoursite.com/blog 并把 root 设为 /blog/。</span></span><br><span class="line">url: http://tengj.github.io</span><br><span class="line">root: /</span><br><span class="line">permalink: :year/:month/:day/:title/</span><br><span class="line">permalink_defaults:</span><br><span class="line"></span><br><span class="line"><span class="comment"># Directory 目录配置</span></span><br><span class="line"><span class="built_in">source</span>_dir: <span class="built_in">source</span>	 <span class="comment">#源文件夹，这个文件夹用来存放内容。</span></span><br><span class="line">public_dir: public	 <span class="comment">#公共文件夹，这个文件夹用于存放生成的站点文件。</span></span><br><span class="line">tag_dir: tags		 <span class="comment">#标签文件夹</span></span><br><span class="line">archive_dir: archives	 <span class="comment">#归档文件夹</span></span><br><span class="line">category_dir: categories <span class="comment">#分类文件夹</span></span><br><span class="line">code_dir: downloads/code <span class="comment">#nclude code 文件夹</span></span><br><span class="line">i18n_dir: :lang		 <span class="comment">#国际化（i18n）文件夹</span></span><br><span class="line">skip_render:		 <span class="comment">#跳过指定文件的渲染，您可使用 glob 表达式来匹配路径。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Writing 文章</span></span><br><span class="line">new_post_name: :title.md <span class="comment"># 新建文章默认文件名</span></span><br><span class="line">default_layout: post     <span class="comment"># 默认布局</span></span><br><span class="line">titlecase: <span class="literal">false</span> <span class="comment"># Transform title into titlecase</span></span><br><span class="line">external_link: <span class="literal">true</span> <span class="comment"># 在新标签中打开一个外部链接，默认为true</span></span><br><span class="line">filename_<span class="keyword">case</span>: <span class="number">0</span>    <span class="comment">#转换文件名，1代表小写；2代表大写；默认为0，意思就是创建文章的时候，是否自动帮你转换文件名，默认就行，意义不大。</span></span><br><span class="line">render_drafts: <span class="literal">false</span>  <span class="comment">#是否渲染_drafts目录下的文章，默认为false</span></span><br><span class="line">post_asset_folder: <span class="literal">false</span> <span class="comment">#启动 Asset 文件夹</span></span><br><span class="line">relative_link: <span class="literal">false</span>	<span class="comment">#把链接改为与根目录的相对位址，默认false</span></span><br><span class="line">future: <span class="literal">true</span>		<span class="comment">#显示未来的文章，默认false</span></span><br><span class="line">highlight:	<span class="comment">#代码块的设置</span></span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  line_number: <span class="literal">true</span></span><br><span class="line">  auto_detect: <span class="literal">false</span></span><br><span class="line">  tab_replace:</span><br><span class="line"></span><br><span class="line"><span class="comment"># Category &amp; Tag 分类和标签的设置</span></span><br><span class="line">default_category: uncategorized		<span class="comment">#默认分类</span></span><br><span class="line">category_map:				<span class="comment">#分类别名</span></span><br><span class="line">tag_map:				<span class="comment">#标签别名</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Date / Time format</span></span><br><span class="line"><span class="comment">## Hexo uses Moment.js to parse and display date</span></span><br><span class="line"><span class="comment">## You can customize the date format as defined in</span></span><br><span class="line"><span class="comment">## http://momentjs.com/docs/#/displaying/format/</span></span><br><span class="line">date_format: YYYY-MM-DD</span><br><span class="line">time_format: HH:mm:ss</span><br><span class="line"></span><br><span class="line"><span class="comment"># Pagination 分页</span></span><br><span class="line"><span class="comment">## Set per_page to 0 to disable pagination</span></span><br><span class="line">per_page: <span class="number">10</span>	<span class="comment">#每页显示的文章量 (0 = 关闭分页功能)</span></span><br><span class="line">pagination_dir: page	<span class="comment">#分页目录</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line">theme: jacman</span><br><span class="line"></span><br><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repository: https://github.com/tengj/tengj.github.com.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></p>
<h2 id="主题的的-config-yml配置"><a href="#主题的的-config-yml配置" class="headerlink" title="主题的的_config.yml配置"></a>主题的的_config.yml配置</h2><hr>
<p>配置文件<code>_config.yml</code>位于主题根目录下,下面贴出我的配置<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##### Menu</span></span><br><span class="line">menu:</span><br><span class="line">  首页: /</span><br><span class="line">  归档: /archives</span><br><span class="line">  标签: /tags</span><br><span class="line">  分类: /categories</span><br><span class="line"><span class="comment">## you can create `tags` and `categories` folders in `../source`.</span></span><br><span class="line"><span class="comment">## And create a `index.md` file in each of them.</span></span><br><span class="line"><span class="comment">## set `front-matter`as</span></span><br><span class="line"><span class="comment">## layout: tags (or categories)</span></span><br><span class="line"><span class="comment">## title: tags (or categories)</span></span><br><span class="line"><span class="comment">## ---</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#### Widgets</span></span><br><span class="line">widgets: </span><br><span class="line">- github-card</span><br><span class="line">- category</span><br><span class="line">- tag</span><br><span class="line">- archive</span><br><span class="line">- tagcloud</span><br><span class="line">- rss</span><br><span class="line">  <span class="comment">## provide eight widgets:github-card,category,tag,rss,archive,tagcloud,links,weibo</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#### RSS </span></span><br><span class="line">rss: /atom.xml <span class="comment">## RSS address.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#### Image</span></span><br><span class="line">imglogo:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span>             <span class="comment">## display image logo true/false.</span></span><br><span class="line">  src: img/logo.png        <span class="comment">## `.svg` and `.png` are recommended,please put image into the theme folder `/jacman/source/img`.</span></span><br><span class="line">favicon: img/favicon.ico   <span class="comment">## size:32px*32px,`.ico` is recommended,please put image into the theme folder `/jacman/source/img`.     </span></span><br><span class="line">apple_icon: img/jacman.jpg <span class="comment">## size:114px*114px,please put image into the theme folder `/jacman/source/img`.</span></span><br><span class="line">author_img: img/author.jpg <span class="comment">## size:220px*220px.display author avatar picture.if don't want to display,please don't set this.</span></span><br><span class="line">banner_img: <span class="comment">#img/banner.jpg ## size:1920px*200px+. Banner Picture</span></span><br><span class="line"><span class="comment">### Theme Color </span></span><br><span class="line">theme_color:</span><br><span class="line">    theme: <span class="string">'#2ca6cb'</span>    <span class="comment">##the defaut theme color is blue</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 代码高亮主题</span></span><br><span class="line"><span class="comment"># available: default | night</span></span><br><span class="line">highlight_theme: default</span><br><span class="line"></span><br><span class="line"><span class="comment">#### index post is expanding or not </span></span><br><span class="line">index:</span><br><span class="line">  expand: <span class="literal">true</span>           <span class="comment">## default is unexpanding,so you can only see the short description of each post.</span></span><br><span class="line">  excerpt_link: Read More  </span><br><span class="line"></span><br><span class="line">close_aside: <span class="literal">false</span>  <span class="comment">#close sidebar in post page if true</span></span><br><span class="line">mathjax: <span class="literal">false</span>      <span class="comment">#enable mathjax if true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### Creative Commons License Support, see http://creativecommons.org/ </span></span><br><span class="line"><span class="comment">### you can choose: by , by-nc , by-nc-nd , by-nc-sa , by-nd , by-sa , zero</span></span><br><span class="line">creative_commons: none</span><br><span class="line"></span><br><span class="line"><span class="comment">#### Author information</span></span><br><span class="line">author:</span><br><span class="line">  intro_line1:  <span class="string">"程序员上辈子都是折翼的天使"</span>    <span class="comment">## your introduction on the bottom of the page</span></span><br><span class="line">  intro_line2:  <span class="string">"This is my blog,Try to do better."</span>  <span class="comment">## the 2nd line</span></span><br><span class="line">  weibo:      <span class="comment">## e.g. wuchong1014 or 2176287895 for http://weibo.com/2176287895</span></span><br><span class="line">  weibo_verifier: b3593ceb    <span class="comment">## e.g. b3593ceb Your weibo-show widget verifier ,if you use weibo-show it is needed.</span></span><br><span class="line">  tsina:      <span class="comment">## e.g. 2176287895  Your weibo ID,It will be used in share button.</span></span><br><span class="line">  douban:     <span class="comment">## e.g. wuchong1014 or your id for https://www.douban.com/people/wuchong1014</span></span><br><span class="line">  zhihu:      <span class="comment">## e.g. jark  for http://www.zhihu.com/people/jark</span></span><br><span class="line">  email:      <span class="comment">## e.g. imjark@gmail.com</span></span><br><span class="line">  twitter:    <span class="comment">## e.g. jarkwu for https://twitter.com/jarkwu</span></span><br><span class="line">  github: tengj    <span class="comment">## e.g. wuchong for https://github.com/wuchong</span></span><br><span class="line">  facebook:   <span class="comment">## e.g. imjark for https://facebook.com/imjark</span></span><br><span class="line">  linkedin:   <span class="comment">## e.g. wuchong1014 for https://www.linkedin.com/in/wuchong1014</span></span><br><span class="line">  google_plus:    <span class="comment">## e.g. "111190881341800841449" for https://plus.google.com/u/0/111190881341800841449, the "" is needed!</span></span><br><span class="line">  stackoverflow:  <span class="comment">## e.g. 3222790 for http://stackoverflow.com/users/3222790/jark</span></span><br><span class="line"><span class="comment">## if you set them, the corresponding  share button will show on the footer</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#### Toc</span></span><br><span class="line">toc:</span><br><span class="line">  article: <span class="literal">true</span>   <span class="comment">## show contents in article.</span></span><br><span class="line">  aside: <span class="literal">true</span>     <span class="comment">## show contents in aside.</span></span><br><span class="line"><span class="comment">## you can set both of the value to true of neither of them.</span></span><br><span class="line"><span class="comment">## if you don't want display contents in a specified post,you can modify `front-matter` and add `toc: false`.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#### Links</span></span><br><span class="line">links:</span><br><span class="line"><span class="comment">#### Comment</span></span><br><span class="line">duoshuo_shortname: 嘟嘟MD   <span class="comment">## e.g. wuchong   your duoshuo short name.</span></span><br><span class="line">disqus_shortname:    <span class="comment">## e.g. wuchong   your disqus short name.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#### Share button</span></span><br><span class="line">jiathis:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">false</span> <span class="comment">## if you use jiathis as your share tool,the built-in share tool won't be display.</span></span><br><span class="line">  id:    <span class="comment">## e.g. 1889330 your jiathis ID. </span></span><br><span class="line">  tsina: <span class="comment">## e.g. 2176287895 Your weibo id,It will be used in share button.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#### Analytics</span></span><br><span class="line">google_analytics:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">false</span></span><br><span class="line">  id:        <span class="comment">## e.g. UA-46321946-2 your google analytics ID.</span></span><br><span class="line">  site:      <span class="comment">## e.g. wuchong.me your google analytics site or set the value as auto.</span></span><br><span class="line"><span class="comment">## You MUST upgrade to Universal Analytics first!</span></span><br><span class="line"><span class="comment">## https://developers.google.com/analytics/devguides/collection/upgrade/?hl=zh_CN</span></span><br><span class="line">baidu_tongji:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  sitecode: e6d1f421bbc9962127a50488f9ed37d1 <span class="comment">## e.g. e6d1f421bbc9962127a50488f9ed37d1 your baidu tongji site code</span></span><br><span class="line">cnzz_tongji:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">false</span></span><br><span class="line">  siteid:    <span class="comment">## e.g. 1253575964 your cnzz tongji site id</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#### Miscellaneous</span></span><br><span class="line">ShowCustomFont: <span class="literal">true</span>  <span class="comment">## you can change custom font in `variable.styl` and `font.styl` which in the theme folder `/jacman/source/css`.</span></span><br><span class="line">fancybox: <span class="literal">true</span>        <span class="comment">## if you use gallery post or want use fancybox please set the value to true.</span></span><br><span class="line">totop: <span class="literal">true</span>           <span class="comment">## if you want to scroll to top in every post set the value to true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#### Custom Search</span></span><br><span class="line">google_cse: </span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">false</span></span><br><span class="line">  cx:   <span class="comment">## e.g. 018294693190868310296:abnhpuysycw your Custom Search ID.</span></span><br><span class="line"><span class="comment">## https://www.google.com/cse/ </span></span><br><span class="line"><span class="comment">## To enable the custom search You must create a "search" folder in '/source' and a "index.md" file</span></span><br><span class="line"><span class="comment">## set the 'front-matter' as</span></span><br><span class="line"><span class="comment">## layout: search </span></span><br><span class="line"><span class="comment">## title: search</span></span><br><span class="line"><span class="comment">## ---</span></span><br><span class="line">baidu_search:     <span class="comment">## http://zn.baidu.com/</span></span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">false</span></span><br><span class="line">  id:   <span class="comment">## e.g. "783281470518440642"  for your baidu search id</span></span><br><span class="line">  site: http://zhannei.baidu.com/cse/search  <span class="comment">## your can change to your site instead of the default site</span></span><br><span class="line">  </span><br><span class="line">tinysou_search:     <span class="comment">## http://tinysou.com/</span></span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">false</span></span><br><span class="line">  id:  <span class="comment">## e.g. "4ac092ad8d749fdc6293" for your tiny search id</span></span><br></pre></td></tr></table></figure></p>
<p>说明:  </p>
<ul>
<li>menu 默认没有启用 <code>/tags</code> 和 <code>/categories</code> 页面，如果需要启用请在博客目录下的<code>source</code>文件夹中分别建立<code>tags</code>和<code>categories</code>文件夹每个文件夹中分别包含一个<code>index.md</code>文件。内容为：  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">layout: tags (或categories)</span><br><span class="line">title: tags (或categories)</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>因为主题中已经内置了这两个页面的模板，所以他们会被正确的解析出来。  </p>
<ul>
<li>widgets: 提供了8种小工具。</li>
<li>rss: 请填写你博客的RSS地址。</li>
<li>theme_color: 默认主题颜色，修改一下就能改变整个博客主题颜色，蛮不错的，推荐几个颜色 <code>#2ca6cb</code> <code>#ea6753</code> <code>#589baf</code></li>
<li>ShowCustomFont: 启用自定义字体，如果你有一定前端基础可以修改<code>font.styl</code>替换为你喜欢的字体。</li>
<li>toc: 是否启用在文章中或侧边栏中的目录功能。二者可以都为<code>true</code>或都为<code>false</code>。同时，如果你希望在特定的某一篇文章中关闭目录功能你可以在文章文件开头中的<code>front-matter</code>中加上一行<code>toc: false</code>。</li>
<li>fancybox: 默认关闭，如果你使用Hexo经常发表Gallery类型的文章，那么请设置为<code>true</code>（同时需要复制<code>fancybox.js</code>到你的博客目录下scripts文件夹中）。ps: 我很佩服用Hexo发表相册的文艺青年。</li>
<li>author: 作者信息，建议尽量填写完整。其中<code>tsina</code>是你的新浪微博ID，不同于用户名或微博主页地址。启用这个属性后，其他用户在微博上分享你文章的同时会自动@你。</li>
<li>duoshuo_shortname: 填写duoshuo_shortname多说的用户名，启用多说评论系统。在大陆地区更好用的评论系统</li>
<li>jiathis: 加网分享系统。默认关闭，因为主题已经内置了原生的分享功能。</li>
<li>google_analytics: Google Analytics追踪代码。请注意：*Google Analytics已经升级到了Universal Analytics。请先前往后台升级你的Google Analytics版本后再启用追踪代码 更多信息请点击这里了解。</li>
<li>google_cse: Google自定义搜索。如果开启自定义搜索需要先登录Google CSE，配置好你的站点，并获得此自定义搜索的ID。此外你需要在博客目录下的source文件夹中建立search文件夹并包含一个<code>index.md</code>文件。内容为：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">layout: search</span><br><span class="line">title: search</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><hr>
<p><a href="http://blog.csdn.net/peace1213/article/details/47010381" target="_blank" rel="external">hexo的jacman主题配置</a></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><hr>
<p>以上就是hexo主题的下载以及配置，简单的说就是对两个config.yml文件的配置，hexo提供的主题很多，大家可以去<a href="https://hexo.io/themes" target="_blank" rel="external">官网</a>选择喜欢主题。下一篇打算总结下基于这个主题下我的一些优化配置。</p>
<hr>
<p>最近撸了个java的公众号，学习资源超级多，视频，电子书，最新开发工具一个都不能少，已全部分享到百度云盘，求资源共享，打造一个学习方便，工作方便的java公众号，开源开源，有需求的可以关注~撒花<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/javaLearn.PNG" alt=""></p>
]]></content>
      
        <categories>
            
            <category> hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[myeclipse中tomcat内存溢出完美解决方案]]></title>
      <url>http://tengj.top/2016/02/25/myeclipsetomcat/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>今天工作启动项目的时候发现报了内存溢出的错误，java.lang.OutOfMemoryError: PermGen space<br>网上百度了许多，各种解决方案，有的说修改tomcat下面的catalina.bat,有的说修改myeclipse.ini，把我弄得晕头转向。后来发现一个个人认为最好的解决方案，就是使用jdk自带的jvisualvm.exe来监控，特此来总结一下，希望对大家有帮助。</p>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>动手前先了解这几个参数的意思：  </p>
<pre><code>-Xms128m JVM初始分配的堆内存
-Xmx512m JVM最大允许分配的堆内存，按需分配  
-XX:PermSize=64M JVM初始分配的非堆内存  
-XX:MaxPermSize=128M JVM最大允许分配的非堆内存，按需分配  
</code></pre><h2 id="启动jvisualvm"><a href="#启动jvisualvm" class="headerlink" title="启动jvisualvm"></a>启动jvisualvm</h2><p><code>jvisualvm.exe</code>在jdk的bin路径下，我的路径是\jdk1.6.0_45\bin，<code>jvisualvm.exe</code>启动后的界面如下，顺便简单说明下几个地方：  </p>
<ol>
<li>这里是有使用到java的地方，这边的tomcat就是你启动后的web项目（部署到tomcat服务器的）</li>
<li>这里是我们最关心的地方，有两个tab项，一个是堆，另外一个是PermGen（简称非堆，内存溢出问题大多出在这个地方）<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/javavm0.png" style="margin:0;"><br>下图是我项目启动报 PermGen space错的时候PermGen的使用情况，大家可以看到这边已使用的已经达到了最大值，所以就报错了，要解决这个问题，就是要加大这个PermGen的最大值，也就是上次我提到的参数<code>MaxPermSize</code><br><img src="http://7xqch5.com1.z0.glb.clouddn.com/javavm1.png" style="margin:0;"><h2 id="修改MaxPermSize参数"><a href="#修改MaxPermSize参数" class="headerlink" title="修改MaxPermSize参数"></a>修改MaxPermSize参数</h2>我是用myeclipse来运行项目的，用到的是tomcat6,所以要这样修改就行：<br>Window-&gt;Preferences-&gt;Myeclipse-&gt;Services-&gt;Tomcat-&gt;Tomcat 6.x-&gt;JDK<br>在Optional Java VM arguments:下边的输入框里输入:<br><code>-Xms512m -Xmx512m -XX:PermSize=256m -XX:MaxPermSize=256m</code><br>这个大小可以根据上面监控里面已使用的最大值来调整，合适的就行!<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/javavm4.png" style="margin:0;"></li>
</ol>
<p>修改完后，重启下项目再看看监控，发现已使用的不会超过最大值了，就不会再出现内存溢出问题了。如图：<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/javavm2.png" style="margin:0;"></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>问题解决了，还有时间就顺便了解一下JVM内存管理的机制</p>
<h2 id="堆-Heap-和非堆-Non-heap-内存"><a href="#堆-Heap-和非堆-Non-heap-内存" class="headerlink" title="堆(Heap)和非堆(Non-heap)内存"></a>堆(Heap)和非堆(Non-heap)内存</h2><p>按照官方的说法：“Java 虚拟机具有一个堆，堆是运行时数据区域，所有类实例和数组的内存均从此处分配。堆是在 Java 虚拟机启动时创建的。”“在JVM中堆之外的内存称为非堆内存(Non-heap memory)”。可以看出JVM主要管理两种类型的内存：<code>堆和非堆</code>。简单来说堆就是Java代码可及的内存，是留给开发人员使用的；非堆就是JVM留给自己用的，所以方法区、JVM内部处理或优化所需的内存(如JIT编译后的代码缓存)、每个类结构(如运行时常数池、字段和方法数据)以及方法和构造方法的代码都在非堆内存中。 </p>
<h2 id="堆内存分配"><a href="#堆内存分配" class="headerlink" title="堆内存分配"></a>堆内存分配</h2><p>JVM初始分配的堆内存由-Xms指定，默认是物理内存的1/64；JVM最大分配的堆内存由-Xmx指定，默认是物理内存的1/4。默认空余堆内存小于40%时，JVM就会增大堆直到-Xmx的最大限制；<br>空余堆内存大于70%时，JVM会减少堆直到-Xms的最小限制。<code>因此服务器一般设置-Xms、-Xmx 相等以避免在每次GC后调整堆的大小</code>。<br>说明：如果-Xmx 不指定或者指定偏小，应用可能会导致java.lang.OutOfMemory错误，此错误来自JVM，不是Throwable的，无法用try…catch捕捉。</p>
<h2 id="非堆内存分配"><a href="#非堆内存分配" class="headerlink" title="非堆内存分配"></a>非堆内存分配</h2><p> JVM使用<code>-XX:PermSize</code>设置非堆内存初始值，默认是物理内存的1/64；由<code>XX:MaxPermSize</code>设置最大非堆内存的大小，默认是物理内存的1/4。（还有一说：<code>MaxPermSize</code>缺省值和-server -client选项相关， -server选项下默认<code>MaxPermSize</code>为64m，-client选项下默认<code>MaxPermSize</code>为32m。这个我没有实验。）<br>上面错误信息中的PermGen space的全称是Permanent Generation space，是指内存的永久保存区域。还没有弄明白PermGen space是属于非堆内存，还是就是非堆内存，但至少是属于了。<br><code>XX:MaxPermSize</code>设置过小会导致java.lang.OutOfMemoryError: PermGen space 就是内存益出。<br>说说为什么会内存益出：<br>（1）这一部分内存用于存放Class和Meta的信息，Class在被 Load的时候被放入PermGen space区域，它和存放Instance的Heap区域不同<br>（2）GC(Garbage Collection)不会在主程序运行期对PermGen space进行清理，所以如果你的APP会LOAD很多CLASS 的话,就很可能出现PermGen space错误。<br>这种错误常见在web服务器对JSP进行pre compile的时候。  </p>
<h2 id="JVM内存限制-最大值"><a href="#JVM内存限制-最大值" class="headerlink" title="JVM内存限制(最大值)"></a>JVM内存限制(最大值)</h2><p> 首先JVM内存限制于实际的最大物理内存，假设物理内存无限大的话，JVM内存的最大值跟操作系统有很大的关系。简单的说就32位处理器虽然可控内存空间有4GB,但是具体的操作系统会给一个限制， 这个限制一般是2GB-3GB（一般来说Windows系统下为1.5G-2G，Linux系统下为2G-3G），而64bit以上的处理器就不会有限制了。  </p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://www.cnblogs.com/mingforyou/archive/2012/03/03/2378143.html" target="_blank" rel="external">Xms Xmx PermSize MaxPermSize 区别</a><br><a href="http://blog.csdn.net/communicate_/article/details/8979588" target="_blank" rel="external">jvm 内存溢出 在myeclipse中加大tomcat的jvm内存</a></p>
<hr>
<p>最近撸了个java的公众号，学习资源超级多，视频，电子书，最新开发工具一个都不能少，已全部分享到百度云盘，求资源共享，打造一个学习方便，工作方便的java公众号，开源开源，有需求的可以关注~撒花<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/javaLearn.PNG" alt=""></p>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hexo干货系列：（一）hexo+gitHub搭建个人独立博客]]></title>
      <url>http://tengj.top/2016/02/22/hexo1/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>一直想要一个自己的独立博客，但是觉得申请域名+服务器的太麻烦了就一直没有实现。偶然机会发现Hexo这个优秀的静态博客框架，再搭配现在流行的gitHub，简直是完美写博客的黄金搭档（免费+方便）。于是就上网参考了好多教程最后磕磕碰碰的搭建了起来。但是网上的教程多多少少都有点问题，可能比较早吧。就有了这个自己总结的教程，一是自己总结一下。二是给也想搭建Hexo博客的童鞋们多一点参考。</p>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>我这个教程是基于window系统用户，Hexo3版本</p>
<h2 id="安装前提软件"><a href="#安装前提软件" class="headerlink" title="安装前提软件"></a>安装前提软件</h2><p><a href="https://nodejs.org/en" target="_blank" rel="external">Node.js</a>:<br>作用：node.js用来创建hexo博客框架的，我当前安装版本为：node-v5.6.0-x64   </p>
<p><a href="http://git-scm.com/download" target="_blank" rel="external">Git客户端</a>:<br>作用：把本地的hexo内容提交到github上去，我当前安装的是Git-2.7.0-64-bit </p>
<h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>安装前先介绍几个hexo常用的命令,#后面为注释。</p>
<pre><code>hexo g #完整命令为hexo generate,用于生成静态文件
hexo s #完整命令为hexo server,用于启动服务器，主要用来本地预览
hexo d #完整命令为hexo deploy,用于将本地文件发布到github上
hexo n #完整命令为hexo new,用于新建一篇文章
</code></pre><p>利用 npm 命令即可安装。在任意位置点击鼠标右键，选择Git Base  </p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/hexo1.jpg" style="margin:0;"></p>
<p>输入安装hexo命令：  </p>
<pre><code>npm install -g hexo
</code></pre><p>安装完成后，在你喜爱的文件夹下（如E:\Hexo），执行以下指令(在E:\Hexo内点击鼠标右键，选择Git Bash)，Hexo 即会自动在目标文件夹建立网站所需要的所有文件。</p>
<pre><code>hexo init
</code></pre><p>安装依赖包：</p>
<pre><code>npm install
</code></pre><p>让我们看看刚刚下载的hexo文件带来了什么，在E:\hexo内执行以下命令：</p>
<pre><code>hexo g
hexo s
</code></pre><p>然后用浏览器访问<a href="http://localhost:4000，" target="_blank" rel="external">http://localhost:4000，</a>  此时，你应该看到了一个漂亮的博客了，当然这个博客只是在本地的，别人是看不到的，hexo3.0使用的默认主题是landscape。轻轻松松就看到了一点成果，是不是很激动，这就是hexo的强大之处，这个本地预览的功能，我真是爱不释手。</p>
<h2 id="注册Github帐号"><a href="#注册Github帐号" class="headerlink" title="注册Github帐号"></a>注册Github帐号</h2><p>已经有Github帐号跳过此步，首先进入<a href="https://github.com/" target="_blank" rel="external">Github</a>进行注册，用户名、邮箱和密码之后都需要用到，自己记好。</p>
<h2 id="创建repository"><a href="#创建repository" class="headerlink" title="创建repository"></a>创建repository</h2><p>repository相当于一个仓库，用来放置你的代码文件。首先，登陆进入<a href="https://github.com/" target="_blank" rel="external">Github</a>，并进入个人页面，选择<code>repositories</code>(下图第一个红圈的地方)，然后New一个<code>repository</code>(下图第二个红圈的地方)</p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/hexo2.jpg" style="margin:0;"></p>
<p>创建时，只需要填写Repository name即可，当然这个名字的格式必须为youname.github.io，例如我的为tengj.github.io<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/hexo3.png" style="margin:0;"></p>
<h2 id="部署本地文件到github"><a href="#部署本地文件到github" class="headerlink" title="部署本地文件到github"></a>部署本地文件到github</h2><p>既然Repository已经创建了，当然是先把博客放到Github上去看看效果。编辑E：\hexo下的_config.yml文件，建议使用Notepad++。<br>在_config.yml最下方，添加如下配置(命令中的第一个tengj为Github的用户名,第二个tengj为之前New的Repository的名字,记得改成自己的。另外记得一点，hexo的配置文件中任何’:’后面都是带一个空格的),如果配置以下命令出现ERROR Deployer not found : github，则参考上文的解决方法</p>
<pre><code>deploy: 
    type: git
    repository: https://github.com/tengj/tengj.github.io.git
    branch: master
</code></pre><p>配置_config.yml并保存。如果你是第一次使用Github或者是已经使用过，但没有配置过SSH，则可能需要配置一下:</p>
<p>在Git Bash输入以下指令（任意位置点击鼠标右键），检查是否已经存在了SSH keys。</p>
<pre><code>ls -al ~/.ssh
</code></pre><p>如果不存在就没有关系，如果存在的话，直接删除.ssh文件夹里面所有文件：<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/hexo4.png" style="margin:0;"><br>输入以下指令（邮箱就是你注册Github时候的邮箱）后，回车，出现提示让你输入的时候直接先回车，好像需要3次，如下图所示：</p>
<pre><code>ssh-keygen -t rsa -C &quot;358593266@qq.com&quot;
</code></pre><p><img src="http://7xqch5.com1.z0.glb.clouddn.com/hexo1_5.png" style="margin:0;"></p>
<p>然后键入以下指令：</p>
<pre><code>ssh-agent -s
</code></pre><p><img src="http://7xqch5.com1.z0.glb.clouddn.com/hexo1_6.png" style="margin:0;"></p>
<p>继续输入指令：</p>
<pre><code>ssh-add ~/.ssh/id_rsa
</code></pre><p>输入之后，在我这里是出错了，不知道你的有没有出错。</p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/hexo1_7.png" style="margin:0;"></p>
<p>如果你的也是这样子出错了的话，就输入以下指令：</p>
<pre><code>eval `ssh-agent -s`
ssh-add
</code></pre><p><img src="http://7xqch5.com1.z0.glb.clouddn.com/hexo1_8.png" style="margin:0;"></p>
<p>到了这一步，就可以添加SSH key到你的Github账户了。键入以下指令，拷贝Key（先拷贝了，等一下可以直接粘贴，不放心的在执行下面命令后，先黏贴在记事本上）：</p>
<pre><code>clip &lt; ~/.ssh/id_rsa.pub
</code></pre><p>然后到Github里面，点击右上角的设置图标Settings,找到SSH keys,Ttile随便你命名，Key就黏贴上你刚才复制的key,然后点Add SSH key，最后会让你重新输入下gitHub的密码</p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/hexo1_9.png" style="margin:0;"><br><img src="http://7xqch5.com1.z0.glb.clouddn.com/hexo1_10.png" style="margin:0;"></p>
<p>最后还是测试一下吧，键入以下命令：</p>
<pre><code>ssh -T git@github.com
</code></pre><p>你可能会看到有警告，没事，输入“yes”就好<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/hexo1_11.png" style="margin:0;"></p>
<p>以上就表示SSH配置好了，执行以下命令部署到Github上。</p>
<pre><code>hexo g
hexo d
</code></pre><p>如果执行hexo d命令报下名错：</p>
<p><img src="http://7xqch5.com1.z0.glb.clouddn.com/hexo1_12.png" style="margin:0;"></p>
<p>就先安装一下hexo-deployer-git这个模块：</p>
<pre><code>npm install hexo-deployer-git --save
</code></pre><p>安装好了继续执行<code>hexo d</code>部署命令，输入gitHub的账号密码，就可以访问了。我的是： tengj.github.io<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/hexo1_13.jpg" style="margin:0;"></p>
<h2 id="发表一篇文章"><a href="#发表一篇文章" class="headerlink" title="发表一篇文章"></a>发表一篇文章</h2><p>1.在Git Bash执行命令：</p>
<pre><code>hexo new &quot;my new post&quot;
</code></pre><p>2.在E:\hexo\source_post中打开my-new-post.md，打开方式使用记事本或者其他文本工具。<br>hexo中写文章使用的是Markdown，这里推荐使用<code>markdownpad</code>这个工具。 Markdown编写语法自己百度一下，不难</p>
<pre><code>title: my new post #可以改成中文的，如“新文章”
date: 2016-02-21 16:04:09 #发表日期，一般不改动
categories: blog #文章文类
tags: [文章] #文章标签，多于一项时用这种格式，只有一项时使用tags: blog
---
#这里是正文，用markdown写，你可以选择写一段显示在首页的简介后，加上
&lt;!--more--&gt;，在&lt;!--more--&gt;之前的内容会显示在首页，之后的内容会被隐藏，当游客点击Read more才能看到。
</code></pre><p>写完文章后，你可以使用1.$ hexo g生成静态文件。2.$ hexo s在本地预览效果。3.hexo d同步到github，然后使用<a href="http://tengj.github.io进行访问。" target="_blank" rel="external">http://tengj.github.io进行访问。</a></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://opiece.me/2015/04/09/hexo-guide/#参考" target="_blank" rel="external">使用Hexo搭建个人博客(基于hexo3.0)</a><br><a href="http://www.jianshu.com/p/465830080ea9#" target="_blank" rel="external">HEXO+Github,搭建属于自己的博客</a><br><a href="http://jingyan.baidu.com/article/d8072ac47aca0fec95cefd2d.html" title="史上最详细“截图”搭建Hexo博客并部署到Github" target="_blank" rel="external">史上最详细“截图”搭建Hexo博客并部署到Github</a></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>到这里，就算初步搭好了一个属于自己的独立博客，后续就是本地写文章然后部署最后发布就行。当然这只是最基本的流程，hexo提供了许多好看的主题，我准备下篇里面详细介绍下主题的下载以及配置。让你的博客更加的酷炫!<br>大家按照我这个整理的教程搭建，理论上都能搭建成功。如果过程中发现一些问题，也可以留言我们一起探讨。祝大家一次就能搭建属于自己的独立博客~撒花</p>
<hr>
<p>最近撸了个java的公众号，学习资源超级多，视频，电子书，最新开发工具一个都不能少，已全部分享到百度云盘，求资源共享，打造一个学习方便，工作方便的java公众号，开源开源，有需求的可以关注~撒花<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/javaLearn.PNG" alt=""></p>
]]></content>
      
        <categories>
            
            <category> hexo干货系列 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hexo干货系列：（总纲）搭建独立博客初衷]]></title>
      <url>http://tengj.top/2016/02/20/hexoTotal/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我是一名程序员，以前知识整理都是整理在为知笔记上，博客用的比较少，更别说是使用独立博客，因为不会。。。<br>2016年过年在家期间偶然的机会萌发了自己要搭建一个属于自己的独立博客的想法，于是就有了下面的这些。</p>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="技能点涉及"><a href="#技能点涉及" class="headerlink" title="技能点涉及"></a>技能点涉及</h2><p>为了搭建自己的独立博客，结果学了许多东西，感觉也是蛮好玩的。<br>下面用思维导图画一下我为了搭建个人博客而不得不涉及学习的知识点。<br><img src="http://7xqch5.com1.z0.glb.clouddn.com/hexo0_1.png" alt="">  </p>
<h2 id="系列博文整理"><a href="#系列博文整理" class="headerlink" title="系列博文整理"></a>系列博文整理</h2><p>整理了下hexo系列的文章，发现写系列博客感觉还是很棒的：<br><a href="http://tengj.top/2016/02/22/hexo干货系列：（一）hexo+gitHub搭建个人独立博客/">hexo干货系列：（一）hexo+gitHub搭建个人独立博客</a><br><a href="http://tengj.top/2016/02/26/hexo干货系列：（二）hexo主题下载及配置/">hexo干货系列：（二）hexo主题下载及配置</a><br><a href="http://tengj.top/2016/03/06/hexo干货系列：（三）hexo的Jacman主题优化/">hexo干货系列：（三）hexo的Jacman主题优化</a><br><a href="http://tengj.top/2016/03/06/hexo干货系列：（四）将hexo博客同时托管到github和coding/">hexo干货系列：（四）将hexo博客同时托管到github和coding</a><br><a href="http://tengj.top/2016/03/11/hexo5Swiftype">hexo干货系列：（五）hexo添加站内搜索</a><br><a href="http://tengj.top/2016/03/14/hexo6seo">hexo干货系列：（六）hexo提交搜索引擎（百度+谷歌）</a><br><a href="http://tengj.top/2016/03/17/hexo7count/">hexo干货系列：（七）hexo安装统计插件</a><br><a href="http://tengj.top/2016/03/20/hexo8hidewidgets/">hexo干货系列：（八）hexo文章自动隐藏侧边栏</a>  </p>
<h1 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h1><p>2016年才知道有hexo这个东西，真希望早两年有人告诉我可以这样搭博客~~<br>hexo系列的学的差不多了，个人博客也搭建好了，后续就是用来记录自己工作以及生活上的点点滴滴。也会顺便把这几年学习的心得一片片写出来跟大家分享。<br>有分享才有进度，期待与你的碰撞！</p>
]]></content>
      
        <categories>
            
            <category> hexo干货系列 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
